# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://learn.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:
    - main
    - gh-readonly-queue/main
    - release/*

pool:
  vmImage: 'ubuntu-latest' # examples of other options: 'macOS-10.15', 'windows-2019'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  major: 0
  minor: 10
  # Maintain a separate patch value between CI and PR runs.
  # The counter is reset when the minor version is updated.
  patch: $[counter(format('{0}_{1}', variables['build.reason'], variables['minor']), 0)]
  isReleaseBuild: $(isNugetRelease)
  $id: 'https://github.com/Azure/data-api-builder/releases/download/v$(major).$(minor).$(patch)/dab.draft.schema.json'
  SNAPSHOOTER_STRICT_MODE: true

steps:
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

# If this is a release, do not append the build number at the end as it will 
# generate the prerelease nuget version.
# We cannot set this in variables section above because $(isNugetRelease) 
# is not available at pipeline compilation time.
- bash: |
    echo IsNugetRelease = $ISNUGETRELEASE
    echo IsReleaseCandidate = $ISRELEASECANDIDATE
    dabVersion=$(major).$(minor).$(patch)
    if [ "$ISNUGETRELEASE" = "true" ]
    then
      if [ "$ISRELEASECANDIDATE" = "true" ]
      then
        dabVersion=$dabVersion-rc
      fi
    else
      dabVersion=$dabVersion-$(Build.BuildId)
    fi
    echo dabVersion = $dabVersion
    echo "##vso[task.setvariable variable=dabVersion]$dabVersion"
    schemaId="https://github.com/Azure/data-api-builder/releases/download/v$dabVersion/dab.draft.schema.json"
    echo schemaId = $schemaId
    echo "##vso[task.setvariable variable=\$id]$schemaId"
  displayName: Set dab version

- task: UseDotNet@2
  displayName: Setup .NET SDK v6.0.x
  inputs:
    packageType: sdk
    version: 6.0.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    feedsToUse: config
    nugetConfigPath: Nuget.config

- task: DotNetCoreCLI@2
  displayName: Check formatting
  inputs:
    command: custom
    custom: format
    projects: '$(solution)'
    arguments: '--verify-no-changes'

# Use dotnet pack command to build the project because we want to generate build output
# in the correct location that pack command will be using. This build output location
# will be used to do code signing so we need to do this first.
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: custom
    custom: pack
    projects: '**/*.sln'
    arguments: '--configuration $(buildConfiguration) -p:Version=$(dabVersion)' 

- task: DotNetCoreCLI@2
  displayName: "Run Unit Tests"
  inputs:
    command: test
    projects: '**/*Tests*.csproj'
    arguments: '--filter "TestCategory!=CosmosDb_NoSql&TestCategory!=MsSql&TestCategory!=PostgreSql&TestCategory!=MySql" --configuration $(buildConfiguration) --collect "XPlat Code coverage"'

- task: CmdLine@2
  displayName: 'Set flag to publish Verify *.received files when tests fail'
  condition: failed()
  inputs:
    script: 'echo ##vso[task.setvariable variable=publishverify]Yes'

- task: CopyFiles@2
  condition: eq(variables['publishverify'], 'Yes')
  displayName: 'Copy received files to Artifact Staging'
  inputs:
    contents: '**\*.received.*' 
    targetFolder: '$(Build.ArtifactStagingDirectory)\Verify'
    cleanTargetFolder: true
    overWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish received files as Artifacts'
  name: 'verifypublish'
  condition: eq(variables['publishverify'], 'Yes')
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Verify'
    ArtifactName: 'Verify'
    publishLocation: 'Container'

- task: FileTransform@1.206.0
  displayName: 'Version stamp dab.draft.schema.json'
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)'
    fileType: 'json'
    targetFiles: 'schemas/dab.draft.schema.json'
 
- task: CopyFiles@2
  displayName: 'Copy dab.draft.schema.json'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/schemas'
    contents: 'dab.draft.schema.json'
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Governance Detection'
  inputs:
    alertWarningLevel: Medium
    failOnAlert: true

- task: notice@0
  # This will generate the NOTICE.txt for distribution
  displayName: Generate NOTICE file
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    outputfile: $(Build.SourcesDirectory)/NOTICE.txt
    outputformat: text

- task: PowerShell@2
  displayName: "Add Additional Licenses to NOTICE file"
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    targetType: 'filePath'
    filePath: $(System.DefaultWorkingDirectory)/scripts/notice-generation.ps1
    # Artifact Staging Directory used to temporarily store downloaded ChilliCream license.
    arguments: $(Build.ArtifactStagingDirectory) $(Build.SourcesDirectory)

- template: templates/code-signing.yml
  parameters:
    # This is the path that will be used for packing nuget package.
    # We will need to sign the binaries in this location.
    path: '$(Build.SourcesDirectory)/src/out/cli/net6.0/publish' 

# Create nuget package after the binaries are signed. So that the binaries inside nuget package are signed.
- task: DotNetCoreCLI@2
  displayName: 'Creating Nuget Package'
  inputs:
    command: custom
    custom: pack
    projects: '**/Cli.csproj'
    arguments: '--configuration $(buildConfiguration) --no-build -p:Version=$(dabVersion) -o $(Build.ArtifactStagingDirectory)/nupkg'

# Now sign the nuget package itself.
- template: templates/code-signing.yml
  parameters:
    path: '$(Build.ArtifactStagingDirectory)/nupkg'
    signNuget: true

- task: PowerShell@2
  displayName: "Package DAB to multiple platforms"
  inputs:
    targetType: 'filePath'
    filePath: $(System.DefaultWorkingDirectory)/scripts/publish.ps1
    arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) -Package

- task: PowerShell@2
  displayName: "Smoke Test for DAB CLI"
  inputs:
    targetType: 'filePath'
    filePath: $(System.DefaultWorkingDirectory)/scripts/dab-smoke-test-script.ps1
    arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(Agent.OS)  $(dabVersion)

# Sign the binaries that were generated per platform
- template: templates/code-signing.yml
  parameters:
    path: '$(Build.ArtifactStagingDirectory)/publish'

# Zip the binaries after signing process.
- task: PowerShell@2
  displayName: "Zip the binaries after signing"
  inputs:
    targetType: 'filePath'
    filePath: $(System.DefaultWorkingDirectory)/scripts/publish.ps1
    arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) -CreateZip

# Generating SBOM manifest for Dab files
- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: 'SBOM Generation Task'
  inputs:
      BuildDropPath: '$(Build.ArtifactStagingDirectory)'

# Downloads the manifest file from the latest GitHub Release.
- task: DownloadGitHubRelease@0
  inputs:
    connection: 'DataApiBuilder'
    userRepository: '$(Build.Repository.Name)'
    defaultVersionType: 'latest'
    itemPattern: 'dab-manifest.json'
    downloadPath: '$(Build.ArtifactStagingDirectory)'

# Generating Manifest File for generated Zip package
- task: PowerShell@2
  displayName: "Generate Manifest File"
  inputs:
    targetType: 'filePath'
    filePath: $(System.DefaultWorkingDirectory)/scripts/create-manifest-file.ps1
    arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) $(isReleaseBuild)

# This code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  displayName: "Upload build artifacts"
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    publishLocation: 'pipeline'

- task: NuGetCommand@2
  displayName: 'Publish Nuget to Internal Feed'
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    command: 'push'
    feedsToUse: 'select'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: CosmosDB/DataApiBuilder
    versioningScheme: 'off'
    allowPackageConflicts: false

- task: NuGetCommand@2
  displayName: 'Publish Nuget to Nuget.org'
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: Microsoft.DataApiBuilder

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'

# Create a draft release with Assets
- task: GitHubRelease@1
  displayName: "Draft Github Release"
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    gitHubConnection: 'DataApiBuilder'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(dabVersion)'
    title: 'New Release: Data API Builder for Azure Databases'
    assets: |
      $(Build.ArtifactStagingDirectory)/**/*.nupkg
      $(Build.ArtifactStagingDirectory)/**/*.zip
      $(Build.ArtifactStagingDirectory)/**/dab-manifest.json
      $(Build.ArtifactStagingDirectory)/**/dab.draft.schema.json
    isDraft: true
    isPreRelease: $(isReleaseCandidate)
    addChangeLog: true

# This task gets the current date and saves it to a variable so the docker task can use the build's
# date and time as a tag.
- task: PowerShell@2
  displayName: "Get date for Docker image Tag"
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Setting up the date and time as a build variable for the Docker tag"
      $date=$(Get-Date -format yyyyMMdd-HHmmss)
      Write-Host "##vso[task.setvariable variable=BuildDate]$date"

# Build a docker image and push it to the container registry.
- task: Docker@2
  displayName: "Build and push docker image to Azure Container Registry"
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'false'))
  inputs:
    containerRegistry: 'CosmosDB GraphQL/Hawaii'
    repository: 'dab/$(Build.SourceBranch)'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(BuildDate)-$(Build.SourceVersion)
      latest

# Build a docker image and push it to the container registry.
# Tag the image with the value of the releaseName variable and nuget release version.
- task: Docker@2
  displayName: "Build and push docker image to Azure Container Registry tagged with releaseName and nuget release version"
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    containerRegistry: 'CosmosDB GraphQL/Hawaii'
    repository: 'dab'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(BuildDate)-$(Build.SourceVersion)
      $(releaseName)
      $(dabVersion)

# Build a docker image and push it to ACR for publishing to MCR.
# This step will pick the image with name `public/azure-databases/data-api-builder` and push to MCR.
# This image will also be available in DockerHub.
# Tag the image with dab version and latest.
- task: Docker@2
  displayName: "Build and push docker image to ACR for publishing to MCR"
  condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
  inputs:
    containerRegistry: 'CosmosDB GraphQL/Hawaii'
    repository: 'public/azure-databases/data-api-builder'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(dabVersion)
      latest
