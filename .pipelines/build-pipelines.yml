# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://learn.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  batch: true
  branches:
    include:
    - main
    - gh-readonly-queue/main
    - release/*

pool:
  vmImage: 'ubuntu-latest' # examples of other options: 'macOS-10.15', 'windows-2019'

variables:
- template: templates/variables.yml

jobs:
- job:
  steps:
  - template:  templates/build-pipelines.yml

  - task: FileTransform@1.206.0
    displayName: 'Version stamp dab.draft.schema.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'schemas/dab.draft.schema.json'
  
  - task: CopyFiles@2
    displayName: 'Copy dab.draft.schema.json'
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/schemas'
      contents: 'dab.draft.schema.json'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Governance Detection'
    inputs:
      alertWarningLevel: Medium
      failOnAlert: true

  - task: notice@0
    # This will generate the NOTICE.txt for distribution
    displayName: Generate NOTICE file
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      outputfile: $(Build.SourcesDirectory)/NOTICE.txt
      outputformat: text

  - task: PowerShell@2
    displayName: "Add Additional Licenses to NOTICE file"
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/notice-generation.ps1
      # Artifact Staging Directory used to temporarily store downloaded ChilliCream license.
      arguments: $(Build.ArtifactStagingDirectory) $(Build.SourcesDirectory)

  - template: templates/code-signing.yml
    parameters:
      # This is the path that will be used for packing nuget package.
      # We will need to sign the binaries in this location.
      path: '$(Build.SourcesDirectory)/src/out/cli/net6.0/publish' 

  # Create nuget package after the binaries are signed. So that the binaries inside nuget package are signed.
  - task: DotNetCoreCLI@2
    displayName: 'Creating Nuget Package'
    inputs:
      command: custom
      custom: pack
      projects: '**/Cli.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build -p:Version=$(dabVersion) -o $(Build.ArtifactStagingDirectory)/nupkg'

  # Now sign the nuget package itself.
  - template: templates/code-signing.yml
    parameters:
      path: '$(Build.ArtifactStagingDirectory)/nupkg'
      signNuget: true

  - task: PowerShell@2
    displayName: "Package DAB to multiple platforms"
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/publish.ps1
      arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) -Package

  - task: PowerShell@2
    displayName: "Smoke Test for DAB CLI"
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/dab-smoke-test-script.ps1
      arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(Agent.OS)  $(dabVersion)

  # Sign the binaries that were generated per platform
  - template: templates/code-signing.yml
    parameters:
      path: '$(Build.ArtifactStagingDirectory)/publish'

  # Zip the binaries after signing process.
  - task: PowerShell@2
    displayName: "Zip the binaries after signing"
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/publish.ps1
      arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) -CreateZip

  # Generating SBOM manifest for Dab files
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'SBOM Generation Task'
    inputs:
        BuildDropPath: '$(Build.ArtifactStagingDirectory)'

  # Downloads the manifest file from the latest GitHub Release.
  - task: DownloadGitHubRelease@0
    inputs:
      connection: 'DataApiBuilder'
      userRepository: '$(Build.Repository.Name)'
      defaultVersionType: 'latest'
      itemPattern: 'dab-manifest.json'
      downloadPath: '$(Build.ArtifactStagingDirectory)'

  # Generating Manifest File for generated Zip package
  - task: PowerShell@2
    displayName: "Generate Manifest File"
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/scripts/create-manifest-file.ps1
      arguments: $(buildConfiguration) $(Build.ArtifactStagingDirectory) $(dabVersion) $(isReleaseBuild)

  # This code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
  - task: PublishPipelineArtifact@1
    displayName: "Upload build artifacts"
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)' 
      publishLocation: 'pipeline'

  - task: NuGetCommand@2
    displayName: 'Publish Nuget to Internal Feed'
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      command: 'push'
      feedsToUse: 'select'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: CosmosDB/DataApiBuilder
      versioningScheme: 'off'
      allowPackageConflicts: false

  - task: NuGetCommand@2
    displayName: 'Publish Nuget to Nuget.org'
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: external
      publishFeedCredentials: Microsoft.DataApiBuilder

  # Create a draft release with Assets
  - task: GitHubRelease@1
    displayName: "Draft Github Release"
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      gitHubConnection: 'DataApiBuilder'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: 'v$(dabVersion)'
      title: 'New Release: Data API Builder for Azure Databases'
      assets: |
        $(Build.ArtifactStagingDirectory)/**/*.nupkg
        $(Build.ArtifactStagingDirectory)/**/*.zip
        $(Build.ArtifactStagingDirectory)/**/dab-manifest.json
        $(Build.ArtifactStagingDirectory)/**/dab.draft.schema.json
      isDraft: true
      isPreRelease: $(isReleaseCandidate)
      addChangeLog: true

  # This task gets the current date and saves it to a variable so the docker task can use the build's
  # date and time as a tag.
  - task: PowerShell@2
    displayName: "Get date for Docker image Tag"
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Setting up the date and time as a build variable for the Docker tag"
        $date=$(Get-Date -format yyyyMMdd-HHmmss)
        Write-Host "##vso[task.setvariable variable=BuildDate]$date"

  # Build a docker image and push it to the container registry.
  - task: Docker@2
    displayName: "Build and push docker image to Azure Container Registry"
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'false'))
    inputs:
      containerRegistry: 'Data API builder Container Registry Connection'
      repository: 'dab/$(Build.SourceBranch)'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: |
        $(BuildDate)-$(Build.SourceVersion)
        latest

  # Build a docker image and push it to the container registry.
  # Tag the image with the value of the releaseName variable and nuget release version.
  - task: Docker@2
    displayName: "Build and push docker image to Azure Container Registry tagged with releaseName and nuget release version"
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      containerRegistry: 'Data API builder Container Registry Connection'
      repository: 'dab'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: |
        $(BuildDate)-$(Build.SourceVersion)
        $(releaseName)
        $(dabVersion)

  # Build a docker image and push it to ACR for publishing to MCR.
  # This step will pick the image with name `public/azure-databases/data-api-builder` and push to MCR.
  # This image will also be available in DockerHub.
  # Tag the image with dab version and latest.
  - task: Docker@2
    displayName: "Build and push docker image to ACR for publishing to MCR"
    condition: and(succeeded(), eq(variables.isReleaseBuild, 'true'))
    inputs:
      containerRegistry: 'Data API builder Container Registry Connection'
      repository: 'public/azure-databases/data-api-builder'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: |
        $(dabVersion)
        latest
