# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://learn.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
  batch: true
  branches:
    include:
    - main
    - gh-readonly-queue/main
    - release/*

jobs:
- job:  windows
  pool:
    vmImage: 'windows-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

  steps:
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x  
  
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: Nuget.config

  - task: PowerShell@2
    displayName: Install SQL LocalDB
    inputs:
      targetType: 'inline'
      script: |
        Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
        Start-CosmosDbEmulator

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '-p:generateConfigFileForDbType=cosmosdb_nosql --configuration $(buildConfiguration)' # Update this to match your need

  - task: FileTransform@1.206.0
    displayName: 'Generate dab-config.CosmosDb_NoSql.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'src/out/tests/net6.0/dab-config.CosmosDb_NoSql.json'

  - task: DotNetCoreCLI@2
    displayName: 'Run CosmosDb_NoSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=CosmosDb_NoSql" --no-build --configuration $(buildConfiguration) --collect "XPlat Code coverage"'
      projects: '**/*Tests/*.csproj'

  - task: CmdLine@2
    displayName: 'Set flag to publish Verify *.received files when tests fail'
    condition: failed()
    inputs:
      script: 'echo ##vso[task.setvariable variable=publishverify]Yes'

  - task: CopyFiles@2
    condition: eq(variables['publishverify'], 'Yes')
    displayName: 'Copy received files to Artifact Staging'
    inputs:
      contents: '**\*.received.*' 
      targetFolder: '$(Build.ArtifactStagingDirectory)\Verify'
      cleanTargetFolder: true
      overWrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish received files as Artifacts'
    name: 'verifypublish'
    condition: eq(variables['publishverify'], 'Yes')
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Verify'
      ArtifactName: 'Verify'
      publishLocation: 'Container'

  # '/XPlat Code coverage --results-directory /home/vsts/work/1/s/TestResults/'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'

- job:  linux
  pool:
    vmImage: 'ubuntu latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

  steps:

  - bash: |
      echo "*********************Step 1*********************************"
      sudo apt-get update
      echo "*********************Step 2*********************************"
      sudo apt-get install ca-certificates curl gnupg
      echo "*********************Step 3*********************************"
      sudo install -m 0755 -d /etc/apt/keyrings
      echo "*********************Step 4*********************************"
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      echo "*********************Step 5*********************************"
      sudo chmod a+r /etc/apt/keyrings/docker.gpg
      echo "*********************Step 6*********************************"
      echo \
        "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      echo "*********************Step 6*********************************"
      sudo apt-get update
      echo "*********************Step 7*********************************"
      sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  - bash: |
      sudo uname -a
      sudo lscpu
      sudo  free -h
      sudo docker pull mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
      sudo docker run --name test -d  --publish 8081:8081  --publish 10250-10255:10250-10255 -e AZURE_COSMOS_EMULATOR_PARTITION_COUNT=1 -e AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=false  mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Start CosmosDB Emulator

  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x  
  
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: Nuget.config

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '-p:generateConfigFileForDbType=cosmosdb_nosql --configuration $(buildConfiguration)' # Update this to match your need

  - task: FileTransform@1.206.0
    displayName: 'Generate dab-config.CosmosDb_NoSql.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'src/out/tests/net6.0/dab-config.CosmosDb_NoSql.json'

  - bash: |
      sudo docker logs --since=1h test
      sudo curl -k https://localhost:8081/_explorer/emulator.pem > ~/emulatorcert.crt
      sudo ls
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Configure Emulator Certificates

  - task: DotNetCoreCLI@2
    displayName: 'Run CosmosDb_NoSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=CosmosDb_NoSql" --no-build --configuration $(buildConfiguration) --collect "XPlat Code coverage"'
      projects: '**/*Tests/*.csproj'

  - task: CmdLine@2
    displayName: 'Set flag to publish Verify *.received files when tests fail'
    condition: failed()
    inputs:
      script: 'echo ##vso[task.setvariable variable=publishverify]Yes'

  - task: CopyFiles@2
    condition: eq(variables['publishverify'], 'Yes')
    displayName: 'Copy received files to Artifact Staging'
    inputs:
      contents: '**\*.received.*' 
      targetFolder: '$(Build.ArtifactStagingDirectory)\Verify'
      cleanTargetFolder: true
      overWrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish received files as Artifacts'
    name: 'verifypublish'
    condition: eq(variables['publishverify'], 'Yes')
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Verify'
      ArtifactName: 'Verify'
      publishLocation: 'Container'

  # '/XPlat Code coverage --results-directory /home/vsts/work/1/s/TestResults/'
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'


