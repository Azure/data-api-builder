# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# MsSql Integration Testing Pipeline config is split into two jobs:
# 1) LinuxTests -> Run SQL Server 2019 in Linux Docker Image
# 2) WindowsTests -> Run LocalDB preinstalled on machine

trigger:
  batch: true
  branches:
    include:
    - main
    - gh-readonly-queue/main
    - release/*
  paths:
    exclude:
    - docs

jobs:
- job: linux
  condition: false # Disable until we resolve flakey pipeline issue. https://github.com/Azure/data-api-builder/issues/2010
  pool:
    vmImage: 'ubuntu-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      dbPassword: ''
      data-source.connection-string: ''

  steps:
  - task: NuGetAuthenticate@1
    displayName: 'NuGet Authenticate'
  
  # The .NET CLI commands in proceeding tasks use the .NET SDK version specified ("selected") here.
  # Per Microsoft Learn Docs, "Selecting the .NET SDK version is independent from 
  # specifying the runtime version a project targets."
  - task: UseDotNet@2
    displayName: Setup .NET SDK v8.0.x
    inputs:
      packageType: sdk
      version: 8.0.x

  # Preserving .NET 6 for multi-targeting support
  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: Nuget.config

  - task: DockerInstaller@0
    displayName: Docker Installer
    inputs:
      dockerVersion: 17.09.0-ce
      releaseType: stable

  - task: Bash@3
    displayName: 'Generate password'
    inputs:
      targetType: 'inline'
      script: |
        password=$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | head -c24)
        echo "##vso[task.setvariable variable=dbPassword;]$password"
  
  - task: PowerShell@2
    displayName: 'Set Connection String'
    inputs:
      targetType: 'inline'
      script: |
        $connectionString="Server=tcp:127.0.0.1,1433;Persist Security Info=False;User ID=SA;Password=$(dbPassword);MultipleActiveResultSets=False;Connection Timeout=5;TrustServerCertificate=True;Encrypt=False;"
        Write-Host "##vso[task.setvariable variable=data-source.connection-string]$connectionString"

  - task: Bash@3
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Get and Start Ubuntu SQL Server Image Docker with SSL enabled
    inputs:
      targetType: 'inline'
      script: |
        echo "Executing script with arguments."
        chmod +x ./scripts/start-mssql-server.bash
        ./scripts/start-mssql-server.bash $(dbPassword)

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: |
        **/*.csproj
        !**/*Tests*.csproj
      arguments: '-p:generateConfigFileForDbType=mssql --configuration $(buildConfiguration)' # Update this to match your need

  - task: DotNetCoreCLI@2
    displayName: Build Test Projects
    inputs:
      command: build
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: FileTransform@1.206.0
    displayName: 'Generate dab-config.MsSql.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'src/out/tests/*/dab-config.MsSql.json'

  - task: DotNetCoreCLI@2
    displayName: 'Run MsSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=MsSql" --no-build --configuration $(buildConfiguration) --collect "XPlat Code coverage"'
      projects: '**/*Tests/*.csproj'

  - task: CmdLine@2
    displayName: 'Set flag to publish Verify *.received files when tests fail'
    condition: failed()
    inputs:
      script: 'echo ##vso[task.setvariable variable=publishverify]Yes'

  - task: CopyFiles@2
    condition: eq(variables['publishverify'], 'Yes')
    displayName: 'Copy received files to Artifact Staging'
    inputs:
      contents: '**\*.received.*' 
      targetFolder: '$(Build.ArtifactStagingDirectory)\Verify'
      cleanTargetFolder: true
      overWrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish received files as Artifacts'
    name: 'verifypublish'
    condition: eq(variables['publishverify'], 'Yes')
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Verify'
      ArtifactName: 'Verify'
      publishLocation: 'Container'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'


- job: windows
  pool:
    vmImage: 'windows-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      # Need to override the connection string set on the pipeline UI
      # since windows needs a different string.
      # The variable setting on the pipeline UI sets the connection string
      # for the linux job above.
      data-source.connection-string: Server=(localdb)\MSSQLLocalDB;Persist Security Info=False;Integrated Security=True;MultipleActiveResultSets=False;Connection Timeout=5;TrustServerCertificate=True;
      InstallerUrl: https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi
      SqlVersionCode: '15.0'

  steps:
  - task: CmdLine@2
    displayName: 'Set flag to publish received files when previous step fails'
    condition: failed()
    inputs:
      script: 'echo ##vso[task.setvariable variable=publishverify]Yes'

  - task: NuGetAuthenticate@1
    displayName: 'NuGet Authenticate'
  
  # The .NET CLI commands in proceeding tasks use the .NET SDK version specified ("selected") here.
  # Per Microsoft Learn Docs, "Selecting the .NET SDK version is independent from 
  # specifying the runtime version a project targets."
  - task: UseDotNet@2
    displayName: Setup .NET SDK v8.0.x
    inputs:
      packageType: sdk
      version: 8.0.x

  # Preserving .NET 6 for multi-targeting support
  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: Nuget.config

  - task: PowerShell@2
    displayName: Install SQL LocalDB
    inputs:
      targetType: 'inline'
      script: |
        SqlLocalDb.exe start
        SqlLocalDB.exe info "MSSQLLocalDB"
        Write-Host "Downloading"
        Import-Module BitsTransfer
        Start-BitsTransfer -Source $(InstallerUrl) -Destination SqlLocalDB.msi
        Write-Host "Installing"
        Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";
        SqlLocalDB.exe stop MSSQLLocalDB -k
        SqlLocalDB.exe delete MSSQLLocalDB

  - task: PowerShell@2
    displayName: 'Start MSSQLLocalDB'
    inputs:
      targetType: 'inline'
      script: |
        SqlLocalDb.exe start MSSQLLocalDB
        SqlLocalDb.exe info "MSSQLLocalDB"

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: |
        **/*.csproj
        !**/*Tests*.csproj
      arguments: '-p:generateConfigFileForDbType=MsSql --configuration $(buildConfiguration)' # Update this to match your need
  
  - task: DotNetCoreCLI@2
    displayName: Build Test Projects
    inputs:
      command: build
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: FileTransform@1.206.0
    displayName: 'Generate dab-config.MsSql.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'src/out/tests/*/dab-config.MsSql.json'

  - task: DotNetCoreCLI@2
    displayName: 'Run MsSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=MsSql" --no-build --configuration $(buildConfiguration) --collect "XPlat Code coverage"'
      projects: '**/*Tests/*.csproj'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'

  - task: CopyFiles@2
    condition: eq(variables['publishverify'], 'Yes')
    displayName: 'Copy received files to Artifact Staging'
    inputs:
      contents: '**\*.received.*' 
      targetFolder: '$(Build.ArtifactStagingDirectory)\Verify'
      cleanTargetFolder: true
      overWrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish received files as Artifacts'
    name: 'verifypublish'
    condition: eq(variables['publishverify'], 'Yes')
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\Verify'
      ArtifactName: 'Verify'
      publishLocation: 'Container'
