
trigger:
- main

jobs:
- job: linux
  pool:
    vmImage: 'ubuntu-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'

  steps:
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x

  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'
      feedsToUse: config
      nugetConfigPath: Nuget.config

  - task: DockerInstaller@0
    displayName: Docker Installer
    inputs:
      dockerVersion: 17.09.0-ce
      releaseType: stable

  - bash: |
      docker run --name postgres-container -p 5432:5432 \
      -e POSTGRES_PASSWORD=$(PostgresPassword) \
      -e POSTGRES_DB=$(TestDatabaseName) \
      -d postgres
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Get and Start Ubuntu Postgres Image Docker

  - script: |
      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
      echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
      sudo apt-get update
      sudo apt-get install k6
    displayName: Install k6 tool

  - script: |
      k6 version
    displayName: Check if k6 is installed

  - task: FileTransform@1.206.0
    displayName: 'Generate dab-config.PostgreSql.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'src/Service/dab-config.PostgreSql.json'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)' # Update this to match your need

  - task: DotNetCoreCLI@2
    displayName: 'Run Postgres Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=PostgreSql" --configuration $(buildConfiguration) --collect "XPlat Code coverage"'
      projects: '**/*Tests/*.csproj'

  - script: |
      k6 run .\src\Service.Tests\ConcurrentTests\ParallelRestAndGraphQLQueries.js
    displayName: Run k6 test

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Agent.TempDirectory)/**/*cobertura.xml'
