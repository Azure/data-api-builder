# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# static analysis

parameters:
  BuildConfiguration: ''
  VmImage: ''

jobs:
- job:
  displayName: Static Analysis
  pool:
    vmImage: '${{ parameters.VmImage }}'

  steps:
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'

  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  - task: UseDotNet@2
    displayName: Setup .NET SDK v6.0.x
    inputs:
      packageType: sdk
      version: 6.0.x

  # Analyze source and build output text files for credentials
  - task: CredScan@3
    displayName: 'CredScan'
    inputs:
      toolMajorVersion: V2
      scanFolder: $(Build.SourcesDirectory)
      suppressionsFile: templates/CredScanSuppressions.json
      debugMode: false
      verboseOutput: false

  # Scan text elements including code, code comments, and content/web pages, for sensitive terms based on legal, cultural, or geopolitical reasons
  - task: PoliCheck@2
    displayName: 'PoliCheck'
    inputs:
      targetType: F

  # AntiMalware scan
  - task: AntiMalware@4
    displayName: 'AntiMalware'
    inputs:
      EnableServices: true
      SignatureFreshness: OneDay
      # Signature refreshes on Hosted Agents can sometimes have a delay of a day or two.
      TreatStaleSignatureAs: Warning

  - task: DotNetCoreCLI@2
    displayName: Build Azure.DataApiBuilder.sln
    inputs:
      command: build
      projects: 'src/Azure.DataApiBuilder.sln'
      configuration: '${{ parameters.BuildConfiguration }}'
      publishTestResults: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
    displayName: 'BinSkim'
    inputs:
      InputType: Basic
      AnalyzeTargetGlob: $(Build.SourcesDirectory)\**.dll;$(Build.SourcesDirectory)\**.exe;-:f|$(Build.SourcesDirectory)\**\Microsoft.Azure.Cosmos.ServiceInterop.dll
      AnalyzeIgnorePdbLoadError: true

  - task: Semmle@1
    displayName: 'Run CodeQL (Semmle) (csharp)'
    inputs:
      sourceCodeDirectory: '$(Build.SourcesDirectory)'

  # Publish Analysis Results (position after all tools ran)
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
    displayName: 'Publish Security Analysis Logs'

  # The Post-Analysis build task will analyze the log files produced by the tools, and introduce a build break
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
    displayName: 'Post Analysis'
    inputs:
      AllTools: true
