using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.DataGateway.Service.Configurations;
using Azure.DataGateway.Service.Models;
using Azure.DataGateway.Service.Services;
using Microsoft.Extensions.Options;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Azure.DataGateway.Service.Tests.SqlTests
{
    [TestClass, TestCategory(TestCategory.MSSQL)]
    public class MsSqlMetadataProviderTests : MetadataProviderTests
    {
        private MsSqlMetadataProvider _msSqlMetadataProvider;
        private static IOptions<DataGatewayConfig> _dataGatewayConfig
            = SqlTestHelper.LoadConfig($"MsSqlIntegrationTest");

        public MsSqlMetadataProviderTests()
            : base(_dataGatewayConfig)
        {
            _msSqlMetadataProvider = new(_dataGatewayConfig.Value.DatabaseConnection.ConnectionString);
        }

        [TestMethod]
        public async Task TestDerivedDatabaseSchemaIsValid()
        {
            ResolverConfig runtimeConfig = FileProvider.GetResolvedConfig();
            DatabaseSchema expectedSchema = runtimeConfig.DatabaseSchema;
            DatabaseSchema derivedDatabaseSchema = await _msSqlMetadataProvider.GetDatabaseSchema();

             foreach ((string tableName, TableDefinition expectedTableDefinition) in expectedSchema.Tables)
            {

                TableDefinition actualTableDefinition;
                Assert.IsTrue(derivedDatabaseSchema.Tables.TryGetValue(tableName, out actualTableDefinition));

                foreach (string primaryKey in expectedTableDefinition.PrimaryKey)
                {
                    Assert.IsTrue(actualTableDefinition.PrimaryKey.Contains(primaryKey));
                }

                foreach (KeyValuePair<string, ColumnDefinition> column in expectedTableDefinition.Columns)
                {
                    string columnName = column.Key;
                    ColumnDefinition expectedColumnDefinition = column.Value;

                    ColumnDefinition actualColumnDefinition;
                    Assert.IsTrue(actualTableDefinition.Columns.TryGetValue(columnName, out actualColumnDefinition));

                    Assert.AreEqual(expectedColumnDefinition.IsAutoGenerated, actualColumnDefinition.IsAutoGenerated);
                    Assert.AreEqual(expectedColumnDefinition.HasDefault, actualColumnDefinition.HasDefault, $"{columnName} {tableName}");
                    Assert.AreEqual(expectedColumnDefinition.IsNullable, actualColumnDefinition.IsNullable);
                }
            }
        }
    }
}
