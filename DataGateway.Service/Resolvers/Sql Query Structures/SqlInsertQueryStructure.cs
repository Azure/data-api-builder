using System.Collections.Generic;
using System.Linq;
using Azure.DataGateway.Service.Models;
using Azure.DataGateway.Services;

namespace Azure.DataGateway.Service.Resolvers
{
    /// <summary>
    /// Wraps all the required data and logic to write a SQL INSERT query
    /// </summary>
    public class SqlInsertStructure : BaseSqlQueryStructure
    {
        /// <summary>
        /// Column names to insert into the given columns
        /// </summary>
        public List<string> InsertColumns { get; }

        /// <summary>
        /// Values to insert into the given columns
        /// </summary>
        public List<string> Values { get; }

        /// <summary>
        /// The inserted columns that the insert will return
        /// </summary>
        public List<string> ReturnColumns { get; }

        public SqlInsertStructure(string tableName, IMetadataStoreProvider metadataStore, IDictionary<string, object> mutationParams)
        : base(metadataStore)
        {
            TableName = tableName;
            InsertColumns = new();
            Values = new();

            TableDefinition tableDefinition = GetTableDefinition();
            ReturnColumns = tableDefinition.PrimaryKey;

            foreach (KeyValuePair<string, object> param in mutationParams)
            {
                if (param.Value == null)
                {
                    continue;
                }

                PopulateColumnsAndParams(param.Key, param.Value);
            }

            // If none of the column values were specified as one of the params,
            // we need to explicitly add. This scenario is possible for REST request.
            if (InsertColumns.Count == 0)
            {
                List<string> allColumns = new(tableDefinition.Columns.Keys);

                // The assumption here is primary key columns need not be specified
                // since their value will be autogenerated.
                // More columns can be excluded if the metadata provides us information
                // that they have default values.
                IEnumerable<string> columnsToBeAdded = allColumns.Except(tableDefinition.PrimaryKey);
                foreach (string column in columnsToBeAdded)
                {
                    // Using null as the default value.
                    PopulateColumnsAndParams(column, value: null);
                }
            }

            // return primary key so the inserted row can be identified
            ReturnColumns = tableDefinition.PrimaryKey;
        }

        /// <summary>
        /// Populates the column name in Columns, creates parameter
        /// and adds its value to Values.
        /// </summary>
        /// <param name="columnName">The name of the column.</param>
        /// <param name="value">The value of the column.</param>
        private void PopulateColumnsAndParams(string columnName, object value)
        {
            InsertColumns.Add(columnName);
            string paramName;
            if (value != null)
            {
                paramName = MakeParamWithValue(
                    GetParamAsColumnSystemType(value.ToString(), columnName));
            }
            else
            {
                paramName = MakeParamWithValue(value: null);
            }

            Values.Add($"@{paramName}");

        }
    }
}
