using System.Data;
using System.Collections.Generic;
using Azure.DataGateway.Service.Models;
using Microsoft.Data.SqlClient;
using System.Threading.Tasks;
using System.Linq;

namespace Azure.DataGateway.Service.Services
{
    /// <summary>
    /// Reads schema information from the database to make it available for the GraphQL service.
    /// </summary>
    public class MsSqlMetadataProvider
    {
        private const int NUMBER_OF_RESTRICTIONS = 4;
        private readonly string _connectionString;

        public MsSqlMetadataProvider(string connectionString)
        {
            _connectionString = connectionString;
        }

        public async Task<Dictionary<string, TableDefinition>> ReadTableDefinitionFromSchema()
        {
            Dictionary<string, TableDefinition> tables = new();
            SqlConnection conn = new();
            conn.ConnectionString = _connectionString;
            await conn.OpenAsync();

            DataSet databaseSchema = new();
            PopulateDataSetWithTableSchema(databaseSchema, tables, conn);

            PopulateTableDefinitionWithColumns(databaseSchema, tables, conn);

            return tables;
        }

        public void PopulateTableDefinitionWithColumns(
            DataSet databaseSchema,
            Dictionary<string, TableDefinition> tables,
            SqlConnection conn)
        {
            foreach (KeyValuePair<string, TableDefinition> table in tables)
            {
                string tableName = table.Key;
                TableDefinition tableDefinition = table.Value;
                DataTable dataTable = databaseSchema.Tables[tableName]!;
                List<DataColumn> primaryKeys = new(dataTable.PrimaryKey);
                tableDefinition.PrimaryKey = new(primaryKeys.Select(primaryKey => primaryKey.ColumnName));

                using (DataTableReader reader = new(dataTable))
                {
                    DataTable schemaTable = reader.GetSchemaTable();
                    foreach (DataRow columnInfoFromAdapter in schemaTable.Rows)
                    {
                        string columnName = columnInfoFromAdapter["ColumnName"].ToString()!;
                        ColumnDefinition column = new();
                        column.IsNullable = (bool)columnInfoFromAdapter["AllowDBNull"];
                        // column.Type = (Type)columnInfoFromAdapter["DataType"];
                        column.IsAutoGenerated = (bool)columnInfoFromAdapter["IsAutoIncrement"];
                        tableDefinition.Columns.Add(columnName, column);
                    }
                }

                // We can specify the Catalog, Schema, Table Name, Column Name to get
                // the specified column(s).
                // Hence, we should create a 4 members array.
                string[] columnRestrictions = new string[NUMBER_OF_RESTRICTIONS];
                columnRestrictions[2] = tableName;

                // Each row in the columnsInTable table corresponds to a single column of the table.
                DataTable columnsInTable = conn.GetSchema("Columns", columnRestrictions);

                foreach (DataRow columnInfo in columnsInTable.Rows)
                {
                    string columnName = columnInfo["COLUMN_NAME"].ToString()!;
                    bool hasDefault = columnInfo["COLUMN_DEFAULT"] != null ? true : false;
                    ColumnDefinition columnDefinition = tableDefinition.Columns[columnName];
                    columnDefinition.HasDefault = hasDefault;
                }
            }

        }

        public void PopulateDataSetWithTableSchema(
            DataSet databaseSchema,
            Dictionary<string, TableDefinition> tables,
            SqlConnection conn)
        {
            // We can specify the Catalog, Schema, Table Name, Table Type to get
            // the specified table(s).
            // We can use four restrictions for Table, so we create a 4 members array.
            string[] tableRestrictions = new string[NUMBER_OF_RESTRICTIONS];

            // For the array, 0-member represents Catalog; 1-member represents Schema;
            // 2-member represents Table Name; 3-member represents Table Type.
            // We need to get all the base tables.
            const string TABLE_TYPE = "BASE TABLE";
            tableRestrictions[3] = TABLE_TYPE;

            DataTable allBaseTables = conn.GetSchema("Tables", tableRestrictions);

            foreach (DataRow table in allBaseTables.Rows)
            {
                string tableName = table["TABLE_NAME"].ToString()!;

                tables.Add(tableName, new TableDefinition());
                SqlDataAdapter adapterForTable = new(
                    selectCommandText: $"SELECT * FROM {tableName}", conn);
                adapterForTable.FillSchema(databaseSchema, SchemaType.Source, tableName);
            }

        }

        public async Task<DatabaseSchema> GetDatabaseSchema()
        {
            DatabaseSchema schema = new();
            schema.Tables = await ReadTableDefinitionFromSchema();

            return schema;
        }
    }
}
