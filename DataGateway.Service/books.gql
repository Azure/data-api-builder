type Query {
    getBooks(first: Int = 100, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): [Book!]!
    getBook(id: Int!): Book
    getReview(id: Int!, book_id: Int!): Review
    getReviews(_filter: ReviewFilterInput, _filterOData: String, orderBy: ReviewOrderByInput): [Review!]!
    getMagazine(id: Int!): Magazine
    getMagazines(first: Int = 100, _filter: MagazineFilterInput, _filterOData: String): [Magazine!]!
    getWebsiteUsers(first: Int = 100, _filter: WebsiteUserFilterInput, _filterOData: String): [WebsiteUser!]!
    books(first: Int, after: String, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): BookConnection!
    reviews(first: Int, after: String, _filter: ReviewFilterInput, _filterOData: String, orderBy: ReviewOrderByInput): ReviewConnection!
    stocks(first: Int, after: String, _filter: StockFilterInput, _filterOData: String, orderBy: StockOrderByInput): StockConnection!
}

type Mutation {
    editBook(id: Int!, title: String, publisher_id: Int): Book
    updateMagazine(id: Int!, title: String, issue_number: Int): Magazine
    insertBook(title: String!, publisher_id: Int!): Book
    insertReview(book_id: Int!, content: String! = "Its a classic"): Review
    insertMagazine(id: Int!, title: String!, issue_number: Int): Magazine
    insertWebsiteUser(id: Int!, username: String): WebsiteUser
    insertWebsitePlacement(book_id: Int!, price: Int!): BookWebsitePlacement
    addAuthorToBook(author_id: Int!, book_id: Int!): Boolean
    deleteBook(id: Int!): Book
    deleteReview(id: Int!, book_id: Int!): Review
}

type Publisher {
    id: Int!
    name: String!
    books(first: Int = 100, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): [Book!]!
    paginatedBooks(first: Int, after: String, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): BookConnection!
}

type Book {
    id: Int!
    title: String!
    publisher_id: Int!
    publisher: Publisher!
    website_placement: BookWebsitePlacement
    reviews(first: Int = 100, _filter: ReviewFilterInput, _filterOData: String): [Review!]!
    paginatedReviews(first: Int, after: String, _filter: ReviewFilterInput, _filterOData: String): ReviewConnection!
    authors(first: Int = 100, _filter: AuthorFilterInput, _filterOData: String): [Author!]!
    paginatedAuthors(first: Int, after: String, _filter: AuthorFilterInput, _filterOData: String): AuthorConnection!
}

type BookWebsitePlacement {
    id: Int!,
    book_id: Int!,
    price: Int!,
    book: Book!
}

type WebsiteUser {
    id: Int!,
    username: String
}

type Author {
    id: Int!
    name: String!
    birthdate: String!
    books(first: Int = 100, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): [Book!]!
    paginatedBooks(first: Int, after: String, _filter: BookFilterInput, _filterOData: String, orderBy: BookOrderByInput): BookConnection!
}

type Review {
    id: Int!
    content: String!
    book: Book!
}

type Stock {
    categoryid: Int!
    pieceid: Int!
    categoryName: String!
    piecesAvailable: Int
    piecesRequired: Int!
}

type Magazine {
    id: Int!
    title: String!
    issue_number: Int
}

type BookConnection {
    items: [Book!]!
    endCursor: String
    hasNextPage: Boolean!
}

type ReviewConnection {
    items: [Review!]!
    endCursor: String
    hasNextPage: Boolean!
}

type AuthorConnection {
    items: [Author!]!
    endCursor: String
    hasNextPage: Boolean!
}

type StockConnection {
    items: [Stock!]!
    endCursor: String
    hasNextPage: Boolean!
}

input StringFilterInput {
  eq: String
  neq: String
  contains: String
  notContains: String
  startsWith: String
  endsWith: String
  isNull: Boolean
}

input IntFilterInput {
  eq: Int
  neq: Int
  lt: Int
  gt: Int
  lte: Int
  gte: Int
  isNull: Boolean
}

input BookFilterInput {
  and: [BookFilterInput!]
  or: [BookFilterInput!]
  id: IntFilterInput
  title: StringFilterInput
  publisher_id: IntFilterInput
}

input PublisherFilterInput {
    and: [PublisherFilterInput!]
    or: [PublisherFilterInput!]
    id: IntFilterInput,
    name: StringFilterInput
}

input AuthorFilterInput {
    and: [AuthorFilterInput!]
    or: [AuthorFilterInput!]
    id: IntFilterInput,
    name: StringFilterInput
    birthdate: StringFilterInput
}

input ReviewFilterInput {
    and: [ReviewFilterInput!]
    or: [ReviewFilterInput!]
    id: IntFilterInput,
    content: StringFilterInput
}

input MagazineFilterInput {
    and: [MagazineFilterInput!]
    or: [MagazineFilterInput!]
    id: IntFilterInput
    title: StringFilterInput
    issue_number: IntFilterInput
}

input WebsiteUserFilterInput {
    and: [WebsiteUserFilterInput!]
    or: [WebsiteUserFilterInput!]
    id: IntFilterInput
    username: StringFilterInput
}

input StockFilterInput {
    and: [StockFilterInput!]
    or: [StockFilterInput!]
    categoryid: IntFilterInput
    pieceid: IntFilterInput
    categoryName: IntFilterInput
    piecesAvailable: IntFilterInput
    piecesRequired: IntFilterInput
}

enum SortOrder {
    Asc, Desc
}

input BookOrderByInput {
    id: SortOrder
    title: SortOrder
    publisher_id: SortOrder
}

input PublisherOrderByInput {
    id: SortOrder
    name: SortOrder
}

input ReviewOrderByInput {
    id: SortOrder
    content: SortOrder
}

input AuthorOrderByInput {
    id: SortOrder
    name: SortOrder
    birthdate: SortOrder
}

input StockOrderByInput {
    categoryid: SortOrder
    pieceid: SortOrder
    categoryName: SortOrder
    piecesAvailable: SortOrder
    piecesRequired: SortOrder
}
