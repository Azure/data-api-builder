type Query {
    getBooks(first: Int = 100, _filter: BookFilterInput, _filterOData: String): [Book!]!
    getBook(id: Int!): Book
    getReview(id: Int!, book_id: Int!): Review
    getReviews(_filter: ReviewFilterInput, _filterOData: String): [Review!]!
    books(first: Int, after: String, _filter: BookFilterInput, _filterOData: String): BookConnection!
    reviews(first: Int, after: String, _filter: ReviewFilterInput, _filterOData: String): ReviewConnection!
}

type Mutation {
    editBook(id: Int!, title: String, publisher_id: Int): Book
    insertBook(title: String!, publisher_id: Int!): Book
    insertWebsitePlacement(book_id: Int!, price: Int!): BookWebsitePlacement
    addAuthorToBook(author_id: Int!, book_id: Int!): Boolean
    deleteBook(id: Int!): Book
}

type Publisher {
    id: Int!
    name: String!
    books(first: Int = 100, _filter: BookFilterInput, _filterOData: String): [Book!]!
    paginatedBooks(first: Int, after: String, _filter: BookFilterInput, _filterOData: String): BookConnection!
}

type Book {
    id: Int!
    title: String!
    publisher_id: Int!
    publisher: Publisher!
    website_placement: BookWebsitePlacement
    reviews(first: Int = 100, _filter: ReviewFilterInput, _filterOData: String): [Review!]!
    paginatedReviews(first: Int, after: String, _filter: ReviewFilterInput, _filterOData: String): ReviewConnection!
    authors(first: Int = 100, _filter: AuthorFilterInput, _filterOData: String): [Author!]!
    paginatedAuthors(first: Int, after: String, _filter: AuthorFilterInput, _filterOData: String): AuthorConnection!
}

type BookWebsitePlacement {
    id: Int!,
    book_id: Int!,
    price: Int!,
    book: Book!
}

type Author {
    id: Int!
    name: String!
    birthdate: String!
    books(first: Int = 100, _filter: BookFilterInput, _filterOData: String): [Book!]!
    paginatedBooks(first: Int, after: String, _filter: BookFilterInput, _filterOData: String): BookConnection!
}

type Review {
    id: Int!
    content: String!
    book: Book!
}

type BookConnection {
    items: [Book!]!
    endCursor: String
    hasNextPage: Boolean!
}

type ReviewConnection {
    items: [Review!]!
    endCursor: String
    hasNextPage: Boolean!
}

type AuthorConnection {
    items: [Author!]!
    endCursor: String
    hasNextPage: Boolean!
}

input StringFilterInput {
  eq: String
  neq: String
  contains: String
  notContains: String
  startsWith: String
  endsWith: String
}

input IntFilterInput {
  eq: Int
  neq: Int
  lt: Int
  gt: Int
  lte: Int
  gte: Int
}

input BookFilterInput {
  and: [BookFilterInput]
  or: [BookFilterInput]
  id: IntFilterInput
  title: StringFilterInput
  publisher_id: IntFilterInput
}

input PublisherFilterInput {
    and: [PublisherFilterInput]
    or: [PublisherFilterInput]
    id: IntFilterInput,
    name: StringFilterInput
}

input AuthorFilterInput {
    and: [AuthorFilterInput]
    or: [AuthorFilterInput]
    id: IntFilterInput,
    name: StringFilterInput
    birthdate: StringFilterInput
}

input ReviewFilterInput {
    and: [ReviewFilterInput]
    or: [ReviewFilterInput]
    id: IntFilterInput,
    content: StringFilterInput
}
