type Query {
    characterList: [Character]
    characterById (id : ID!): Character
    planetById (id: ID! = 1): Planet
    getPlanet(id: ID, name: String): Planet
    planetList: [Planet]
    getPlanetWithFilter(_filter: PlanetFilterInput): Planet
    planets(first: Int, after: String): PlanetConnection
    getPlanetListById(id: ID): [Planet]
    getPlanetByName(name: String): Planet
}

type Mutation {
    addPlanet(id: String, name: String): Planet
    deletePlanet(id: String): Planet
}

type PlanetConnection {
    items: [Planet]
    endCursor: String
    hasNextPage: Boolean
}

type Character {
    id : ID,
    name : String,
    type: String,
    homePlanet: Int,
    primaryFunction: String
}

type Planet {
    id : ID,
    name : String
    character: Character
    age : Int
}

input IntFilterInput {
  eq: Int
  neq: Int
  lt: Int
  gt: Int
  lte: Int
  gte: Int
  isNull: Boolean
}

input StringFilterInput {
  eq: String
  neq: String
  contains: String
  notContains: String
  startsWith: String
  endsWith: String
}

input PlanetFilterInput {
  and: [PlanetFilterInput]
  or: [PlanetFilterInput]
  id: StringFilterInput
  name: StringFilterInput
  age: IntFilterInput
}



