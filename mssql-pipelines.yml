# MsSql Integration Testing Pipeline config is split into two jobs:
# 1) LinuxTests -> Run SQL Server 2019 in Linux Docker Image
# 2) WindowsTests -> Run LocalDB preinstalled on 

trigger:
- main

jobs:
- job: linux
  pool:
    vmImage: 'ubuntu-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      DataGatewayConfig.DatabaseConnection.ConnectionString: $(ConnectionStringSQLExpressVariable)

  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: DockerInstaller@0
    displayName: Docker Installer
    inputs:
      dockerVersion: 17.09.0-ce
      releaseType: stable

  - bash: |
      docker run -d -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=$(DockerSQLpass)" -p 1433:1433 --name customerdb mcr.microsoft.com/mssql/server:2019-latest
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Get and Start Ubuntu SQL Server Image Docker

  - task: FileTransform@1
    displayName: 'Generate appsettings.Test.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'DataGateway.Service/appsettings.Test.json'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)' # Update this to match your need

  - task: DotNetCoreCLI@2
    displayName: 'Run MsSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=MsSql" --configuration $(buildConfiguration)'
      projects: '**/*Tests/*.csproj'

- job: windows
  pool:
    vmImage: 'windows-latest'
  variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      DataGatewayConfig.DatabaseConnection.ConnectionString: $(ConnectionStringLocalDBVariable)
      InstallerUrl: https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi
      SqlVersionCode: '15.0'

  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    displayName: Restore NuGet packages
    inputs:
      restoreSolution: '$(solution)'

  - task: PowerShell@2
    displayName: Install SQL LocalDB
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Downloading"
        Import-Module BitsTransfer
        Start-BitsTransfer -Source $(InstallerUrl) -Destination SqlLocalDB.msi
        Write-Host "Installing"
        Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";
        SqlLocalDB.exe stop MSSQLLocalDB -k
        SqlLocalDB.exe delete MSSQLLocalDB
        SqlLocalDB.exe create MSSQLLocalDB $(SqlVersionCode) -s

  - task: PowerShell@2
    displayName: 'start mssqllocaldb'
    inputs:
      targetType: 'inline'
      script: |
        sqllocaldb start mssqllocaldb\n\nsqllocaldb

  - task: FileTransform@1
    displayName: 'Generate appsettings.Test.json'
    inputs:
      folderPath: '$(System.DefaultWorkingDirectory)'
      fileType: 'json'
      targetFiles: 'DataGateway.Service/appsettings.Test.json'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)' # Update this to match your need

  - task: DotNetCoreCLI@2
    displayName: 'Run MsSql Integration Tests'
    inputs:
      command: test
      arguments: '--filter "TestCategory=MsSql" --configuration $(buildConfiguration)'
      projects: '**/*Tests/*.csproj'
