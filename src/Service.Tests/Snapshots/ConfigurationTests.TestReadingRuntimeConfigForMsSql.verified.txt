{
  DataSource: {
    DatabaseType: MSSQL,
    Health: {
      ThresholdMs: 10,
      Enabled: true
    }
  },
  Runtime: {
    Rest: {
      Enabled: true,
      Path: /api,
      RequestBodyStrict: true
    },
    GraphQL: {
      Enabled: true,
      Path: /graphql,
      AllowIntrospection: true,
      MultipleMutationOptions: {
        MultipleCreateOptions: {
          Enabled: true
        }
      }
    },
    Host: {
      Cors: {
        Origins: [
          http://localhost:5000
        ],
        AllowCredentials: false
      },
      Authentication: {
        Provider: StaticWebApps
      }
    },
    Health: {
      Enabled: true
    }
  },
  Entities: [
    {
      Publisher: {
        Source: {
          Object: publishers,
          Type: Table
        },
        GraphQL: {
          Singular: Publisher,
          Plural: Publishers,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_02,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_03,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_04,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_06,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: database_policy_tester,
            Actions: [
              {
                Action: Create,
                Policy: {
                  Database: @item.name ne 'New publisher'
                }
              },
              {
                Action: Update,
                Policy: {
                  Database: @item.id ne 1234
                }
              },
              {
                Action: Read,
                Policy: {
                  Database: @item.id ne 1234 or @item.id gt 1940
                }
              }
            ]
          },
          {
            Role: role_multiple_create_policy_tester,
            Actions: [
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              },
              {
                Action: Create,
                Policy: {
                  Database: @item.name ne 'Test'
                }
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: Book
          }
        },
        Health: {
          First: 1,
          ThresholdMs: 500,
          Enabled: true
        }
      }
    },
    {
      Publisher_MM: {
        Source: {
          Object: publishers_mm,
          Type: Table
        },
        GraphQL: {
          Singular: Publisher_MM,
          Plural: Publishers_MM,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          books_mm: {
            Cardinality: Many,
            TargetEntity: Book_MM,
            SourceFields: [
              id
            ],
            TargetFields: [
              publisher_id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Stock: {
        Source: {
          Object: stocks,
          Type: Table
        },
        GraphQL: {
          Singular: Stock,
          Plural: Stocks,
          Enabled: true
        },
        Rest: {
          Path: /commodities,
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields_on_create,
            Actions: [
              {
                Action: Create,
                Fields: {
                  Exclude: [
                    piecesAvailable
                  ]
                }
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilterFieldIsNull_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterFieldIsNull_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: database_policy_tester,
            Actions: [
              {
                Action: Read
              },
              {
                Action: Create,
                Policy: {
                  Database: @item.pieceid ne 6 and @item.piecesAvailable gt 0
                }
              },
              {
                Action: Update,
                Policy: {
                  Database: @item.pieceid ne 1
                }
              }
            ]
          },
          {
            Role: test_role_with_noread,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    categoryName
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_policy_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    categoryName
                  ]
                },
                Policy: {
                  Database: @item.piecesAvailable ne 0
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          stocks_price: {
            TargetEntity: stocks_price
          }
        },
        Health: {
          First: 2,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Book: {
        Source: {
          Object: books,
          Type: Table
        },
        GraphQL: {
          Singular: book,
          Plural: books,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title eq 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_02,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_03,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title eq 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_04,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_05,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_06,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 10
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              }
            ]
          },
          {
            Role: policy_tester_07,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: policy_tester_08,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 9
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 9
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: test_role_with_noread,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    publisher_id
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_policy_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    publisher_id
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Test'
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: role_multiple_create_policy_tester,
            Actions: [
              {
                Action: Update
              },
              {
                Action: Delete
              },
              {
                Action: Create,
                Policy: {
                  Database: @item.title ne 'Test'
                }
              },
              {
                Action: Read,
                Policy: {
                  Database: @item.publisher_id ne 1234
                }
              }
            ]
          }
        ],
        Mappings: {
          id: id,
          title: title
        },
        Relationships: {
          authors: {
            Cardinality: Many,
            TargetEntity: Author,
            SourceFields: [
              id
            ],
            TargetFields: [
              id
            ],
            LinkingObject: book_author_link,
            LinkingSourceFields: [
              book_id
            ],
            LinkingTargetFields: [
              author_id
            ]
          },
          publishers: {
            TargetEntity: Publisher
          },
          reviews: {
            Cardinality: Many,
            TargetEntity: Review
          },
          websiteplacement: {
            TargetEntity: BookWebsitePlacement
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Default_Books: {
        Source: {
          Object: default_books,
          Type: Table
        },
        GraphQL: {
          Singular: default_book,
          Plural: default_books,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Book_MM: {
        Source: {
          Object: books_mm,
          Type: Table
        },
        GraphQL: {
          Singular: book_mm,
          Plural: books_mm,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          authors: {
            Cardinality: Many,
            TargetEntity: Author_MM,
            SourceFields: [
              id
            ],
            TargetFields: [
              id
            ],
            LinkingObject: book_author_link_mm,
            LinkingSourceFields: [
              book_id
            ],
            LinkingTargetFields: [
              author_id
            ]
          },
          publishers: {
            TargetEntity: Publisher_MM,
            SourceFields: [
              publisher_id
            ],
            TargetFields: [
              id
            ]
          },
          reviews: {
            Cardinality: Many,
            TargetEntity: Review_MM,
            SourceFields: [
              id
            ],
            TargetFields: [
              book_id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BookWebsitePlacement: {
        Source: {
          Object: book_website_placements,
          Type: Table
        },
        GraphQL: {
          Singular: BookWebsitePlacement,
          Plural: BookWebsitePlacements,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @claims.userId eq @item.id
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Relationships: {
          books: {
            TargetEntity: Book
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Author: {
        Source: {
          Object: authors,
          Type: Table
        },
        GraphQL: {
          Singular: Author,
          Plural: Authors,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: Book,
            LinkingObject: book_author_link
          }
        },
        Health: {
          First: 3,
          ThresholdMs: 250,
          Enabled: true
        }
      }
    },
    {
      Author_MM: {
        Source: {
          Object: authors_mm,
          Type: Table
        },
        GraphQL: {
          Singular: author_mm,
          Plural: authors_mm,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: Book_MM,
            SourceFields: [
              id
            ],
            TargetFields: [
              id
            ],
            LinkingObject: book_author_link_mm,
            LinkingSourceFields: [
              author_id
            ],
            LinkingTargetFields: [
              book_id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Revenue: {
        Source: {
          Object: revenues,
          Type: Table
        },
        GraphQL: {
          Singular: Revenue,
          Plural: Revenues,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: database_policy_tester,
            Actions: [
              {
                Action: Create,
                Policy: {
                  Database: @item.revenue gt 1000
                }
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Review: {
        Source: {
          Object: reviews,
          Type: Table
        },
        GraphQL: {
          Singular: review,
          Plural: reviews,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: role_multiple_create_policy_tester,
            Actions: [
              {
                Action: Update
              },
              {
                Action: Delete
              },
              {
                Action: Create,
                Policy: {
                  Database: @item.content ne 'Great'
                }
              },
              {
                Action: Read,
                Policy: {
                  Database: @item.websiteuser_id ne 1
                }
              }
            ]
          }
        ],
        Relationships: {
          books: {
            TargetEntity: Book
          },
          website_users: {
            TargetEntity: WebsiteUser,
            SourceFields: [
              websiteuser_id
            ],
            TargetFields: [
              id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Review_MM: {
        Source: {
          Object: reviews_mm,
          Type: Table
        },
        GraphQL: {
          Singular: review_mm,
          Plural: reviews_mm,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          books: {
            TargetEntity: Book_MM,
            SourceFields: [
              book_id
            ],
            TargetFields: [
              id
            ]
          },
          website_users: {
            TargetEntity: WebsiteUser_MM,
            SourceFields: [
              websiteuser_id
            ],
            TargetFields: [
              id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Comic: {
        Source: {
          Object: comics,
          Type: Table
        },
        GraphQL: {
          Singular: Comic,
          Plural: Comics,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilterManyOne_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterManyOne_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterOneMany_ColumnForbidden,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    categoryName
                  ]
                }
              }
            ]
          },
          {
            Role: TestNestedFilterOneMany_EntityReadForbidden,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          myseries: {
            TargetEntity: series
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Broker: {
        Source: {
          Object: brokers,
          Type: Table
        },
        GraphQL: {
          Singular: Broker,
          Plural: Brokers,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Read
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 4,
          ThresholdMs: 10,
          Enabled: true
        }
      }
    },
    {
      WebsiteUser: {
        Source: {
          Object: website_users,
          Type: Table
        },
        GraphQL: {
          Singular: websiteUser,
          Plural: websiteUsers,
          Enabled: true
        },
        Rest: {
          Enabled: false
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Relationships: {
          reviews: {
            Cardinality: Many,
            TargetEntity: Review,
            SourceFields: [
              id
            ],
            TargetFields: [
              websiteuser_id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      WebsiteUser_MM: {
        Source: {
          Object: website_users_mm,
          Type: Table
        },
        GraphQL: {
          Singular: websiteuser_mm,
          Plural: websiteusers_mm,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          reviews: {
            Cardinality: Many,
            TargetEntity: Review_MM,
            SourceFields: [
              id
            ],
            TargetFields: [
              websiteuser_id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      SupportedType: {
        Source: {
          Object: type_table,
          Type: Table
        },
        GraphQL: {
          Singular: SupportedType,
          Plural: SupportedTypes,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Mappings: {
          id: typeid
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      stocks_price: {
        Source: {
          Object: stocks_price,
          Type: Table
        },
        GraphQL: {
          Singular: stocks_price,
          Plural: stocks_prices,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterFieldIsNull_ColumnForbidden,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    price
                  ]
                }
              }
            ]
          },
          {
            Role: TestNestedFilterFieldIsNull_EntityReadForbidden,
            Actions: [
              {
                Action: Create
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields_on_create,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          Stock: {
            TargetEntity: Stock
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Tree: {
        Source: {
          Object: trees,
          Type: Table
        },
        GraphQL: {
          Singular: Tree,
          Plural: Trees,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Mappings: {
          region: United State's Region,
          species: Scientific Name
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Shrub: {
        Source: {
          Object: trees,
          Type: Table
        },
        GraphQL: {
          Singular: Shrub,
          Plural: Shrubs,
          Enabled: true
        },
        Rest: {
          Path: /plants,
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Mappings: {
          species: fancyName
        },
        Relationships: {
          fungus: {
            TargetEntity: Fungus,
            SourceFields: [
              species
            ],
            TargetFields: [
              habitat
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Fungus: {
        Source: {
          Object: fungi,
          Type: Table
        },
        GraphQL: {
          Singular: fungus,
          Plural: fungi,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.region ne 'northeast'
                }
              }
            ]
          }
        ],
        Mappings: {
          spores: hazards
        },
        Relationships: {
          shrub: {
            TargetEntity: Shrub,
            SourceFields: [
              habitat
            ],
            TargetFields: [
              species
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_view_all: {
        Source: {
          Object: books_view_all,
          Type: View,
          KeyFields: [
            id
          ]
        },
        GraphQL: {
          Singular: books_view_all,
          Plural: books_view_alls,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_view_with_mapping: {
        Source: {
          Object: books_view_with_mapping,
          Type: View,
          KeyFields: [
            id
          ]
        },
        GraphQL: {
          Singular: books_view_with_mapping,
          Plural: books_view_with_mappings,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          id: book_id
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      stocks_view_selected: {
        Source: {
          Object: stocks_view_selected,
          Type: View,
          KeyFields: [
            categoryid,
            pieceid
          ]
        },
        GraphQL: {
          Singular: stocks_view_selected,
          Plural: stocks_view_selecteds,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_publishers_view_composite: {
        Source: {
          Object: books_publishers_view_composite,
          Type: View,
          KeyFields: [
            id,
            pub_id
          ]
        },
        GraphQL: {
          Singular: books_publishers_view_composite,
          Plural: books_publishers_view_composites,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_publishers_view_composite_insertable: {
        Source: {
          Object: books_publishers_view_composite_insertable,
          Type: View,
          KeyFields: [
            id,
            publisher_id
          ]
        },
        GraphQL: {
          Singular: books_publishers_view_composite_insertable,
          Plural: books_publishers_view_composite_insertables,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Empty: {
        Source: {
          Object: empty_table,
          Type: Table
        },
        GraphQL: {
          Singular: Empty,
          Plural: Empties,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Notebook: {
        Source: {
          Object: notebooks,
          Type: Table
        },
        GraphQL: {
          Singular: Notebook,
          Plural: Notebooks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              },
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item ne 1
                }
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Journal: {
        Source: {
          Object: journals,
          Type: Table
        },
        GraphQL: {
          Singular: Journal,
          Plural: Journals,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: policy_tester_noupdate,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_update_noread,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1
                }
              },
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: authorizationHandlerTester,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      ArtOfWar: {
        Source: {
          Object: aow,
          Type: Table
        },
        GraphQL: {
          Singular: ArtOfWar,
          Plural: ArtOfWars,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          DetailAssessmentAndPlanning: 始計,
          NoteNum: ┬─┬ノ( º _ ºノ),
          StrategicAttack: 謀攻,
          WagingWar: 作戰
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      series: {
        Source: {
          Object: series,
          Type: Table
        },
        GraphQL: {
          Singular: series,
          Plural: series,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: TestNestedFilterManyOne_ColumnForbidden,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    name
                  ]
                }
              }
            ]
          },
          {
            Role: TestNestedFilterManyOne_EntityReadForbidden,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilterOneMany_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterOneMany_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Relationships: {
          comics: {
            Cardinality: Many,
            TargetEntity: Comic
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Sales: {
        Source: {
          Object: sales,
          Type: Table
        },
        GraphQL: {
          Singular: Sales,
          Plural: Sales,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_NonAutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_NonAutogenRelationshipColumn,
          Plural: User_NonAutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_NonAutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              username
            ],
            TargetFields: [
              username
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      UserProfile: {
        Source: {
          Object: user_profiles,
          Type: Table
        },
        GraphQL: {
          Singular: UserProfile,
          Plural: UserProfiles,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_AutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_AutogenRelationshipColumn,
          Plural: User_AutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_AutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              userid
            ],
            TargetFields: [
              profileid
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_AutogenToNonAutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_AutogenToNonAutogenRelationshipColumn,
          Plural: User_AutogenToNonAutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_AutogenToNonAutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              userid,
              username
            ],
            TargetFields: [
              userid,
              username
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_RepeatedReferencingColumnToOneEntity: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_RepeatedReferencingColumnToOneEntity,
          Plural: User_RepeatedReferencingColumnToOneEntities,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile: {
            TargetEntity: UserProfile,
            SourceFields: [
              username,
              username
            ],
            TargetFields: [
              profilepictureurl,
              username
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      UserProfile_RepeatedReferencingColumnToTwoEntities: {
        Source: {
          Object: user_profiles,
          Type: Table
        },
        GraphQL: {
          Singular: UserProfile_RepeatedReferencingColumnToTwoEntities,
          Plural: UserProfile_RepeatedReferencingColumnToTwoEntities,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          book: {
            TargetEntity: Book,
            SourceFields: [
              userid
            ],
            TargetFields: [
              id
            ]
          },
          publisher: {
            TargetEntity: Publisher,
            SourceFields: [
              userid
            ],
            TargetFields: [
              id
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GetBooks: {
        Source: {
          Object: get_books,
          Type: stored-procedure
        },
        GraphQL: {
          Singular: GetBooks,
          Plural: GetBooks,
          Enabled: true,
          Operation: Query
        },
        Rest: {
          Methods: [
            Get
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GetBook: {
        Source: {
          Object: get_book_by_id,
          Type: stored-procedure
        },
        GraphQL: {
          Singular: GetBook,
          Plural: GetBooks,
          Enabled: false,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Get
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GetPublisher: {
        Source: {
          Object: get_publisher_by_id,
          Type: stored-procedure
        },
        GraphQL: {
          Singular: GetPublisher,
          Plural: GetPublishers,
          Enabled: true,
          Operation: Query
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      InsertBook: {
        Source: {
          Object: insert_book,
          Type: stored-procedure,
          Parameters: {
            publisher_id: 1234,
            title: randomX
          }
        },
        GraphQL: {
          Singular: InsertBook,
          Plural: InsertBooks,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      CountBooks: {
        Source: {
          Object: count_books,
          Type: stored-procedure
        },
        GraphQL: {
          Singular: CountBooks,
          Plural: CountBooks,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      DeleteLastInsertedBook: {
        Source: {
          Object: delete_last_inserted_book,
          Type: stored-procedure
        },
        GraphQL: {
          Singular: DeleteLastInsertedBook,
          Plural: DeleteLastInsertedBooks,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      UpdateBookTitle: {
        Source: {
          Object: update_book_title,
          Type: stored-procedure,
          Parameters: {
            id: 1,
            title: Testing Tonight
          }
        },
        GraphQL: {
          Singular: UpdateBookTitle,
          Plural: UpdateBookTitles,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GetAuthorsHistoryByFirstName: {
        Source: {
          Object: get_authors_history_by_first_name,
          Type: stored-procedure,
          Parameters: {
            firstName: Aaron
          }
        },
        GraphQL: {
          Singular: SearchAuthorByFirstName,
          Plural: SearchAuthorByFirstNames,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      InsertAndDisplayAllBooksUnderGivenPublisher: {
        Source: {
          Object: insert_and_display_all_books_for_given_publisher,
          Type: stored-procedure,
          Parameters: {
            publisher_name: MyPublisher,
            title: MyTitle
          }
        },
        GraphQL: {
          Singular: InsertAndDisplayAllBooksUnderGivenPublisher,
          Plural: InsertAndDisplayAllBooksUnderGivenPublishers,
          Enabled: true,
          Operation: Mutation
        },
        Rest: {
          Methods: [
            Post
          ],
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Execute
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Execute
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GQLmappings: {
        Source: {
          Object: GQLmappings,
          Type: Table
        },
        GraphQL: {
          Singular: GQLmappings,
          Plural: GQLmappings,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          __column1: column1,
          __column2: column2
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Bookmarks: {
        Source: {
          Object: bookmarks,
          Type: Table
        },
        GraphQL: {
          Singular: Bookmarks,
          Plural: Bookmarks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      MappedBookmarks: {
        Source: {
          Object: mappedbookmarks,
          Type: Table
        },
        GraphQL: {
          Singular: MappedBookmarks,
          Plural: MappedBookmarks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          bkname: name,
          id: bkid
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      FteData: {
        Source: {
          Object: fte_data,
          Type: Table
        },
        GraphQL: {
          Singular: FteData,
          Plural: FteData,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      InternData: {
        Source: {
          Object: intern_data,
          Type: Table
        },
        GraphQL: {
          Singular: InternData,
          Plural: InternData,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BooksSold: {
        Source: {
          Object: books_sold,
          Type: Table
        },
        GraphQL: {
          Singular: books_sold,
          Plural: books_sold,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      DefaultBuiltInFunction: {
        Source: {
          Object: default_with_function_table,
          Type: Table
        },
        GraphQL: {
          Singular: DefaultBuiltInFunction,
          Plural: DefaultBuiltInFunctions,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create,
                Fields: {
                  Exclude: [
                    current_date,
                    next_date
                  ]
                }
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      PublisherNF: {
        Source: {
          Object: publishers,
          Type: Table
        },
        GraphQL: {
          Singular: PublisherNF,
          Plural: PublisherNFs,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilter_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilter_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterChained_EntityReadForbidden,
            Actions: [
              {
                Action: Create
              }
            ]
          },
          {
            Role: TestNestedFilterChained_ColumnForbidden,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    name
                  ]
                }
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: BookNF
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BookNF: {
        Source: {
          Object: books,
          Type: Table
        },
        GraphQL: {
          Singular: bookNF,
          Plural: booksNF,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilter_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilter_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterChained_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterChained_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Mappings: {
          id: id,
          title: title
        },
        Relationships: {
          authors: {
            Cardinality: Many,
            TargetEntity: AuthorNF,
            SourceFields: [
              id
            ],
            TargetFields: [
              id
            ],
            LinkingObject: book_author_link,
            LinkingSourceFields: [
              book_id
            ],
            LinkingTargetFields: [
              author_id
            ]
          },
          publishers: {
            TargetEntity: PublisherNF
          },
          reviews: {
            Cardinality: Many,
            TargetEntity: Review
          },
          websiteplacement: {
            TargetEntity: BookWebsitePlacement
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      AuthorNF: {
        Source: {
          Object: authors,
          Type: Table
        },
        GraphQL: {
          Singular: AuthorNF,
          Plural: AuthorNFs,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: TestNestedFilter_EntityReadForbidden,
            Actions: [
              {
                Action: Create,
                Fields: {
                  Exclude: [
                    name
                  ]
                }
              }
            ]
          },
          {
            Role: TestNestedFilter_ColumnForbidden,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    name
                  ]
                }
              }
            ]
          },
          {
            Role: TestNestedFilterChained_EntityReadForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: TestNestedFilterChained_ColumnForbidden,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: BookNF,
            LinkingObject: book_author_link
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      dbo_DimAccount: {
        Source: {
          Object: DimAccount,
          Type: Table
        },
        GraphQL: {
          Singular: dbo_DimAccount,
          Plural: dbo_DimAccounts,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          child_accounts: {
            Cardinality: Many,
            TargetEntity: dbo_DimAccount,
            SourceFields: [
              AccountKey
            ],
            TargetFields: [
              ParentAccountKey
            ]
          },
          parent_account: {
            TargetEntity: dbo_DimAccount,
            SourceFields: [
              ParentAccountKey
            ],
            TargetFields: [
              AccountKey
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      DateOnlyTable: {
        Source: {
          Object: date_only_table,
          Type: Table,
          KeyFields: [
            event_date
          ]
        },
        GraphQL: {
          Singular: DateOnlyTable,
          Plural: DateOnlyTables,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    }
  ]
}