{
  DataSource: {
    DatabaseType: MySQL,
    Health: {
      ThresholdMs: 1000,
      Enabled: true
    }
  },
  Runtime: {
    Rest: {
      Enabled: true,
      Path: /api,
      RequestBodyStrict: true
    },
    GraphQL: {
      Enabled: true,
      Path: /graphql,
      AllowIntrospection: true
    },
    Host: {
      Cors: {
        Origins: [
          http://localhost:5000
        ],
        AllowCredentials: false
      },
      Authentication: {
        Provider: StaticWebApps
      }
    }
  },
  Entities: [
    {
      Publisher: {
        Source: {
          Object: publishers,
          Type: Table
        },
        GraphQL: {
          Singular: Publisher,
          Plural: Publishers,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_02,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_03,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_04,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_06,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1940
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: database_policy_tester,
            Actions: [
              {
                Action: Update,
                Policy: {
                  Database: @item.id ne 1234
                }
              },
              {
                Action: Create
              },
              {
                Action: Read,
                Policy: {
                  Database: @item.id ne 1234 or @item.id gt 1940
                }
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: Book
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Stock: {
        Source: {
          Object: stocks,
          Type: Table
        },
        GraphQL: {
          Singular: Stock,
          Plural: Stocks,
          Enabled: true
        },
        Rest: {
          Path: /commodities,
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_noread,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    categoryName
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_policy_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    categoryName
                  ]
                },
                Policy: {
                  Database: @item.piecesAvailable ne 0
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          stocks_price: {
            TargetEntity: stocks_price
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Book: {
        Source: {
          Object: books,
          Type: Table
        },
        GraphQL: {
          Singular: book,
          Plural: books,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title eq 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_02,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_03,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title eq 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_04,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Policy-Test-01'
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_05,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_06,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 10
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                }
              }
            ]
          },
          {
            Role: policy_tester_07,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 9
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: policy_tester_08,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 9
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 9
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: test_role_with_noread,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    publisher_id
                  ]
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: test_role_with_policy_excluded_fields,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    publisher_id
                  ]
                },
                Policy: {
                  Database: @item.title ne 'Test'
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Mappings: {
          id: id,
          title: title
        },
        Relationships: {
          authors: {
            Cardinality: Many,
            TargetEntity: Author,
            SourceFields: [
              id
            ],
            TargetFields: [
              id
            ],
            LinkingObject: book_author_link,
            LinkingSourceFields: [
              book_id
            ],
            LinkingTargetFields: [
              author_id
            ]
          },
          publishers: {
            TargetEntity: Publisher
          },
          reviews: {
            Cardinality: Many,
            TargetEntity: Review
          },
          websiteplacement: {
            TargetEntity: BookWebsitePlacement
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BookNF: {
        Source: {
          Object: books,
          Type: Table
        },
        GraphQL: {
          Singular: bookNF,
          Plural: booksNF,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BookWebsitePlacement: {
        Source: {
          Object: book_website_placements,
          Type: Table
        },
        GraphQL: {
          Singular: BookWebsitePlacement,
          Plural: BookWebsitePlacements,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @claims.userId eq @item.id
                }
              },
              {
                Action: Create
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Relationships: {
          books: {
            TargetEntity: Book
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Author: {
        Source: {
          Object: authors,
          Type: Table
        },
        GraphQL: {
          Singular: Author,
          Plural: Authors,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          books: {
            Cardinality: Many,
            TargetEntity: Book,
            LinkingObject: book_author_link
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Review: {
        Source: {
          Object: reviews,
          Type: Table
        },
        GraphQL: {
          Singular: review,
          Plural: reviews,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          books: {
            TargetEntity: Book
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Comic: {
        Source: {
          Object: comics,
          Type: Table
        },
        GraphQL: {
          Singular: Comic,
          Plural: Comics,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          myseries: {
            TargetEntity: series
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Broker: {
        Source: {
          Object: brokers,
          Type: Table
        },
        GraphQL: {
          Singular: Broker,
          Plural: Brokers,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Read
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      WebsiteUser: {
        Source: {
          Object: website_users,
          Type: Table
        },
        GraphQL: {
          Singular: websiteUser,
          Plural: websiteUsers,
          Enabled: true
        },
        Rest: {
          Enabled: false
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      SupportedType: {
        Source: {
          Object: type_table,
          Type: Table
        },
        GraphQL: {
          Singular: SupportedType,
          Plural: SupportedTypes,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Mappings: {
          id: typeid
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      stocks_price: {
        Source: {
          Object: stocks_price,
          Type: Table
        },
        GraphQL: {
          Singular: stocks_price,
          Plural: stocks_prices,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Delete
              },
              {
                Action: Update
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Tree: {
        Source: {
          Object: trees,
          Type: Table
        },
        GraphQL: {
          Singular: Tree,
          Plural: Trees,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Mappings: {
          region: United State's Region,
          species: Scientific Name
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Shrub: {
        Source: {
          Object: trees,
          Type: Table
        },
        GraphQL: {
          Singular: Shrub,
          Plural: Shrubs,
          Enabled: true
        },
        Rest: {
          Path: /plants,
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Mappings: {
          species: fancyName
        },
        Relationships: {
          fungus: {
            TargetEntity: Fungus,
            SourceFields: [
              species
            ],
            TargetFields: [
              habitat
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Fungus: {
        Source: {
          Object: fungi,
          Type: Table
        },
        GraphQL: {
          Singular: fungus,
          Plural: fungi,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_01,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.region ne 'northeast'
                }
              }
            ]
          }
        ],
        Mappings: {
          spores: hazards
        },
        Relationships: {
          shrub: {
            TargetEntity: Shrub,
            SourceFields: [
              habitat
            ],
            TargetFields: [
              species
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_view_all: {
        Source: {
          Object: books_view_all,
          Type: View,
          KeyFields: [
            id
          ]
        },
        GraphQL: {
          Singular: books_view_all,
          Plural: books_view_alls,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_view_with_mapping: {
        Source: {
          Object: books_view_with_mapping,
          Type: View,
          KeyFields: [
            id
          ]
        },
        GraphQL: {
          Singular: books_view_with_mapping,
          Plural: books_view_with_mappings,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          id: book_id
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      stocks_view_selected: {
        Source: {
          Object: stocks_view_selected,
          Type: View,
          KeyFields: [
            categoryid,
            pieceid
          ]
        },
        GraphQL: {
          Singular: stocks_view_selected,
          Plural: stocks_view_selecteds,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_publishers_view_composite: {
        Source: {
          Object: books_publishers_view_composite,
          Type: View,
          KeyFields: [
            id,
            pub_id
          ]
        },
        GraphQL: {
          Singular: books_publishers_view_composite,
          Plural: books_publishers_view_composites,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      books_publishers_view_composite_insertable: {
        Source: {
          Object: books_publishers_view_composite_insertable,
          Type: View,
          KeyFields: [
            id,
            publisher_id
          ]
        },
        GraphQL: {
          Singular: books_publishers_view_composite_insertable,
          Plural: books_publishers_view_composite_insertables,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Empty: {
        Source: {
          Object: empty_table,
          Type: Table
        },
        GraphQL: {
          Singular: Empty,
          Plural: Empties,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: authenticated,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Notebook: {
        Source: {
          Object: notebooks,
          Type: Table
        },
        GraphQL: {
          Singular: Notebook,
          Plural: Notebooks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              },
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item ne 1
                }
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Journal: {
        Source: {
          Object: journals,
          Type: Table
        },
        GraphQL: {
          Singular: Journal,
          Plural: Journals,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: policy_tester_noupdate,
            Actions: [
              {
                Action: Read,
                Fields: {
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id ne 1
                }
              },
              {
                Action: Create
              },
              {
                Action: Delete
              }
            ]
          },
          {
            Role: policy_tester_update_noread,
            Actions: [
              {
                Action: Delete,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1
                }
              },
              {
                Action: Read,
                Fields: {
                  Exclude: [
                    *
                  ]
                }
              },
              {
                Action: Update,
                Fields: {
                  Include: [
                    *
                  ]
                },
                Policy: {
                  Database: @item.id eq 1
                }
              },
              {
                Action: Create
              }
            ]
          },
          {
            Role: authorizationHandlerTester,
            Actions: [
              {
                Action: Read
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      ArtOfWar: {
        Source: {
          Object: aow,
          Type: Table
        },
        GraphQL: {
          Singular: ArtOfWar,
          Plural: ArtOfWars,
          Enabled: false
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          DetailAssessmentAndPlanning: 始計,
          NoteNum: ┬─┬ノ( º _ ºノ),
          StrategicAttack: 謀攻,
          WagingWar: 作戰
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      series: {
        Source: {
          Object: series,
          Type: Table
        },
        GraphQL: {
          Singular: series,
          Plural: series,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          comics: {
            Cardinality: Many,
            TargetEntity: Comic
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Sales: {
        Source: {
          Object: sales,
          Type: Table
        },
        GraphQL: {
          Singular: Sales,
          Plural: Sales,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_NonAutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_NonAutogenRelationshipColumn,
          Plural: User_NonAutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_NonAutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              username
            ],
            TargetFields: [
              username
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      UserProfile: {
        Source: {
          Object: user_profiles,
          Type: Table
        },
        GraphQL: {
          Singular: UserProfile,
          Plural: UserProfiles,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_AutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_AutogenRelationshipColumn,
          Plural: User_AutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_AutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              userid
            ],
            TargetFields: [
              profileid
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      User_AutogenToNonAutogenRelationshipColumn: {
        Source: {
          Object: users,
          Type: Table
        },
        GraphQL: {
          Singular: User_AutogenToNonAutogenRelationshipColumn,
          Plural: User_AutogenToNonAutogenRelationshipColumns,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Relationships: {
          UserProfile_AutogenToNonAutogenRelationshipColumn: {
            TargetEntity: UserProfile,
            SourceFields: [
              userid,
              username
            ],
            TargetFields: [
              userid,
              username
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      GQLmappings: {
        Source: {
          Object: GQLmappings,
          Type: Table
        },
        GraphQL: {
          Singular: GQLmappings,
          Plural: GQLmappings,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          __column1: column1,
          __column2: column2
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      Bookmarks: {
        Source: {
          Object: bookmarks,
          Type: Table
        },
        GraphQL: {
          Singular: Bookmarks,
          Plural: Bookmarks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      MappedBookmarks: {
        Source: {
          Object: mappedbookmarks,
          Type: Table
        },
        GraphQL: {
          Singular: MappedBookmarks,
          Plural: MappedBookmarks,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          },
          {
            Role: authenticated,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Mappings: {
          bkname: name,
          id: bkid
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      BooksSold: {
        Source: {
          Object: books_sold,
          Type: Table
        },
        GraphQL: {
          Singular: books_sold,
          Plural: books_sold,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: *
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      DefaultBuiltInFunction: {
        Source: {
          Object: default_with_function_table,
          Type: Table
        },
        GraphQL: {
          Singular: DefaultBuiltInFunction,
          Plural: DefaultBuiltInFunctions,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Create,
                Fields: {
                  Exclude: [
                    current_date,
                    next_date
                  ],
                  Include: [
                    *
                  ]
                }
              },
              {
                Action: Read
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    },
    {
      dbo_DimAccount: {
        Source: {
          Object: dimaccount,
          Type: Table
        },
        GraphQL: {
          Singular: dbo_DimAccount,
          Plural: dbo_DimAccounts,
          Enabled: true
        },
        Rest: {
          Enabled: true
        },
        Permissions: [
          {
            Role: anonymous,
            Actions: [
              {
                Action: Read
              },
              {
                Action: Create
              },
              {
                Action: Update
              },
              {
                Action: Delete
              }
            ]
          }
        ],
        Relationships: {
          child_accounts: {
            Cardinality: Many,
            TargetEntity: dbo_DimAccount,
            SourceFields: [
              AccountKey
            ],
            TargetFields: [
              ParentAccountKey
            ]
          },
          parent_account: {
            TargetEntity: dbo_DimAccount,
            SourceFields: [
              ParentAccountKey
            ],
            TargetFields: [
              AccountKey
            ]
          }
        },
        Health: {
          First: 100,
          ThresholdMs: 1000,
          Enabled: true
        }
      }
    }
  ]
}