<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Execution</name>
    </assembly>
    <members>
        <member name="T:HotChocolate.Execution.AutoUpdateRequestExecutorProxy">
            <summary>
            The <see cref="T:HotChocolate.Execution.AutoUpdateRequestExecutorProxy"/> is a helper class that represents a
            executor for one specific schema and handles the resolving and hot-swapping
            the specific executor.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.InnerExecutor">
            <summary>
            The inner executor is exposed for testability.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.CreateAsync(HotChocolate.Execution.RequestExecutorProxy,System.Threading.CancellationToken)">
            <summary>
            Creates a new auto-update proxy for <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </summary>
            <param name="requestExecutorProxy">
            The underlying manual proxy.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a new auto-update proxy for <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Create(HotChocolate.Execution.RequestExecutorProxy,HotChocolate.Execution.IRequestExecutor)">
            <summary>
            Creates a new auto-update proxy for <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </summary>
            <param name="requestExecutorProxy">
            The underlying manual proxy.
            </param>
            <param name="initialExecutor">
            The initial executor instance.
            </param>
            <returns>
            Returns a new auto-update proxy for <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </returns>
        </member>
        <member name="P:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Schema">
            <summary>
            Gets the schema to which this executor is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Services">
            <summary>
            Gets the services that are bound to this executor.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Version">
            <summary>
            Gets the version of the executor.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.ExecuteAsync(HotChocolate.Execution.IQueryRequest,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="request" />.
             </summary>
             <param name="request">
             The GraphQL request object.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="request" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.ExecuteBatchAsync(System.Collections.Generic.IEnumerable{HotChocolate.Execution.IQueryRequest},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes the given GraphQL <paramref name="requestBatch" />.
            </summary>
            <param name="requestBatch">
            The GraphQL request batch.
            </param>
            <param name="allowParallelExecution">
            Defines if the executor is allowed to execute the batch in parallel.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a stream of query results.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.AutoUpdateRequestExecutorProxy.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="P:HotChocolate.Execution.Caching.IComplexityAnalyzerCache.Capacity">
            <summary>
            Gets maximum amount of operation complexity analyzers that can be cached. The default
            value is <c>100</c>. The minimum allowed value is <c>10</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Caching.IComplexityAnalyzerCache.Count">
            <summary>
            Gets the amount of operation analyzers residing in the cache.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IComplexityAnalyzerCache.TryGetAnalyzer(System.String,HotChocolate.Execution.Pipeline.Complexity.ComplexityAnalyzerDelegate@)">
            <summary>
            Try get a compiled operation complexity analyzer by it <paramref name="operationId" />.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="analyzer">
            The operation complexity analyzer that is associated with the id or null
            if no operation complexity analyzer was found that matches the specified id.
            </param>
            <returns>
            <c>true</c> if an operation complexity analyzer was found that matches the specified
            <paramref name="operationId"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IComplexityAnalyzerCache.TryAddAnalyzer(System.String,HotChocolate.Execution.Pipeline.Complexity.ComplexityAnalyzerDelegate)">
            <summary>
            Tries to add a new operation complexity analyzer to the cache.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="analyzer">
            The operation complexity analyzer that shall be cached.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IComplexityAnalyzerCache.Clear">
            <summary>
            Clears all items from the cache.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Caching.IPreparedOperationCache">
            <summary>
            This cache is used to cache compiled operations for faster execution and less memory.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Caching.IPreparedOperationCache.Capacity">
            <summary>
            Gets maximum amount of compiled operations that can be cached. The default
            value is <c>100</c>. The minimum allowed value is <c>10</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Caching.IPreparedOperationCache.Count">
            <summary>
            Gets the amount of compiled queries residing in the cache.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IPreparedOperationCache.TryGetOperation(System.String,HotChocolate.Execution.Processing.IPreparedOperation@)">
            <summary>
            Try get a compiled operation by it <paramref name="operationId" />.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="operation">
            The operation that is associated with the id or null if no operation was found
            that matches the specified id.
            </param>
            <returns>
            <c>true</c> if an operation was found that matches the specified
            <paramref name="operationId"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IPreparedOperationCache.TryAddOperation(System.String,HotChocolate.Execution.Processing.IPreparedOperation)">
            <summary>
            Tries to add a new compiled operation to the cache.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="operation">
            The operation that shall be cached.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IPreparedOperationCache.Clear">
            <summary>
            Clears all items from the cache.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Caching.IQueryPlanCache">
            <summary>
            This cache is used to cache compiled operations for faster execution and less memory.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Caching.IQueryPlanCache.Capacity">
            <summary>
            Gets maximum amount of query plans that can be cached. The default
            value is <c>100</c>. The minimum allowed value is <c>10</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Caching.IQueryPlanCache.Count">
            <summary>
            Gets the amount of compiled query plans residing in the cache.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IQueryPlanCache.TryGetQueryPlan(System.String,HotChocolate.Execution.Processing.Plan.QueryPlan@)">
            <summary>
            Try get a query plan by its <paramref name="operationId" />.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="queryPlan">
            The query plan that is associated with the id or null if no query plan was found
            that matches the specified id.
            </param>
            <returns>
            <c>true</c> if an query plans was found that matches the specified
            <paramref name="operationId"/>, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IQueryPlanCache.TryAddQueryPlan(System.String,HotChocolate.Execution.Processing.Plan.QueryPlan)">
            <summary>
            Tries to add a new query plan to the cache.
            </summary>
            <param name="operationId">
            The internal operation id.
            </param>
            <param name="queryPlan">
            The query plan that shall be cached.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Caching.IQueryPlanCache.Clear">
            <summary>
            Clears all items from the cache.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.DefaultResolverCompilerBuilder">
            <summary>
            The default <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/> implementation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.DefaultResolverCompilerBuilder.#ctor(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Configuration.DefaultResolverCompilerBuilder"/>.
            </summary>
            <param name="requestExecutorBuilder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> for which we want to apply configuration.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.Configuration.DefaultResolverCompilerBuilder.RequestExecutorBuilder">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup">
            <summary>
            Represents something that configures the <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup.SchemaName">
            <summary>
            The schema name to which this instance provides configurations to.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder">
            <summary>
            The GraphQL configuration builder.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Configuration.IRequestExecutorBuilder.Name">
            <summary>
            Gets the name of the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Configuration.IRequestExecutorBuilder.Services">
            <summary>
            Gets the application services.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor">
            <summary>
            Used for notifications when <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/> instances change.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor.GetAsync(HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Returns a configured <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/>
            instance with the given name.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.IRequestExecutorOptionsMonitor.OnChange(System.Action{HotChocolate.NameString})">
            <summary>
            Registers a listener to be called whenever a named
            <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/> changes.
            </summary>
            <param name="listener">
            The action to be invoked when <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/> has changed.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> which should be disposed to stop listening for changes.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider">
            <summary>
            Provides dynamic configurations.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider.GetOptionsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets named configuration options.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/>.
            </param>
            <returns>
            Returns the configuration options of this provider.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.IRequestExecutorOptionsProvider.OnChange(System.Action{HotChocolate.Execution.Configuration.IConfigureRequestExecutorSetup})">
            <summary>
            Registers a listener to be called whenever a named
            <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/> changes.
            </summary>
            <param name="listener">
            The action to be invoked when <see cref="T:HotChocolate.Execution.Configuration.RequestExecutorSetup"/> has changed.
            </param>
            <returns>
            An <see cref="T:System.IDisposable"/> which should be disposed to stop listening for changes.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder">
            <summary>
            The resolver compiler builder.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Configuration.IResolverCompilerBuilder.RequestExecutorBuilder">
            <summary>
            THe inner request executor builder.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.ITypeModule">
            <summary>
            A type module allows you to easily build a component that dynamically provides types to
            the schema building process.
            </summary>
        </member>
        <member name="E:HotChocolate.Execution.Configuration.ITypeModule.TypesChanged">
            <summary>
            This event signals that types have changed and the current schema
            version has to be phased out.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.ITypeModule.CreateTypesAsync(HotChocolate.Types.Descriptors.IDescriptorContext,System.Threading.CancellationToken)">
            <summary>
            Will be called by the schema building process to add the dynamically created
            types and type extensions to the schema building process.
            </summary>
            <param name="context">
            The descriptor context provides access to schema building services and conventions.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a collection of types and type extensions that shall be
            added to the schema building process.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper">
            <summary>
            Helper to enable legacy configurations.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchemaBuilder(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.ISchemaBuilder)">
            <summary>
            Sets the schema builder that shall be used to configure the request executor.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schemaBuilder">
            The schema builder that shall be used to configure the request executor.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.ISchema)">
            <summary>
            Sets the schema builder that shall be used to configure the request executor.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schema">
            The schema that shall be used to configure the request executor.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Configuration.RequestExecutorBuilderLegacyHelper.SetSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.ISchema})">
            <summary>
            Sets the schema builder that shall be used to configure the request executor.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schemaFactory">
            The factory to create the schema.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.RequestExecutorServiceProviderExtensions">
            <summary>
            Provides extensions for <see cref="T:System.IServiceProvider" /> to interact with the
            <see cref="T:HotChocolate.Execution.IRequestExecutor" />.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.GetSchemaAsync(System.IServiceProvider,HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:HotChocolate.ISchema" /> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="services">
            The <see cref="T:System.IServiceProvider"/>.
            </param>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.IRequestExecutor" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.BuildSchemaAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Builds the <see cref="T:HotChocolate.ISchema" /> from the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.IRequestExecutor" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.GetRequestExecutorAsync(System.IServiceProvider,HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:HotChocolate.Execution.IRequestExecutor" /> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="services">
            The <see cref="T:System.IServiceProvider"/>.
            </param>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.IRequestExecutor" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.BuildRequestExecutorAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Builds the <see cref="T:HotChocolate.Execution.IRequestExecutor" /> from the
            <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.IRequestExecutor" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(System.IServiceProvider,HotChocolate.Execution.IQueryRequest,HotChocolate.NameString,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="request" />.
             </summary>
             <param name="services">
             The service provider that contains the executor.
             </param>
             <param name="request">
             The GraphQL request object.
             </param>
             <param name="schemaName">
             The schema name.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="request" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IReadOnlyQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a <see cref="T:HotChocolate.Execution.IReadOnlyQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IReadOnlyQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Execution.IQueryRequest,HotChocolate.NameString,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="request" />.
             </summary>
             <param name="builder">
             The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
             </param>
             <param name="request">
             The GraphQL request object.
             </param>
             <param name="schemaName">
             The schema name.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="request" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(System.IServiceProvider,System.String,HotChocolate.NameString,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="query" />.
             </summary>
             <param name="services">
             The service provider that contains the executor.
             </param>
             <param name="query">
             The GraphQL query.
             </param>
             <param name="schemaName">
             The schema name.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="query" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteRequestAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.String,HotChocolate.NameString,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="query" />.
             </summary>
             <param name="builder">
             The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
             </param>
             <param name="query">
             The GraphQL query.
             </param>
             <param name="schemaName">
             The schema name.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="query" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorServiceProviderExtensions.ExecuteBatchRequestAsync(System.IServiceProvider,System.Collections.Generic.IEnumerable{HotChocolate.Execution.IQueryRequest},System.Boolean,HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Executes the given GraphQL <paramref name="requestBatch" />.
            </summary>
            <param name="services">
            The service provider that contains the executor.
            </param>
            <param name="requestBatch">
            The GraphQL request batch.
            </param>
            <param name="allowParallelExecution">
            Defines if the executor is allowed to execute the batch in parallel.
            </param>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a stream of query results.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener">
            <summary>
            This class can be used as a base class for <see cref="T:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener"/>
            implementations, so that they only have to override the methods they
            are interested in instead of having to provide implementations for all of them.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.EnableResolveFieldValue">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.EmptyScope">
            <summary>
            A no-op activity scope that can be returned from
            event methods that are not interested in when the scope is disposed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteRequest(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RequestError(HotChocolate.Execution.IRequestContext,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ParseDocument(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SyntaxError(HotChocolate.Execution.IRequestContext,HotChocolate.IError)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ValidateDocument(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ValidationErrors(HotChocolate.Execution.IRequestContext,System.Collections.Generic.IReadOnlyList{HotChocolate.IError})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.AnalyzeOperationComplexity(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.OperationComplexityAnalyzerCompiled(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.OperationComplexityResult(HotChocolate.Execution.IRequestContext,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.CoerceVariables(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.CompileOperation(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteOperation(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteStream(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ResolverError(HotChocolate.Resolvers.IMiddlewareContext,HotChocolate.IError)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RunTask(HotChocolate.Execution.IExecutionTask)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.TaskError(HotChocolate.Execution.IExecutionTask,HotChocolate.IError)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.StartProcessing(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.StopProcessing(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext,HotChocolate.Execution.IQueryResult)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionEventError(HotChocolate.Execution.Processing.ISubscription,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.AddedDocumentToCache(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.AddedOperationToCache(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.DispatchBatch(HotChocolate.Execution.IRequestContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecutorCreated(System.String,HotChocolate.Execution.IRequestExecutor)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener.ExecutorEvicted(System.String,HotChocolate.Execution.IRequestExecutor)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.IDiagnosticEventListener">
            <summary>
            Register an implementation of this interface in the DI container to
            listen to diagnostic events. Multiple implementations can be registered
            and they will all be called in the registration order.
            </summary>
            <seealso cref="T:HotChocolate.Execution.Instrumentation.DiagnosticEventListener"/>
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.IDiagnosticEvents">
            <summary>
            Diagnostic events that can be triggered by the execution engine.
            </summary>
            <seealso cref="T:HotChocolate.Execution.Instrumentation.IDiagnosticEventListener"/>
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener">
            <summary>
            Register an implementation of this interface in the DI container to
            listen to diagnostic events. Multiple implementations can be registered
            and they will all be called in the registration order.
            </summary>
            <seealso cref="T:HotChocolate.Execution.Instrumentation.ExecutionDiagnosticEventListener"/>
        </member>
        <member name="P:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener.EnableResolveFieldValue">
            <summary>
            Return true to tell the event dispatcher that the listener has
            implemented
            <see cref="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext)"/> or
            <see cref="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RunTask(HotChocolate.Execution.IExecutionTask)"/>.
            </summary>
            <remarks>
            Returning false allow the event dispatcher to avoid
            making unnecessary calls for these frequent events. It is not a
            guarantee that the methods will not be called.
            </remarks>
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents">
            <summary>
            Diagnostic events that can be triggered by the execution engine.
            </summary>
            <seealso cref="T:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener"/>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteRequest(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to execute a GraphQL request with the <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RequestError(HotChocolate.Execution.IRequestContext,System.Exception)">
            <summary>
            Called at the end of the execution if an exception occurred at some point,
            including unhandled exceptions when resolving fields.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <param name="exception">
            The last exception that occurred.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ParseDocument(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to parse a document.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when parsing has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SyntaxError(HotChocolate.Execution.IRequestContext,HotChocolate.IError)">
            <summary>
            Called if a syntax error is detected in a document during parsing.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <param name="error">
            The GraphQL syntax error.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ValidateDocument(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to validate a document.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the validation has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ValidationErrors(HotChocolate.Execution.IRequestContext,System.Collections.Generic.IReadOnlyList{HotChocolate.IError})">
            <summary>
            Called if there are any document validation errors.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <param name="errors">
            The GraphQL validation errors.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AnalyzeOperationComplexity(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to analyze the operation complexity.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.OperationComplexityAnalyzerCompiled(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called within <seealso cref="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AnalyzeOperationComplexity(HotChocolate.Execution.IRequestContext)"/> scope and
            reports that an analyzer was compiled.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.OperationComplexityResult(HotChocolate.Execution.IRequestContext,System.Int32,System.Int32)">
            <summary>
            Called within <seealso cref="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AnalyzeOperationComplexity(HotChocolate.Execution.IRequestContext)"/> scope and
            reports the outcome of the analyzer.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <param name="complexity">
            The current operation complexity.
            </param>
            <param name="allowedComplexity">
            The maximum allowed operation complexity.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.CoerceVariables(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to coerce variables for a request.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.CompileOperation(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to compile the GraphQL operation from the syntax tree.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteOperation(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when starting to execute the GraphQL operation and its resolvers.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteStream(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called within the execute operation scope if the result is a streamed result.
            The ExecuteStream scope will run longer then the ExecuteOperation scope.
            The ExecuteOperation scope is completed once the initial operation is executed.
            All deferred elements will be executed and delivered within the ExecuteStream scope.
            The passed in context is polled and can only be used at the initialization of the scope.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteDeferredTask">
            <summary>
            Called when starting to execute a deferred part an operation
            within the ExecuteStream scope or within the
            ExecuteSubscription scope.
            </summary>
            <returns>
            A scope that will be disposed when the execution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ResolveFieldValue(HotChocolate.Resolvers.IMiddlewareContext)">
            <summary>
            Called when starting to resolve a field value.
            </summary>
            <remarks>
            <see cref="P:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener.EnableResolveFieldValue"/> must be true if
            a listener implements this method to ensure that it is called.
            </remarks>
            <param name="context">
            The middleware context encapsulates all resolver-specific information about the
            execution of an individual field selection.
            </param>
            <returns>
            A scope that will be disposed when the field resolution has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ResolverError(HotChocolate.Resolvers.IMiddlewareContext,HotChocolate.IError)">
            <summary>
            Called for any errors during field resolution, including unhandled exceptions.
            </summary>
            <param name="context">
            The middleware context encapsulates all resolver-specific information about the
            execution of an individual field selection.
            </param>
            <param name="error">
            The error object.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RunTask(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Called when starting to run an execution engine task.
            </summary>
            <remarks>
            <see cref="P:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEventListener.EnableResolveFieldValue"/> must be true if
            a listener implements this method to ensure that it is called.
            </remarks>
            <param name="task">
            Execution engine tasks are things like executing a DataLoader.
            </param>
            <returns>
            A scope that will be disposed when the task has finished.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.TaskError(HotChocolate.Execution.IExecutionTask,HotChocolate.IError)">
            <summary>
            Called for any errors reported on a <see cref="T:HotChocolate.Execution.IExecutionTaskContext"/>
            during task execution.
            </summary>
            <param name="task">
            Execution engine tasks are things like executing a DataLoader.
            </param>
            <param name="error">
            The error that occurred while running the execution task.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.StartProcessing(HotChocolate.Execution.IRequestContext)">
            <summary>
            This event is called when the request execution pipeline scales
            the task processors up or down.
            </summary>
            <param name="context">
            The request that is being executed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.StopProcessing(HotChocolate.Execution.IRequestContext)">
            <summary>
            This event is called when the request execution pipeline scales
            the task processors up or down.
            </summary>
            <param name="context">
            The request that is being executed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecuteSubscription(HotChocolate.Execution.Processing.ISubscription)">
            <summary>
            Called when a subscription was created.
            </summary>
            <param name="subscription">
            The subscription object.
            </param>
            <returns>
            A scope that will be disposed when the subscription has completed.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.OnSubscriptionEvent(HotChocolate.Execution.Instrumentation.SubscriptionEventContext)">
            <summary>
            Called when an event was raised and a new subscription result is being produced.
            </summary>
            <param name="context">
            The subscription event context.
            </param>
            <returns>
            A scope that will be disposed when the subscription event execution has completed.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionEventResult(HotChocolate.Execution.Instrumentation.SubscriptionEventContext,HotChocolate.Execution.IQueryResult)">
            <summary>
            Called when a result for a specific subscription event was produced.
            </summary>
            <param name="context">
            The subscription event context.
            </param>
            <param name="result">
            The subscription result that is being written to the response stream.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionEventError(HotChocolate.Execution.Instrumentation.SubscriptionEventContext,System.Exception)">
            <summary>
            Called when an error occurred while producing the subscription event result.
            </summary>
            <param name="context">
            The subscription event context.
            </param>
            <param name="exception">
            The exception that occurred.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionEventError(HotChocolate.Execution.Processing.ISubscription,System.Exception)">
            <summary>
            Called when an error occurred while producing the subscription event result.
            </summary>
            <param name="subscription">
            The subscription object.
            </param>
            <param name="exception">
            The exception that occurred.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.SubscriptionTransportError(HotChocolate.Execution.Processing.ISubscription,System.Exception)">
            <summary>
            Called when an error occurred while producing the subscription event result.
            </summary>
            <param name="subscription">
            The subscription object.
            </param>
            <param name="exception">
            The exception that occurred.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AddedDocumentToCache(HotChocolate.Execution.IRequestContext)">
            <summary>
            A GraphQL request document was added to the document cache.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedDocumentFromCache(HotChocolate.Execution.IRequestContext)">
            <summary>
            A GraphQL request document was retrieved from the document cache.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedDocumentFromStorage(HotChocolate.Execution.IRequestContext)">
            <summary>
            Called when the document for a persisted query has been read from storage.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.AddedOperationToCache(HotChocolate.Execution.IRequestContext)">
            <summary>
            A compiled operation was added to the operation cache.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.RetrievedOperationFromCache(HotChocolate.Execution.IRequestContext)">
            <summary>
            A compiled operation was retrieved from the operation cache.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.DispatchBatch(HotChocolate.Execution.IRequestContext)">
            <summary>
            During execution we allow components like the DataLoader or schema stitching to
            defer execution of data resolvers to be executed in batches. If the execution engine
            has nothing to execute anymore these batches will be dispatched for execution.
            </summary>
            <param name="context">
            The request context encapsulates all GraphQL-specific information about an
            individual GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecutorCreated(System.String,HotChocolate.Execution.IRequestExecutor)">
            <summary>
            A GraphQL request executor was created and is now able to execute GraphQL requests.
            </summary>
            <param name="name">The name of the GraphQL schema.</param>
            <param name="executor">The GraphQL request executor.</param>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents.ExecutorEvicted(System.String,HotChocolate.Execution.IRequestExecutor)">
            <summary>
            A GraphQL request executor was evicted and will be removed from memory.
            </summary>
            <param name="name">The name of the GraphQL schema.</param>
            <param name="executor">The GraphQL request executor.</param>
        </member>
        <member name="T:HotChocolate.Execution.Instrumentation.SubscriptionEventContext">
            <summary>
            The subscription event context provides access to the subscription instance
            and the event payload.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Instrumentation.SubscriptionEventContext.#ctor(HotChocolate.Execution.Processing.ISubscription,System.Object)">
            <summary>
            Creates a new instance of the subscription event context.
            </summary>
            <param name="subscription">
            The subscription.
            </param>
            <param name="payload">
            The event payload.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subscription"/> or <paramref name="payload"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.Execution.Instrumentation.SubscriptionEventContext.Subscription">
            <summary>
            Gets the subscription.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Instrumentation.SubscriptionEventContext.Payload">
            <summary>
            Gets the event payload.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Internal.IInternalRequestExecutorResolver">
            <summary>
            The is an internal request executor resolver that is not meant for public usage.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Internal.IInternalRequestExecutorResolver.GetRequestExecutorNoLockAsync(HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Gets or creates the request executor that is associated with the
            given configuration <paramref name="schemaName" />.
            </summary>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a request executor that is associated with the
            given configuration <paramref name="schemaName" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.IRequestContext">
            <summary>
            Encapsulates all GraphQL-specific information about an individual GraphQL request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Schema">
            <summary>
            Gets the GraphQL schema on which the query is executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.ExecutorVersion">
            <summary>
            Gets the request executor version.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Services">
            <summary>
            Gets or sets the scoped request services.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.ErrorHandler">
            <summary>
            Gets the error handler which adds additional context
            data to errors and exceptions.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Converter">
            <summary>
            Gets the type converter service.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Activator">
            <summary>
            Gets the activator helper class.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.DiagnosticEvents">
            <summary>
            Gets the diagnostic events logger.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Request">
            <summary>
            Gets or sets the initial query request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.RequestAborted">
            <summary>
            Notifies when the connection underlying this request is aborted
            and thus request operations should be cancelled.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.DocumentId">
            <summary>
            Gets or sets a unique identifier for a query document.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.DocumentHash">
            <summary>
            Gets or sets the document hash.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Document">
            <summary>
            Gets or sets the parsed query document.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.IsCachedDocument">
            <summary>
            Defines that the document was retrieved from cache.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.IsPersistedDocument">
            <summary>
            Defines that the document was retrieved from a query storage.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.ValidationResult">
            <summary>
            Gets or sets the document validation result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.IsValidDocument">
            <summary>
            <c>true</c> if the document is valid.
            <c>false</c> if the document was either not validated or of the document is not valid.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.OperationId">
            <summary>
            Gets a unique identifier for a prepared operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Operation">
            <summary>
            Gets or sets the prepared operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Variables">
            <summary>
            Gets or sets the coerced variable values.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Result">
            <summary>
            Gets or sets the execution result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContext.Exception">
            <summary>
            Gets or sets an unexpected execution exception.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IRequestContext.Clone">
            <summary>
            Creates a copy of this request context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HotChocolate.Execution.IRequestContextAccessor">
             <summary>
             The <see cref="T:HotChocolate.Execution.IRequestContextAccessor"/> allows access to the
             <see cref="T:HotChocolate.Execution.IRequestContext"/> during request execution.
            
             Be aware that the <see cref="T:HotChocolate.Execution.IRequestContext"/> is not thread-safe and should
             not be mutated within resolvers.
             </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestContextAccessor.RequestContext">
            <summary>
            Gets the <see cref="T:HotChocolate.Execution.IRequestContext"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IRequestCoreMiddlewareContext">
            <summary>
            This context is available when create a middleware pipeline.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestCoreMiddlewareContext.SchemaName">
            <summary>
            Gets the schema name.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestCoreMiddlewareContext.Services">
            <summary>
            Gets the application level service provider.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestCoreMiddlewareContext.SchemaServices">
            <summary>
            Gets the schema level service provider.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestCoreMiddlewareContext.Options">
            <summary>
            Gets the executor options.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IRequestExecutor">
            <summary>
            This executor processes GraphQL query, mutation and subscription requests for the
            <see cref="P:HotChocolate.Execution.IRequestExecutor.Schema" /> to which it is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestExecutor.Schema">
            <summary>
            Gets the schema to which this executor is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestExecutor.Services">
            <summary>
            Gets the services that are bound to this executor.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IRequestExecutor.Version">
            <summary>
            Gets an ulong representing the executor version.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IRequestExecutor.ExecuteAsync(HotChocolate.Execution.IQueryRequest,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="request" />.
             </summary>
             <param name="request">
             The GraphQL request object.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="request" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.IRequestExecutor.ExecuteBatchAsync(System.Collections.Generic.IEnumerable{HotChocolate.Execution.IQueryRequest},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes the given GraphQL <paramref name="requestBatch" />.
            </summary>
            <param name="requestBatch">
            The GraphQL request batch.
            </param>
            <param name="allowParallelExecution">
            Defines if the executor is allowed to execute the batch in parallel.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a stream of query results.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.IRequestExecutorResolver">
            <summary>
            The request executor resolver manages the configured request executors.
            </summary>
        </member>
        <member name="E:HotChocolate.Execution.IRequestExecutorResolver.RequestExecutorEvicted">
            <summary>
            An event that is raised when a request executor is being evicted.
            The consumers of a request executor shall subscribe to this event
            in order to release once this event is triggered.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IRequestExecutorResolver.GetRequestExecutorAsync(HotChocolate.NameString,System.Threading.CancellationToken)">
            <summary>
            Gets or creates the request executor that is associated with the
            given configuration <paramref name="schemaName" />.
            </summary>
            <param name="schemaName">
            The schema name.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a request executor that is associated with the
            given configuration <paramref name="schemaName" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.IRequestExecutorResolver.EvictRequestExecutor(HotChocolate.NameString)">
            <summary>
            Triggers the eviction and disposal of the execution configuration
            with the specified name.
            It will not immediately remove it but inform the users of the associated
            <see cref="T:HotChocolate.Execution.IRequestExecutor" /> that it is being evicted and that they
            should stop using it for new request.
            </summary>
            <param name="schemaName">
            The schema name.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.Options.ComplexityAnalyzerSettings">
            <summary>
            The complexity settings.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Enable">
            <summary>
            Defines if the complexity analysis is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.MaximumAllowed">
            <summary>
            Gets or sets the maximum allowed complexity.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ApplyDefaults">
            <summary>
            Defines if default cost and multipliers shall be applied to the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultComplexity">
            <summary>
            Gets or sets the complexity that is applied to all fields
            that do not have a cost directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultResolverComplexity">
            <summary>
            Gets or sets the complexity that is applied to async and data
            resolvers if <see cref="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ApplyDefaults"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.ContextDataKey">
            <summary>
            Gets or sets the context data key that that will be used to store
            the calculated complexity on the request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.Calculation">
            <summary>
            Gets or sets the complexity calculation delegate..
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Options.ComplexityAnalyzerSettings.DefaultCalculation(HotChocolate.Execution.Pipeline.Complexity.ComplexityContext)">
            <summary>
            The default complexity calculation algorithm.
            </summary>
            <param name="context">
            The complexity context.
            </param>
            <returns>
            Returns the calculated field complexity.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Options.IComplexityAnalyzerOptionsAccessor">
            <summary>
            The complexity options accessor.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.IComplexityAnalyzerOptionsAccessor.Complexity">
            <summary>
            Gets the complexity analyzer settings.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.IDocumentCacheSizeOptionsAccessor">
            <summary>
            Represents a dedicated options accessor to read the configured query
            cache size.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.IDocumentCacheSizeOptionsAccessor.QueryCacheSize">
            <summary>
            Gets maximum amount of queries that can be cached. The default
            value is <c>100</c>. The minimum allowed value is <c>10</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.IErrorHandlerOptionsAccessor">
            <summary>
            Represents a dedicated options accessor to read the error handler
            configuration.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.IErrorHandlerOptionsAccessor.IncludeExceptionDetails">
            <summary>
            Gets a value indicating whether the <c>GraphQL</c> errors should be
            extended with exception details. The default value is
            <see cref="P:System.Diagnostics.Debugger.IsAttached"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.IInstrumentationOptionsAccessor">
            <summary>
            Represents a dedicated options accessor to read the instrumentation
            configuration.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.IInstrumentationOptionsAccessor.TracingPreference">
            <summary>
            Gets a value indicating whether tracing for performance measurement
            of query requests is enabled. The default value is
            <see cref="F:HotChocolate.Execution.Options.TracingPreference.Never"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.IRequestExecutorOptionsAccessor">
            <summary>
            Represents the entirety of options accessors which are used to provide
            components of the query execution engine access to settings, which were
            provided from the outside, to influence the behavior of the query
            execution engine itself.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.IRequestTimeoutOptionsAccessor">
            <summary>
            Represents a dedicated options accessor to read the configured query
            execution timeout.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.IRequestTimeoutOptionsAccessor.ExecutionTimeout">
            <summary>
            Gets maximum allowed execution time of a query. The default value
            is <c>30</c> seconds. The minimum allowed value is <c>100</c>
            milliseconds.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Options.RequestExecutorOptions">
            <summary>
            Represents the entirety of settings to configure the behavior of the
            query execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.RequestExecutorOptions.ExecutionTimeout">
            <summary>
            Gets or sets maximum allowed execution time of a query. The default
            value is <c>30</c> seconds. The minimum allowed value is <c>100</c>
            milliseconds.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.RequestExecutorOptions.IncludeExceptionDetails">
            <summary>
            Gets or sets a value indicating whether the <c>GraphQL</c> errors
            should be extended with exception details. The default value is
            <see cref="P:System.Diagnostics.Debugger.IsAttached"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.RequestExecutorOptions.Complexity">
            <summary>
            Gets the complexity analyzer settings.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.RequestExecutorOptions.QueryCacheSize">
            <summary>
            Gets or sets the maximum amount of compiled queries that can be cached. The
            default value is <c>100</c>. The minimum allowed value is
            <c>10</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Options.RequestExecutorOptions.TracingPreference">
            <summary>
            Gets or sets a value indicating whether tracing for performance
            measurement of query requests is enabled. The default value is
            <see cref="F:HotChocolate.Execution.Options.TracingPreference.Never"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Pipeline.Complexity.ComplexityCalculation">
            <summary>
            The complexity calculation delegate.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext">
            <summary>
            The context to calculate a field complexity.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.#ctor(HotChocolate.Types.IOutputField,HotChocolate.Language.FieldNode,HotChocolate.Types.CostDirective,System.Int32,System.Int32,System.Int32,System.Int32,HotChocolate.Execution.IVariableValueCollection,HotChocolate.Types.InputParser)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext" />
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Field">
            <summary>
            Gets the field for which the complexity is calculated.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Selection">
            <summary>
            Gets the field selection that references the field in the query.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Complexity">
            <summary>
            Gets the field`s base complexity.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.ChildComplexity">
            <summary>
            Gets the calculated complexity of all child fields.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.Multipliers">
            <summary>
            Gets the multiplier argument names.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.DefaultMultiplier">
            <summary>
            Gets the default multiplier value that is used when no
            multiplier argument has a value.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.FieldDepth">
            <summary>
            Gets the field depth in the query of the current field.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.NodeDepth">
            <summary>
            Gets the selection depth of the syntax tree.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Pipeline.Complexity.ComplexityContext.TryGetArgumentValue``1(System.String,``0@)">
            <summary>
            A helper to resolver a multiplier argument value.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.DefaultTransactionScope">
            <summary>
            Represents the default mutation transaction scope implementation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DefaultTransactionScope.#ctor(HotChocolate.Execution.IRequestContext,System.Transactions.TransactionScope)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.DefaultTransactionScope"/>.
            </summary>
            <param name="context">
            The GraphQL request context.
            </param>
            <param name="transaction">
            The mutation transaction scope.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DefaultTransactionScope.Context">
            <summary>
            Gets GraphQL request context.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DefaultTransactionScope.Transaction">
            <summary>
            Gets the mutation transaction scope.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DefaultTransactionScope.Complete">
            <summary>
            Completes a transaction (commits or discards the changes).
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DefaultTransactionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.DefaultTransactionScopeHandler">
            <summary>
            Represents the default mutation transaction scope handler implementation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DefaultTransactionScopeHandler.Create(HotChocolate.Execution.IRequestContext)">
            <summary>
            Creates a new transaction scope for the current
            request represented by the <see cref="T:HotChocolate.Execution.IRequestContext"/>.
            </summary>
            <param name="context">
            The GraphQL request context.
            </param>
            <returns>
            Returns a new <see cref="T:HotChocolate.Execution.Processing.ITransactionScope"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.DeferredFragment">
            <summary>
            Represents a deprioritized fragment of the query that will be executed after
            the main execution has finished.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredFragment.#ctor(HotChocolate.Execution.Processing.IFragment,System.String,HotChocolate.Path,System.Object,System.Collections.Immutable.IImmutableDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.DeferredFragment"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Fragment">
            <summary>
            Gets the deferred fragment.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Label">
            <summary>
            If this argument label has a value other than null, it will be passed
            on to the result of this defer directive. This label is intended to
            give client applications a way to identify to which fragment a deferred
            result belongs to.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Path">
            <summary>
            Gets the result path into which this deferred fragment shall be patched.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Parent">
            <summary>
            Gets the parent / source value.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.ScopedContextData">
            <summary>
            Gets the preserved scoped context from the parent resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Next">
            <inheritdoc/>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredFragment.Previous">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredFragment.ExecuteAsync(HotChocolate.Execution.Processing.IOperationContext)">
            <inheritdoc/>
        </member>
        <member name="T:HotChocolate.Execution.Processing.DeferredStream">
            <summary>
            Represents the work to executed the deferred elements of a stream.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredStream.#ctor(HotChocolate.Execution.Processing.ISelection,System.String,HotChocolate.Path,System.Object,System.Int32,System.Collections.Generic.IAsyncEnumerator{System.Object},System.Collections.Immutable.IImmutableDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.DeferredFragment"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Selection">
            <summary>
            Gets the selection of the streamed field.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Label">
            <summary>
            If this argument label has a value other than null, it will be passed
            on to the result of this defer directive. This label is intended to
            give client applications a way to identify to which fragment a deferred
            result belongs to.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Path">
            <summary>
            Gets the result path into which this deferred fragment shall be patched.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Index">
            <summary>
            Gets the index of the last element.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Parent">
            <summary>
            Gets the parent / source value.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Enumerator">
            <summary>
            Gets the enumerator to retrieve the payloads of the stream.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.ScopedContextData">
            <summary>
            Gets the preserved scoped context from the parent resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Next">
            <inheritdoc/>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredStream.Previous">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredStream.ExecuteAsync(HotChocolate.Execution.Processing.IOperationContext)">
            <inheritdoc/>
        </member>
        <member name="P:HotChocolate.Execution.Processing.DeferredWorkBacklog.HasWork">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredWorkBacklog.TryTake(HotChocolate.Execution.Processing.IDeferredExecutionTask@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.DeferredWorkBacklog.Register(HotChocolate.Execution.Processing.IDeferredExecutionTask)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.Processing.FragmentInfo">
            <summary>
            Represents an aligned interface for fragments to the execution engine.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.FragmentInfo.#ctor(HotChocolate.Types.IType,HotChocolate.Language.SelectionSetNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},HotChocolate.Language.InlineFragmentNode,HotChocolate.Language.FragmentDefinitionNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.FragmentInfo"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.FragmentInfo.TypeCondition">
            <summary>
            Gets the fragment type condition.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.FragmentInfo.SelectionSet">
            <summary>
            Gets the fragment selection set.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.FragmentInfo.Directives">
            <summary>
            Gets the directives of this fragment.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.FragmentInfo.InlineFragment">
            <summary>
            Gets the associated inline fragment syntax node.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.FragmentInfo.FragmentDefinition">
            <summary>
            Gets the associated fragment definition syntax node.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IDeferredExecutionTask">
            <summary>
            Represents a deprioritized part of the query that will be executed after
            the main execution has finished.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IDeferredExecutionTask.ExecuteAsync(HotChocolate.Execution.Processing.IOperationContext)">
            <summary>
            Executes the deferred execution task with the specified
            <paramref name="operationContext"/>.
            </summary>
            <param name="operationContext">
            The operation context.
            </param>
            <returns>
            The query result that the deferred execution task produced.
            </returns>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IDeferredExecutionTask.Next">
            <summary>
            Next and previous are properties that are used by the execution engine to
            track the execution state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IDeferredExecutionTask.Previous">
            <summary>
            Next and previous are properties that are used by the execution engine to
            track the execution state.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IDeferredWorkBacklog">
            <summary>
            Represents a backlog for deferred work.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IDeferredWorkBacklog.HasWork">
            <summary>
            <c>true</c> if there are no more deferred tasks in the backlog.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IDeferredWorkBacklog.TryTake(HotChocolate.Execution.Processing.IDeferredExecutionTask@)">
            <summary>
            Tries to take the next task from the backlog.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IDeferredWorkBacklog.Register(HotChocolate.Execution.Processing.IDeferredExecutionTask)">
            <summary>
            Adds new work to the backlog.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IOperationContext">
            <summary>
            The internal operation execution context.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Schema">
            <summary>
            Gets the schema on which the query is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Services">
            <summary>
            Gets the request scoped services
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.ErrorHandler">
            <summary>
            Gets the error handler which adds additional context
            data to errors and exceptions.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.DiagnosticEvents">
            <summary>
            Gets the diagnostic events.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Operation">
            <summary>
            Gets the operation that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.QueryPlan">
            <summary>
            Gets the query execution plan.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.RootValue">
            <summary>
            Gets the value representing the instance of the
            <see cref="!:IPreparedOperation.RootType" />
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Variables">
            <summary>
            Gets the coerced variable values for the current operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.RequestAborted">
            <summary>
            Gets a cancellation token is used to signal
            if the request has be aborted.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Activator">
            <summary>
            Gets the activator helper class.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Converter">
            <summary>
            Gets the type converter service.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Result">
            <summary>
            The result helper which provides utilities to build up the result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.Scheduler">
            <summary>
            The work scheduler organizes the processing of request tasks.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOperationContext.ResolverTasks">
            <summary>
            Gets the resolver task pool.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IOperationContext.CollectFields(HotChocolate.Language.SelectionSetNode,HotChocolate.Types.ObjectType)">
            <summary>
            Get the fields for the specified selection set according to the execution plan.
            The selection set will show all possibilities and needs to be pre-processed.
            </summary>
            <param name="selectionSet">
            The selection set syntax for which we want to get the compiled selection set.
            </param>
            <param name="typeContext">
            The type context.
            </param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IOperationContext.RegisterForCleanup(System.Action)">
            <summary>
            Register cleanup tasks that will be executed after resolver execution is finished.
            </summary>
            <param name="action">
            Cleanup action.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IOperationContext.GetQueryRoot``1">
            <summary>
            Get the query root instance.
            </summary>
            <typeparam name="T">
            The type of the query root.
            </typeparam>
            <returns>
            Returns the query root instance.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IOptionalSelection">
            <summary>
            Represents selections with inclusion conditions.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOptionalSelection.InclusionKind">
            <summary>
            Defines when this selection is included for processing.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOptionalSelection.IsInternal">
            <summary>
            Defines that this selection is only needed for internal processing.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IOptionalSelection.IsConditional">
            <summary>
            Defines that this selection is conditional and will not always be included.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IOptionalSelection.IsIncluded(HotChocolate.Execution.IVariableValueCollection,System.Boolean)">
            <summary>
            Defines if this selection is included into the selection set with the following
            set of <paramref name="variableValues"/>.
            If <see cref="P:HotChocolate.Execution.Processing.IOptionalSelection.InclusionKind" /> is <see cref="F:HotChocolate.Execution.Processing.SelectionInclusionKind.Always"/>
            this method will always return true.
            </summary>
            <param name="variableValues">
            The variable values of the execution context.
            </param>
            <param name="allowInternals">
            Allow internal selections to be marked as included.
            </param>
            <returns>
            Return <c>true</c> if this selection is visible with the current set of variables;
            otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IPreparedOperation">
            <summary>
            A prepared operations is an already compiled and optimized variant
            of the operation specified in the query document that was provided
            in the request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IPreparedOperation.Id">
            <summary>
            Gets the internal unique identifier for this operation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IPreparedOperation.GetRootSelectionSet">
            <summary>
            Gets the prepared root selections for this operation.
            </summary>
            <returns>
            Returns the prepared root selections for this operation.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IPreparedOperation.GetSelectionSet(HotChocolate.Language.SelectionSetNode,HotChocolate.Types.IObjectType)">
            <summary>
            Gets the prepared selections for the specified
            selection set under the specified type context.
            </summary>
            <param name="selectionSet">
            The selection set for which the selections shall be collected.
            </param>
            <param name="typeContext">
            The type context under which the selections shall be collected.
            </param>
            <returns>
            Returns the prepared selections for the specified
            selection set under the specified type context.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IPreparedOperation.GetPossibleTypes(HotChocolate.Language.SelectionSetNode)">
            <summary>
            Gets the types that are possible for the specified <paramref name="selectionSet"/>.
            </summary>
            <param name="selectionSet">
            The selection set for which the possible types shall be inspected.
            </param>
            <returns>
            Returns the types that are possible for the specified <paramref name="selectionSet"/>.
            </returns>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IPreparedOperation.SelectionVariants">
            <summary>
            Gets all selection variants of this operation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IPreparedOperation.Print">
            <summary>
            Prints the prepared operation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IResultHelper.AddError(HotChocolate.IError,HotChocolate.Language.FieldNode)">
            <summary>
            Adds an error thread-safe to the result object.
            </summary>
            <param name="error">The error that shall be added.</param>
            <param name="selection">The affected field.</param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IResultHelper.AddErrors(System.Collections.Generic.IEnumerable{HotChocolate.IError},HotChocolate.Language.FieldNode)">
            <summary>
            Adds a errors thread-safe to the result object.
            </summary>
            <param name="errors">The errors that shall be added.</param>
            <param name="selection">The affected field.</param>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ISelection">
            <summary>
            Represents a field selection during execution.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.Id">
            <summary>
            Gets an operation unique identifier of this selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.Strategy">
            <summary>
            Gets the execution kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.DeclaringType">
            <summary>
            The type that declares the field that is selected by this selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.SelectionSet">
             <summary>
             If this selection selects a field that returns a composite type
             then this selection set represents the fields that are selected
             on that returning composite type.
            
             If this selection however selects a leaf field than this
             selection set will be <c>null</c>.
             </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.ResolverPipeline">
            <summary>
            The compiled resolver pipeline for this selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.PureResolver">
            <summary>
            The compiled pure resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.Arguments">
            <summary>
            The arguments that have been pre-coerced for this field selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.IsStreamable">
            <summary>
            Indicates that this field can be streamed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.MaybeStream">
            <summary>
            Indicates that the result of this resolver might be a stream.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelection.IsList">
            <summary>
            Indicates if the selection return type is a list type.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ISelection.CreateStream(System.Object)">
            <summary>
            Creates a enumerable from a streamable selection to allow the execution engine to
            stream the field result.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ISelectionOptimizer">
            <summary>
            A selection optimizer can add additional internal selections,
            apply conditions to selections, remove selections or optimize fragments.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ISelectionOptimizer.OptimizeSelectionSet(HotChocolate.Execution.Processing.SelectionOptimizerContext)">
            <summary>
            Optimize a selection-set for the execution engine.
            </summary>
            <param name="context">
            The optimizer context.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ISelectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext,HotChocolate.Language.InlineFragmentNode)">
            <summary>
            Defines if a fragment can be deferred.
            </summary>
            <param name="context">
            The optimizer context.
            </param>
            <param name="fragment">
            The fragment that is deferrable.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ISelectionOptimizer.AllowFragmentDeferral(HotChocolate.Execution.Processing.SelectionOptimizerContext,HotChocolate.Language.FragmentSpreadNode,HotChocolate.Language.FragmentDefinitionNode)">
            <summary>
            Defines if a fragment can be deferred.
            </summary>
            <param name="context">
            The optimizer context.
            </param>
            <param name="fragmentSpread">
            The fragment spread.
            </param>
            <param name="fragmentDefinition">
            The fragment definition.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ISelectionSet">
            <summary>
            A selection set is primarily composed of field selections.
            When needed a selection set can preserve fragments so that the execution engine
            can branch the processing of these fragments.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelectionSet.IsConditional">
            <summary>
            Defines if this list needs post processing for skip and include.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelectionSet.Selections">
            <summary>
            This list contains the selections that shall be executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISelectionSet.Fragments">
            <summary>
            This list contains fragments if any were preserved for execution.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ISubscription">
            <summary>
            Represents a GraphQL subscription instance within the execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISubscription.Id">
            <summary>
            Gets the internal subscription ID.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ISubscription.Operation">
            <summary>
            The compiled subscription operation.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ITaskStatistics">
            <summary>
            The task statistics keep track of the work in the execution engine.
            </summary>
        </member>
        <member name="E:HotChocolate.Execution.Processing.ITaskStatistics.StateChanged">
            <summary>
            Signals that the stats have been updated.
            </summary>
        </member>
        <member name="E:HotChocolate.Execution.Processing.ITaskStatistics.AllTasksCompleted">
            <summary>
            Signals that all task have been completed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ITaskStatistics.NewTasks">
            <summary>
            Gets the amount of new tasks that are ready to be processed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ITaskStatistics.RunningTasks">
            <summary>
            Gets the amount of running tasks.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ITaskStatistics.AllTasks">
            <summary>
            Gets the amount all tasks known to the execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ITaskStatistics.CompletedTasks">
            <summary>
            Gets the amount of completed tasks.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ITaskStatistics.IsCompleted">
            <summary>
            Defines if the execution is completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ITaskStatistics.TaskCreated">
            <summary>
            Signals to the execution engine that a new task was registered.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ITaskStatistics.TaskStarted">
            <summary>
            Signals to the execution engine that a new task was started.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ITaskStatistics.TaskCompleted">
            <summary>
            Signals to the execution engine that a task was completed.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ITransactionScope">
            <summary>
            Represents a mutation transaction scope.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ITransactionScope.Complete">
            <summary>
            Completes a transaction (commits or discards the changes).
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.ITransactionScopeHandler">
            <summary>
            Allows to make mutation execution transactional.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.ITransactionScopeHandler.Create(HotChocolate.Execution.IRequestContext)">
            <summary>
            Creates a new transaction scope for the current
            request represented by the <see cref="T:HotChocolate.Execution.IRequestContext"/>.
            </summary>
            <param name="context">
            The GraphQL request context.
            </param>
            <returns>
            Returns a new <see cref="T:HotChocolate.Execution.Processing.ITransactionScope"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.IWorkScheduler">
            <summary>
            The work scheduler organizes the processing of request tasks.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IWorkScheduler.DeferredWork">
            <summary>
            Gets the backlog of the task that shall be processed after
            all the main tasks have been executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.IWorkScheduler.IsCompleted">
            <summary>
            Defines if the execution is completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IWorkScheduler.Register(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Registers work with the task backlog.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IWorkScheduler.Register(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IExecutionTask})">
            <summary>
            Registers work with the task backlog.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IWorkScheduler.Complete(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Complete a task
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IWorkScheduler.ExecuteAsync">
            <summary>
            Execute the work.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.IWorkScheduler.Reset">
            <summary>
            Resets the execution state.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.NoOpTransactionScope">
            <summary>
            This transaction scope represents a non transactional mutation transaction scope.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.NoOpTransactionScopeHandler">
            <summary>
            This transaction scope handler represents creates
            a non transactional mutation transaction scope.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.OperationCompiler.CompilerContext.SelectionPath">
            <summary>
            The selection path represents the response name path.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.Plan.ExecutionStep">
            <summary>
            Represents an execution step within a query plan.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.ExecutionStep.Id">
            <summary>
            Gets the unique identifier for this execution step within its query plan.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.ExecutionStep.Name">
            <summary>
            Gets a name for this execution step.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.ExecutionStep.Parent">
            <summary>
            Gets the parent execution step.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.ExecutionStep.Next">
            <summary>
            Gets the next execution step within the parent.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.ExecutionStep.Steps">
            <summary>
            Gets a list of child steps.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.ExecutionStep.TryActivate(HotChocolate.Execution.Processing.Plan.IQueryPlanState)">
            <summary>
            Tries to activate this execution step for the current request.
            If the activation returns <c>false</c> and it is
            not part of the current request and can be skipped.
            </summary>
            <param name="state">
            The current query plan execution state.
            </param>
            <returns>
            Returns <c>true</c> if this step is part of the current request;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.ExecutionStep.CompleteTask(HotChocolate.Execution.Processing.Plan.IQueryPlanState,HotChocolate.Execution.IExecutionTask)">
            <summary>
            Completes a task that was spawned from this execution step.
            </summary>
            <param name="state">
            The current query plan execution state.
            </param>
            <param name="task">
            The execution task that was spawned from the execution task.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.ExecutionStep.IsOwningTask(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Defines if this execution step owns the given task.
            </summary>
            <param name="task">
            The execution task that is evaluated.
            </param>
            <returns>
            <c>true</c> if the task is owned by this step; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.Plan.IQueryPlanState">
            <summary>
            The state of a query plan execution.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.IQueryPlanState.Context">
            <summary>
            Gets the current operation context.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.IQueryPlanState.Selections">
            <summary>
            Gets a set representing the selections that were registered for execution.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.IQueryPlanState.RegisterUnsafe(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IExecutionTask})">
            <summary>
            Registers work with the task backlog.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.Plan.QueryPlanNode">
            <summary>
            Represents a executable part of the query tree.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanNode.Strategy">
            <summary>
            Gets the strategy with which this node can be executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanNode.Parent">
            <summary>
            Gets the parent node.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanNode.Nodes">
            <summary>
            Gets the child nodes.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.AddNode(HotChocolate.Execution.Processing.Plan.QueryPlanNode)">
            <summary>
            Adds a child node.
            </summary>
            <param name="node">The child node.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="node"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.RemoveNode(HotChocolate.Execution.Processing.Plan.QueryPlanNode)">
            <summary>
            Removes the specified child <paramref name="node"/>.
            </summary>
            <param name="node">
            The child node that shall be removed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="node"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.TryTakeNode(HotChocolate.Execution.Processing.Plan.QueryPlanNode@)">
            <summary>
            Tries to take the first child node.
            If this node has child node the first child node is removed and
            returned through the output parameter <paramref name="node"/>.
            </summary>
            <param name="node">The removed child node.</param>
            <returns>
            <c>true</c> if a child node could be removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.CreateStep">
            <summary>
            Creates an executable query step that for the query plan.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.Serialize(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Serializes the current node to JSON.
            </summary>
            <param name="writer">
            The JSON writer that is used for serializing this node.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanNode.Serialize">
            <summary>
            Serializes the current node to a GraphQL extension response structure.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanStateMachine.IsCompleted">
            <summary>
            Defines if processing the query plan is completed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanStateMachine.Strategy">
            <summary>
            The current execution strategy for the main task processor.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Plan.QueryPlanStateMachine.IsSerial">
            <summary>
            Defines if the main processor execution strategy is serial.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanStateMachine.Initialize(HotChocolate.Execution.Processing.Plan.IQueryPlanState,HotChocolate.Execution.Processing.Plan.QueryPlan)">
            <summary>
            Initializes the state machine.
            </summary>
            <param name="state">
            The operation context.
            </param>
            <param name="plan">
            The query plan.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Plan.QueryPlanStateMachine.State.ToString">
            <summary>
            Debug visualization.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ResultList.IsNullable">
            <summary>
            Defines if the elements of this list are nullable.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.ResultMapList.IsNullable">
            <summary>
            Defines if the elements of this list are nullable.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.RootValueResolver">
            <summary>
            This helper will resolve the initial value for the execution engine.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.Selection">
            <summary>
            Represents a field selection during execution.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.Id">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.Strategy">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.Field">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.Type">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.TypeKind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.SyntaxNode">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.SyntaxNodes">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.ResponseName">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.ResolverPipeline">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.PureResolver">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.Arguments">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.IsStreamable">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.MaybeStream">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.IsList">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Selection.InclusionKind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.Selection.IsIncluded(HotChocolate.Execution.IVariableValueCollection,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.Selection.CreateStream(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.Processing.SelectionExecutionStrategy">
            <summary>
            Specifies how the selection is executed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionExecutionStrategy.Default">
            <summary>
            Defines that the default resolver pipeline shall be used.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionExecutionStrategy.Serial">
            <summary>
            Defines that the default resolver pipeline shall be used
            but that the resolver can only be executed serially.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionExecutionStrategy.Pure">
            <summary>
            Defines that the selection has a side-effect free pure resolver.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.SelectionInclusionKind">
            <summary>
            Defines when a selection is included for processing.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionInclusionKind.Always">
            <summary>
            The selection is always included for processing.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionInclusionKind.Conditional">
            <summary>
            The selection is only included if certain conditions are met.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionInclusionKind.Internal">
            <summary>
            The selection is only included for internal processing and
            will not appear in the result set.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.Processing.SelectionInclusionKind.InternalConditional">
            <summary>
            The selection is included for internal processing when certain
            conditions are met and will not appear in the result set.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.SelectionOptimizerContext">
            <summary>
            The selection optimizer context
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SelectionOptimizerContext.#ctor(HotChocolate.Execution.Processing.OperationCompiler,HotChocolate.Execution.Processing.OperationCompiler.CompilerContext)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.SelectionOptimizerContext"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionOptimizerContext.Schema">
            <summary>
            Gets the schema for which the query is compiled.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionOptimizerContext.Path">
            <summary>
            Gets the field execution stack.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionOptimizerContext.Type">
            <summary>
            Gets the type context of the current selection-set.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionOptimizerContext.SelectionSet">
            <summary>
            Gets the selection-set.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionOptimizerContext.Fields">
            <summary>
            Gets the field set representing the compiled selection-set.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SelectionOptimizerContext.CompileResolverPipeline(HotChocolate.Types.IObjectField,HotChocolate.Language.FieldNode)">
            <summary>
            Allows to compile the field resolver pipeline for a field.
            </summary>
            <param name="field">The field.</param>
            <param name="selection">The selection of the field.</param>
            <returns>
            Returns a <see cref="T:HotChocolate.Resolvers.FieldDelegate" /> representing the field resolver pipeline.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SelectionOptimizerContext.GetNextId">
            <summary>
            Gets the next operation unique selection id.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.SelectionSet">
            <summary>
            A selection set is primarily composed of field selections.
            When needed a selection set can preserve fragments so that the execution engine
            can branch the processing of these fragments.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SelectionSet.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.Processing.ISelection},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.SelectionSet"/>.
            </summary>
            <param name="selections">
            A list of executable field selections.
            </param>
            <param name="isConditional">
            Defines if this list needs post processing for skip and include.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SelectionSet.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.Processing.ISelection},System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.Processing.IFragment},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.Processing.SelectionSet"/>.
            </summary>
            <param name="selections">
            A list of executable field selections.
            </param>
            <param name="fragments">
            A list of preserved fragments that can be used to branch of
            some of the execution.
            </param>
            <param name="isConditional">
            Defines if this list needs post processing for skip and include.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionSet.IsConditional">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionSet.Selections">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionSet.Fragments">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.SelectionSet.Empty">
            <summary>
            Gets an empty selection set.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.SubscriptionExecutor.Subscription.SubscribeAsync(Microsoft.Extensions.ObjectPool.ObjectPool{HotChocolate.Execution.Processing.OperationContext},HotChocolate.Execution.Processing.QueryExecutor,HotChocolate.Execution.IRequestContext,HotChocolate.Execution.Processing.Plan.QueryPlan,HotChocolate.Types.ObjectType,HotChocolate.Execution.Processing.ISelectionSet,System.Func{System.Object},HotChocolate.Execution.Instrumentation.IExecutionDiagnosticEvents)">
            <summary>
            Subscribes to the pub/sub-system and creates a new <see cref="T:HotChocolate.Execution.Processing.SubscriptionExecutor.Subscription"/>
            instance representing that subscriptions.
            </summary>
            <param name="operationContextPool">
            The operation context pool to rent context pools for execution.
            </param>
            <param name="queryExecutor">
            The query executor to process event payloads.
            </param>
            <param name="requestContext">
            The original request context.
            </param>
            <param name="queryPlan">
            The subscription query plan.
            </param>
            <param name="subscriptionType">
            The object type that represents the subscription.
            </param>
            <param name="rootSelections">
            The operation selection set.
            </param>
            <param name="resolveQueryRootValue">
            A delegate to resolve the subscription instance.
            </param>
            <param name="executionDiagnosticsEvents">
            The internal diagnostic events to report telemetry.
            </param>
            <returns>
            Returns a new subscription instance.
            </returns>
        </member>
        <member name="P:HotChocolate.Execution.Processing.SubscriptionExecutor.Subscription.Id">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.SubscriptionExecutor.Subscription.Operation">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.SubscriptionExecutor.Subscription.OnEvent(System.Object)">
            <summary>
            OnEvent is called whenever the event stream yields a payload and triggers an
            execution of the subscription query.
            </summary>
            <param name="payload">
            The event stream payload.
            </param>
            <returns>
            Returns a query result which will be enqueued to the response stream.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.Processing.Tasks.ExecutionTaskPool`1">
            <summary>
             A pool of objects. Buffers a set of objects to ensure fast, thread safe object pooling
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ExecutionTaskPool`1.Get">
            <summary>
             Gets an object from the buffer if one is available, otherwise get a new buffer
             from the pool one.
            </summary>
            <returns>A <see cref="T:HotChocolate.Execution.Processing.Tasks.ResolverTask"/>.</returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ExecutionTaskPool`1.Return(`0)">
            <summary>
             Return an object from the buffer if one is available. If the buffer is full
             return the buffer to the pool
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.ResolverContext">
            <summary>
            Gets access to the resolver context for this task.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.DiagnosticEvents">
            <summary>
            Gets access to the diagnostic events.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.Selection">
            <summary>
            Gets the selection for which a resolver is executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.Status">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.Next">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.Previous">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.ResultMap">
            <summary>
            Gets access to the internal result map into which the task will write the result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.CompletedValue">
            <summary>
            Gets the completed value of this task.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.State">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.IsSerial">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.IsRegistered">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.Processing.Tasks.ResolverTask.ChildTasks">
            <summary>
            Tasks that were created through the field completion.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.BeginExecute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.CompleteValue(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Completes the resolver result.
            </summary>
            <param name="success">Defines if the resolver succeeded without errors.</param>
            <param name="cancellationToken">The execution cancellation token.</param>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.Initialize(HotChocolate.Execution.Processing.IOperationContext,HotChocolate.Execution.Processing.ISelection,HotChocolate.Execution.Processing.ResultMap,System.Int32,System.Object,HotChocolate.Path,System.Collections.Immutable.IImmutableDictionary{System.String,System.Object})">
            <summary>
            Initializes this task after it is retrieved from its pool.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.Reset">
            <summary>
            Resets the resolver task before returning it to the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Execution.Processing.Tasks.ResolverTask.Return">
            <summary>
            Returns the task back to the pool.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.Processing.VariableRewriter">
            <summary>
            The variable rewriter is a utility that rewrites a value node and replaces all
            occurrences of <see cref="T:HotChocolate.Language.VariableNode" /> with concrete <see cref="T:HotChocolate.Language.IValueNode" />.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Processing.VariableRewriter.Rewrite(HotChocolate.Language.IValueNode,HotChocolate.Types.IType,HotChocolate.Language.IValueNode,HotChocolate.Execution.IVariableValueCollection)">
            <summary>
            Rewrites <paramref name="node" /> and replaces all occurrences of
            <see cref="T:HotChocolate.Language.VariableNode" /> with concrete <see cref="T:HotChocolate.Language.IValueNode" />
            from the <paramref name="variableValues" />.
            </summary>
            <param name="node">
            The value that shall be rewritten.
            </param>
            <param name="type">
            The value type.
            </param>
            <param name="defaultValue">
            The argument default value.
            </param>
            <param name="variableValues">
            The variable values.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.IValueNode" /> that has no variables.
            </returns>
        </member>
        <member name="P:HotChocolate.Execution.Processing.WorkScheduler.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="P:HotChocolate.Execution.Processing.WorkScheduler.DeferredWork">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Processing.WorkScheduler.Register(HotChocolate.Execution.IExecutionTask)">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Execution.Processing.WorkScheduler.Register(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IExecutionTask})">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Execution.Processing.WorkScheduler.Complete(HotChocolate.Execution.IExecutionTask)">
            <inheritdoc/>
        </member>
        <member name="T:HotChocolate.Execution.RequestCoreMiddleware">
            <summary>
            Defines request middleware that can be added to the GraphQL request pipeline.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.RequestDelegate">
            <summary>
            A function that can process a GraphQL request.
            </summary>
            <param name="context">The <see cref="T:HotChocolate.Execution.IRequestContext"/> for the request.</param>
            <returns>A task that represents the completion of request processing.</returns>
        </member>
        <member name="T:HotChocolate.Execution.RequestExecutorProxy">
            <summary>
            The <see cref="T:HotChocolate.Execution.RequestExecutorProxy"/> is a helper class that represents a executor for
            one specific schema and handles the resolving and hot-swapping the specific executor.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorProxy.ExecuteAsync(HotChocolate.Execution.IQueryRequest,System.Threading.CancellationToken)">
             <summary>
             Executes the given GraphQL <paramref name="request" />.
             </summary>
             <param name="request">
             The GraphQL request object.
             </param>
             <param name="cancellationToken">
             The cancellation token.
             </param>
             <returns>
             Returns the execution result of the given GraphQL <paramref name="request" />.
            
             If the request operation is a simple query or mutation the result is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a query or mutation where data is deferred, streamed or
             includes live data the result is a <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result
             that the <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a <see cref="T:HotChocolate.Execution.IQueryResult" />.
            
             If the request operation is a subscription the result is a
             <see cref="T:HotChocolate.Execution.IResponseStream" /> where each result that the
             <see cref="T:HotChocolate.Execution.IResponseStream" /> yields is a
             <see cref="T:HotChocolate.Execution.IQueryResult" />.
             </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorProxy.ExecuteBatchAsync(System.Collections.Generic.IEnumerable{HotChocolate.Execution.IQueryRequest},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Executes the given GraphQL <paramref name="requestBatch" />.
            </summary>
            <param name="requestBatch">
            The GraphQL request batch.
            </param>
            <param name="allowParallelExecution">
            Defines if the executor is allowed to execute the batch in parallel.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a stream of query results.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorProxy.GetSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Resolves the schema for the specified schema name.
            </summary>
            <param name="cancellationToken">
            The request cancellation token.
            </param>
            <returns>
            Returns the resolved schema.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.RequestExecutorProxy.GetRequestExecutorAsync(System.Threading.CancellationToken)">
            <summary>
            Resolves the executor for the specified schema name.
            </summary>
            <param name="cancellationToken">
            The request cancellation token.
            </param>
            <returns>
            Returns the resolved schema.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.RequestMiddleware">
            <summary>
            Defines request middleware that can be added to the GraphQL request pipeline.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer.#ctor(System.Boolean,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer" />.
            </summary>
            <param name="indented">
            Defines whether the underlying <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding
            white space between property names and values.
            By default, the JSON is written without any extra white space.
            </param>
            <param name="encoder">
            Gets or sets the encoder to use when escaping strings, or null to use the default encoder.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer.#ctor(HotChocolate.Execution.Serialization.JsonQueryResultSerializer)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Serialization.JsonArrayResponseStreamSerializer" />.
            </summary>
            <param name="serializer">
            The serializer that shall be used to serialize results.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.Serialization.JsonQueryResultSerializer.#ctor(System.Boolean,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Serialization.JsonQueryResultSerializer" />.
            </summary>
            <param name="indented">
            Defines whether the underlying <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding
            white space between property names and values.
            By default, the JSON is written without any extra white space.
            </param>
            <param name="encoder">
            Gets or sets the encoder to use when escaping strings, or null to use the default encoder.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Serialization.JsonQueryResultSerializer.Serialize(HotChocolate.Execution.IQueryResult,System.Buffers.IBufferWriter{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Serialization.JsonQueryResultSerializer.SerializeAsync(HotChocolate.Execution.IQueryResult,System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer.#ctor(System.Boolean,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer" />.
            </summary>
            <param name="indented">
            Defines whether the underlying <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding
            white space between property names and values.
            By default, the JSON is written without any extra white space.
            </param>
            <param name="encoder">
            Gets or sets the encoder to use when escaping strings, or null to use the default encoder.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer.#ctor(HotChocolate.Execution.IQueryResultSerializer)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.Serialization.MultiPartResponseStreamSerializer" />.
            </summary>
            <param name="queryResultSerializer">
            The serializer that shall be used to serialize query results.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="queryResultSerializer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.InternalSchemaServiceCollectionExtensions.GetCombinedServices(System.IServiceProvider)">
            <summary>
            Gets a service provided that represents the combined services from the schema services
            and application services.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions">
            <summary>
            Extension methods for configuring an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.ISchemaBuilder})">
            <summary>
            Adds a delegate that will be used to configure a named <see cref="T:HotChocolate.ISchema"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="configureSchema">
            A delegate that is used to configure an <see cref="T:HotChocolate.ISchema"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchemaAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{HotChocolate.ISchemaBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate that will be used to configure a named <see cref="T:HotChocolate.ISchema"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="configureSchema">
            A delegate that is used to configure an <see cref="T:HotChocolate.ISchema"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchema(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{System.IServiceProvider,HotChocolate.ISchemaBuilder})">
            <summary>
            Adds a delegate that will be used to configure a named <see cref="T:HotChocolate.ISchema"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="configureSchema">
            A delegate that is used to configure an <see cref="T:HotChocolate.ISchema"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
            <remarks>
            The <see cref="T:System.IServiceProvider"/> provided to <paramref name="configureSchema"/>
            will be the same application's root service provider instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureSchemaAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.ISchemaBuilder,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate that will be used to configure a named <see cref="T:HotChocolate.ISchema"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="configureSchema">
            A delegate that is used to configure an <see cref="T:HotChocolate.ISchema"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
            <remarks>
            The <see cref="T:System.IServiceProvider"/> provided to <paramref name="configureSchema"/>
            will be the same application's root service provider instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptions(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Execution.Options.RequestExecutorOptions})">
            <summary>
            Adds a delegate that will be used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <param name="modify">
            A delegate that is used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptionsAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{HotChocolate.Execution.Options.RequestExecutorOptions,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate that will be used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="modify">
            A delegate that is used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure
            a schema and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptions(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{System.IServiceProvider,HotChocolate.Execution.Options.RequestExecutorOptions})">
            <summary>
            Adds a delegate that will be used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="modify">
            A delegate that is used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a
            schema and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ModifyRequestOptionsAsync(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Execution.Options.RequestExecutorOptions,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})">
            <summary>
            Adds a delegate that will be used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="modify">
            A delegate that is used to modify the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a
            schema and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.SetRequestOptions(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{HotChocolate.Execution.Options.RequestExecutorOptions})">
            <summary>
            Adds a delegate that will be used to create the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="factory">
            A delegate that is used to create the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a
            schema and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.SetRequestOptions(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Execution.Options.RequestExecutorOptions})">
            <summary>
            Adds a delegate that will be used to create the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="factory">
            A delegate that is used to create the <see cref="T:HotChocolate.Execution.Options.RequestExecutorOptions"/>.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a
            schema and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.ConfigureResolverCompiler(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Execution.Configuration.IResolverCompilerBuilder})">
            <summary>
            Configures the resolver compiler.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="configure">
            A delegate that is to configure the resolver compiler.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.RegisterService``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.ServiceKind)">
            <summary>
            Registers a well-known service with the resolver compiler.
            The service does no longer need any annotation in the resolver.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="kind">
            The service kind defines the way a service is injected and handled by the execution engine.
            </param>
            <typeparam name="TService">
            The service type.
            </typeparam>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTransactionScopeHandler``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a custom transaction scope handler to the schema.
            </summary>
            <param name="builder">
            The request executor builder.
            </param>
            <typeparam name="T">
            The concrete type of the transaction scope handler.
            </typeparam>
            <returns>
            The request executor builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="builder"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddTransactionScopeHandler(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Execution.Processing.ITransactionScopeHandler})">
            <summary>
            Adds a custom transaction scope handler to the schema.
            </summary>
            <param name="builder">
            The request executor builder.
            </param>
            <param name="create">
            A factory to create the transaction scope.
            </param>
            <returns>
            The request executor builder.
            </returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddDefaultTransactionScopeHandler(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds the <see cref="T:HotChocolate.Execution.Processing.DefaultTransactionScopeHandler"/> which uses
            <see cref="T:System.Transactions.TransactionScope"/> for mutation transactions.
            </summary>
            <param name="builder">
            The request executor builder.
            </param>
            <returns>
            The request executor builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="builder"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Execution.RequestCoreMiddleware)">
            <summary>
            Adds a delegate that will be used to create a middleware for the execution pipeline.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <param name="middleware">A delegate that is used to create a middleware for the execution pipeline.</param>
            <returns>An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema and its execution.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Execution.RequestMiddleware)">
            <summary>
            Adds a delegate that will be used to create a middleware for the execution pipeline.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <param name="middleware">A delegate that is used to create a middleware for the execution pipeline.</param>
            <returns>An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema and its execution.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.UseRequest``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a type that will be used to create a middleware for the execution pipeline.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <param name="middleware">A type that is used to create a middleware for the execution pipeline.</param>
            <returns>An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema and its execution.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Boolean)">
            <summary>
            Adds a query validation visitor to the schema.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="isCacheable">
            Defines if the result of this rule can be cached and reused on consecutive
            validations of the same GraphQL request document.
            </param>
            <typeparam name="T">
            The type of the validator.
            </typeparam>
            <returns>
            Returns an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to chain
            configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationVisitor``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Validation.Options.ValidationOptions,``0},System.Boolean)">
            <summary>
            Adds a query validation visitor to the schema.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="factory">
            The factory that creates the validator instance.
            </param>
            <param name="isCacheable">
            Defines if the result of this rule can be cached and reused on consecutive
            validations of the same GraphQL request document.
            </param>
            <typeparam name="T">
            The type of the validator.
            </typeparam>
            <returns>
            Returns an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to chain
            configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationRule``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a query validation visitor to the schema.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <typeparam name="T">
            The type of the validator.
            </typeparam>
            <returns>
            Returns an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to chain
            configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddValidationRule``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Validation.Options.ValidationOptions,``0})">
            <summary>
            Adds a query validation rule to the schema.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="factory">
            The factory that creates the validator instance.
            </param>
            <typeparam name="T">
            The type of the validator.
            </typeparam>
            <returns>
            Returns an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to chain
            configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AddIntrospectionAllowedRule(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a validation rule that only allows requests to use `__schema` or `__type`
            if the request carries an introspection allowed flag.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorBuilderExtensions.AllowIntrospection(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Boolean)">
            <summary>
            Toggle whether introspection is allow or not.
            </summary>
            <param name="allow">
            If `true` introspection is allowed.
            If `false` introspection is disallowed, except for requests
            that carry an introspection allowed flag.
            </param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQLCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:HotChocolate.Execution.IRequestExecutorResolver"/> and related services
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQL(Microsoft.Extensions.DependencyInjection.IServiceCollection,HotChocolate.NameString)">
            <summary>
            Adds the <see cref="T:HotChocolate.Execution.IRequestExecutorResolver"/> and related services to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> and configures a named <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </param>
            <param name="schemaName">
            The logical name of the <see cref="T:HotChocolate.ISchema"/> to configure.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure the executor.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.RequestExecutorServiceCollectionExtensions.AddGraphQL(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString)">
            <summary>
            Adds the <see cref="T:HotChocolate.Execution.IRequestExecutorResolver"/> and related services to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> and configures a named <see cref="T:HotChocolate.Execution.IRequestExecutor"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="schemaName">
            The logical name of the <see cref="T:HotChocolate.ISchema"/> to configure.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure the executor.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions">
            <summary>
            Extension methods for configuring an <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions.AddParameter``1(HotChocolate.Execution.Configuration.IResolverCompilerBuilder,System.Linq.Expressions.Expression{System.Func{HotChocolate.Resolvers.IResolverContext,``0}},System.Func{System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Adds a custom parameter compiler to the resolver compiler.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/>.
            </param>
            <param name="expression">
            A expression that resolves the data for the custom parameter.
            </param>
            <param name="canHandle">
            A predicate that can be used to specify to which parameter the
            expression shall be applied to.
            </param>
            <typeparam name="T">
            The parameter result type.
            </typeparam>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/> that can be used to configure to
            chain in more configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions.AddService``1(HotChocolate.Execution.Configuration.IResolverCompilerBuilder)">
            <summary>
            Marks types as well-known services that no longer need the
            <see cref="T:HotChocolate.ServiceAttribute"/> annotation.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/>.
            </param>
            <typeparam name="TService">
            The well-known service type.
            </typeparam>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/> that can be used to configure to
            chain in more configuration.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ResolverCompilerBuilderExtensions.AddScopedService``1(HotChocolate.Execution.Configuration.IResolverCompilerBuilder)">
            <summary>
            Marks types as well-known scoped services that no longer need the
            <see cref="T:HotChocolate.ScopedServiceAttribute"/> annotation.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/>.
            </param>
            <typeparam name="TService">
            The well-known scoped service type.
            </typeparam>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IResolverCompilerBuilder"/> that can be used to configure to
            chain in more configuration.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions">
            <summary>
            Extension methods for configuring an <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.TrimTypes(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Boolean)">
            <summary>
            Configures the schema to remove types that cannot be reached by the execution engine.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="trim">
            A boolean defining if type trimming shall be applied.
            </param>
            <returns>
            Returns <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> so that configurations can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.SetPagingOptions(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.Pagination.PagingOptions)">
            <summary>
            Sets the global paging options.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="options">
            The paging options.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="builder"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.EnableRelaySupport(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.Relay.RelayOptions)">
            <summary>
            Enables relay schema style.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="options">
            The relay schema options.
            </param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddGlobalObjectIdentification(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a <c>node</c> field to the root query according to the
            Global Object Identification specification.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryFieldToMutationPayloads(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.Relay.MutationPayloadOptions})">
            <summary>
            Enables rewriting of mutation payloads to provide access to a query root field.
            </summary>
            <param name="builder">The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:HotChocolate.Types.Relay.MutationPayloadOptions"/>.</param>
            <returns>
            An <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> that can be used to configure a schema
            and its execution.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{System.Object}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Threading.Tasks.ValueTask{System.Object}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.Execution.Configuration.IRequestExecutorBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Object)">
            <summary>
            Adds a resolver delegate that returns a constant result.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="constantResult">
            The constant result that will be returned for the specified field.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.NameString,HotChocolate.NameString,``0)">
            <summary>
            Adds a resolver delegate that returns a constant result.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="constantResult">
            The constant result that will be returned for the specified field.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Nullable{HotChocolate.NameString})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <typeparam name="TResolver">
            The type that holds one or many resolvers
            for the specified <paramref name="typeName"/>.
            </typeparam>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddResolver(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type,System.Nullable{HotChocolate.NameString})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="resolverType">
            The type that holds one or many resolvers
            for the specified <paramref name="typeName"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddRootType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type,HotChocolate.Language.OperationType)">
             <summary>
             Add a GraphQL root type to the schema.
             </summary>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="rootType">
             A type representing a GraphQL root type.
             This type must inherit from <see cref="T:HotChocolate.Types.ObjectType`1"/> or be a class.
             </param>
             <param name="operation">
             The operation type that <see cref="!:rootType"/> represents.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="rootType"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <see cref="!:rootType"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A root type for the specified <paramref name="operation"/> was already set.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddRootType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.ObjectType,HotChocolate.Language.OperationType)">
            <summary>
            Add a GraphQL root type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="rootType">
            An instance of <see cref="T:HotChocolate.Types.ObjectType"/> that represents a root type.
            </param>
            <param name="operation">
            The operation type that <see cref="!:rootType"/> represents.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="rootType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A root type for the specified <paramref name="operation"/> was already set.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Add a GraphQL query type with the name `Query`.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A query type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            Add a GraphQL query type with the name `Query` and applies the
            <see cref="!:configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A query type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor{``0}})">
             <summary>
             Add a GraphQL query type with the name `Query` and applies the
             <see cref="!:configure"/> delegate.
             </summary>
             <typeparam name="T">
             The query runtime type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="configure">
             A delegate to configure the type.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="configure"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="T"/> is either not a class or is a schema type.
            
             - A query type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type)">
             <summary>
             Add a GraphQL query type to the schema.
             </summary>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="queryType">
             A type representing the GraphQL query root type.
             This type must inherit from <see cref="T:HotChocolate.Types.ObjectType`1"/> or be a class.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="queryType"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <see cref="!:queryType"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A query type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.ObjectType)">
            <summary>
            Add a GraphQL query type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="queryType">
            An instance of <see cref="T:HotChocolate.Types.ObjectType"/> that represents the query type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="queryType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A query type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddQueryType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
             <summary>
             Add a GraphQL query type.
             </summary>
             <typeparam name="TQuery">
             The query type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="TQuery"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A query type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Add a GraphQL mutation type with the name `Mutation`.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A mutation type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            Add a GraphQL mutation type with the name `Mutation` and applies the
            <see cref="!:configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            - A mutation type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor{``0}})">
             <summary>
             Add a GraphQL mutation type with the name `Mutation` and applies the
             <see cref="!:configure"/> delegate.
             </summary>
             <typeparam name="T">
             The mutation runtime type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="configure">
             A delegate to configure the type.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="configure"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="T"/> is either not a class or is a schema type.
            
             - A mutation type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type)">
             <summary>
             Add a GraphQL mutation type to the schema.
             </summary>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="mutationType">
             A type representing the GraphQL query root type.
             This type must inherit from <see cref="T:HotChocolate.Types.ObjectType`1"/> or be a class.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="mutationType"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <see cref="!:mutationType"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A mutation type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.ObjectType)">
            <summary>
            Add a GraphQL mutation type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="mutationType">
            An instance of <see cref="T:HotChocolate.Types.ObjectType"/> that represents the query type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="mutationType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A query type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddMutationType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
             <summary>
             Add a GraphQL mutation type.
             </summary>
             <typeparam name="TMutation">
             The mutation type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="TMutation"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A mutation type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Add a GraphQL subscription type with the name `Subscription`.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A subscription type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            Add a GraphQL subscription type with the name `Subscription` and applies the
            <see cref="!:configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            - A subscription type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor{``0}})">
             <summary>
             Add a GraphQL subscription type with the name `Subscription` and applies the
             <see cref="!:configure"/> delegate.
             </summary>
             <typeparam name="T">
             The subscription runtime type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="configure">
             A delegate to configure the type.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="configure"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="T"/> is either not a class or is a schema type.
            
             - A subscription type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type)">
             <summary>
             Add a GraphQL subscription type to the schema.
             </summary>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <param name="subscriptionType">
             A type representing the GraphQL subscription root type.
             This type must inherit from <see cref="T:HotChocolate.Types.ObjectType`1"/> or be a class.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> or <paramref name="subscriptionType"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <see cref="!:subscriptionType"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A subscription type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.ObjectType)">
            <summary>
            Add a GraphQL subscription type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="subscriptionType">
            An instance of <see cref="T:HotChocolate.Types.ObjectType"/> that represents the query type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="subscriptionType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A subscription type was already added.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddSubscriptionType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
             <summary>
             Add a GraphQL subscription type.
             </summary>
             <typeparam name="TSubscription">
             The subscription type.
             </typeparam>
             <param name="builder">
             The GraphQL configuration builder.
             </param>
             <returns>
             Returns the GraphQL configuration builder.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="builder"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <typeparamref name="TSubscription"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A subscription type was already added.
             </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL object type and applies the
            <paramref name="configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            This helper adds a new GraphQL object type which will be inferred from the
            provided <typeparamref name="T"/>.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddObjectType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IObjectTypeDescriptor{``0}})">
            <summary>
            This helper adds a new GraphQL object type which will be inferred from the
            provided <typeparamref name="T"/> and applies the <paramref name="configure"/>
            delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IUnionTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL union type and applies the
            <paramref name="configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            This helper adds a new GraphQL union type which will be inferred from the
            provided <typeparamref name="T"/>.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddUnionType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IUnionTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL union type which will be inferred from the
            provided <typeparamref name="T"/> and applies the <paramref name="configure"/>
            delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IEnumTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL enum type and applies the
            <paramref name="configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            This helper adds a new GraphQL enum type which will be inferred from the
            provided <typeparamref name="T"/>.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddEnumType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IEnumTypeDescriptor{``0}})">
            <summary>
            This helper adds a new GraphQL enum type which will be inferred from the
            provided <typeparamref name="T"/> and applies the <paramref name="configure"/>
            delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IInterfaceTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL interface type and applies the
            <paramref name="configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            This helper adds a new GraphQL interface type which will be inferred from the
            provided <typeparamref name="T"/>.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInterfaceType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IInterfaceTypeDescriptor{``0}})">
            <summary>
            This helper adds a new GraphQL interface type which will be inferred from the
            provided <typeparamref name="T"/> and applies the <paramref name="configure"/>
            delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IInputObjectTypeDescriptor})">
            <summary>
            This helper adds a new GraphQL input object type and applies the
            <paramref name="configure"/> delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            This helper adds a new GraphQL input object type which will be inferred from the
            provided <typeparamref name="T"/>.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddInputObjectType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Action{HotChocolate.Types.IInputObjectTypeDescriptor{``0}})">
            <summary>
            This helper adds a new GraphQL input object type which will be inferred from the
            provided <typeparamref name="T"/> and applies the <paramref name="configure"/>
            delegate.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="configure">
            A delegate to configure the type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="configure"/> is <c>null</c>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <typeparamref name="T"/> is a schema type.
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Type)">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="type">
            The GraphQL type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="builder"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,HotChocolate.Types.INamedType)">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="namedType">
            The GraphQL type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="builder"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{HotChocolate.Types.INamedType})">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="namedTypeFactory">
            A factory to create a named type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="builder"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType(HotChocolate.Execution.Configuration.IRequestExecutorBuilder,System.Func{System.IServiceProvider,HotChocolate.Types.INamedType})">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <param name="namedTypeFactory">
            A factory to create a named type.
            </param>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="builder"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SchemaRequestExecutorBuilderExtensions.AddType``1(HotChocolate.Execution.Configuration.IRequestExecutorBuilder)">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="builder">
            The GraphQL configuration builder.
            </param>
            <typeparam name="T">
            The GraphQL type.
            </typeparam>
            <returns>
            Returns the GraphQL configuration builder.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="builder"/> or <paramref name="builder"/> is <c>null</c>
            </exception>
        </member>
    </members>
</doc>
