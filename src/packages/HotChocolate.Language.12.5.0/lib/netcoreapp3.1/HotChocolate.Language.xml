<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language</name>
    </assembly>
    <members>
        <member name="T:HotChocolate.Language.ISource">
            <summary>
            Represents a GraphQL source.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ISource.Text">
            <summary>
            Gets the GraphQL source text.
            </summary>
            <returns>
            Returns the GraphQL source text.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.Source">
            <summary>
            Represents a GraphQL source.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Source.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.Source"/> class.
            </summary>
            <param name="text">
            The GraphQL source text.
            </param>
        </member>
        <member name="P:HotChocolate.Language.Source.Text">
            <summary>
            Gets the GraphQL source text.
            </summary>
            <returns>
            Returns the GraphQL source text.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.Equals(HotChocolate.Language.Source)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.Source"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.Source"/> to compare with the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.Source"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.GetHashCode">
            <summary>
            Serves as a hash function for a
            <see cref="T:HotChocolate.Language.Source"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable
            for use in hashing algorithms and data structures such as a
            hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents
            the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromFile(System.String)">
            <summary>
            Reads a GraphQL source from a file.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the file content.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromFile(System.IO.FileInfo)">
            <summary>
            Reads a GraphQL source from a file.
            </summary>
            <param name="file">
            The GraphQL source file.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the file content.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromStream(System.IO.Stream)">
            <summary>
            Reads a GraphQL source from a read stream.
            </summary>
            <param name="stream">
            A read stream that provides access to a GraphQL source text.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the streams content.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Enter(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Enter is called when the visitation method hit the node and
            is aboute to visit its subtree.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain the parent
            of visited node.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Leave(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Leave is called when the visitation method is about to leave
            this node the full subtree if this node was visited
            when this method is called.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain
            the parent of visited node.
            </param>
        </member>
        <member name="T:HotChocolate.Language.ListExtensions">
            <summary>
            Provides Stack and Queue extensions for <see cref="T:System.Collections.Generic.List`1"/> to
            the visitor APIs.
            </summary>
        </member>
    </members>
</doc>
