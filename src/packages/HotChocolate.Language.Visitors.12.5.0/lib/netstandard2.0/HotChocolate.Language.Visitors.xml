<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language.Visitors</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:HotChocolate.Language.Visitors.SyntaxVisitorOptions">
            <summary>
            Represents basic visitor options.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitorOptions.VisitNames">
            <summary>
            Specifies if the visitor shall traverse name nodes.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitorOptions.VisitDescriptions">
            <summary>
            Specifies if the visitor shall traverse description nodes.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitorOptions.VisitDirectives">
            <summary>
            Specifies if the visitor shall traverse directives nodes.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitorOptions.VisitArguments">
            <summary>
            Specifies if the visitor shall traverse argument nodes.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.Options">
            <summary>
            The visitor options.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.DefaultAction">
            <summary>
            The visitor default action.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.Break">
            <summary>
            Ends traversing the graph.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.Skip">
            <summary>
            Skips the child nodes and the current node.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.Continue">
            <summary>
            Continues traversing the graph.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Visitors.SyntaxVisitor`1.SkipAndLeave">
            <summary>
            Skips the child node but completes the current node.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
