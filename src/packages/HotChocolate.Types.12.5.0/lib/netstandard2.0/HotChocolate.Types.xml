<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Types</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:HotChocolate.Configuration.DirectiveVisibility">
            <summary>
            Defines the directive visibility.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.DirectiveVisibility.Public">
            <summary>
            Directive is public and visible within the type system and through introspection.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.DirectiveVisibility.Internal">
            <summary>
            Directive is internal and only visible within the type system.
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.FieldMiddlewareApplication">
            <summary>
            This enum specified on which fields custom field
            middleware is applied to.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.FieldMiddlewareApplication.UserDefinedFields">
            <summary>
            Custom field middleware is only applied to
            user-defined fields and not to introspection fields.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.FieldMiddlewareApplication.AllFields">
            <summary>
            Custom field middleware is applied to all fields
            (user-defined fields and introspection fields).
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeCompletionContext">
            <summary>
            Represents the type completion context which gives access to data available while
            the type is being completed.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeCompletionContext.IsQueryType">
            <summary>
            Defines if the type that is being completed is the query type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeCompletionContext.IsMutationType">
            <summary>
            Defines if the type that is being completed is the mutation type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeCompletionContext.IsSubscriptionType">
            <summary>
            Defines if the type that is being completed is the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeCompletionContext.GlobalComponents">
            <summary>
            Global middleware components.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeCompletionContext.IsOfType">
            <summary>
            The fallback object to type resolver.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeCompletionContext.TryGetType``1(HotChocolate.Types.Descriptors.ITypeReference,``0@)">
            <summary>
            Tries to resolve a type by its <paramref name="typeRef" />.
            </summary>
            <typeparam name="T">
            The expected type.
            </typeparam>
            <param name="typeRef">
            The type reference representing the type.
            </param>
            <param name="type">
            The resolved types.
            </param>
            <returns>
            <c>true</c> if the type has been resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeCompletionContext.GetType``1(HotChocolate.Types.Descriptors.ITypeReference)">
            <summary>
            Gets a type by it's type reference.
            </summary>
            <param name="typeRef">
            The type reference representing the type.
            </param>
            <typeparam name="T">
            The expected type.
            </typeparam>
            <returns>
            The resolved types.
            </returns>
            <exception cref="T:HotChocolate.SchemaException">
            The type could not be resolved for the given <paramref name="typeRef" />.
            </exception>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeCompletionContext.GetNamedTypeReference(HotChocolate.Types.Descriptors.ITypeReference)">
            <summary>
            Rewrites a type reference to a named type reference.
            </summary>
            <param name="typeRef">
            A reference to a type.
            </param>
            <returns>
            Returns a direct reference to a named type.
            </returns>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeCompletionContext.GetTypes``1">
            <summary>
            Gets all registered types of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeDiscoveryContext">
            <summary>
            The type discovery context is available during the discovery phase of the type system.
            In this phase types are inspected and registered.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeDiscoveryContext.Dependencies">
            <summary>
            The collected type dependencies.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependency(HotChocolate.Types.Descriptors.IDirectiveReference)">
            <summary>
            Registers a reference to a directive on which <see cref="T:System.Type" /> depends.
            </summary>
            <param name="reference">
            A reference to a directive.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeDiscoveryContext.RegisterDependencyRange(System.Collections.Generic.IEnumerable{HotChocolate.Types.Descriptors.IDirectiveReference})">
            <summary>
            Registers multiple references to directives on which <see cref="T:System.Type" /> depends.
            </summary>
            <param name="references">
            Multiple references to a directives.
            </param>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeInitializationFlowInterceptor">
            <summary>
            The type initialization flow interceptor is triggered for each type initialization step.
            This interceptor can be useful to aggregate or process data in combination with the
            <see cref="T:HotChocolate.Configuration.ITypeInitializationInterceptor"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeDiscoverTypes">
            <summary>
            This method is called before the type discovery is started.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterDiscoverTypes">
            <summary>
            This method is called after the type discovery is finished.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeCompleteTypeNames">
            <summary>
            This method is called before the type names are completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterCompleteTypeNames">
            <summary>
            This method is called after the type names are completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeMergeTypeExtensions">
            <summary>
            This method is called before the type extensions are merged.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterMergeTypeExtensions">
            <summary>
            This method is called after the type extensions are merged.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnBeforeCompleteTypes">
            <summary>
            This method is called before the types are completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationFlowInterceptor.OnAfterCompleteTypes">
            <summary>
            This method is called after the types are completed.
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeInitializationInterceptor">
            <summary>
            A type initialization interceptors can hook into the various initialization events
            of type system members and change / rewrite them. This is useful in order to transform
            specified types.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeInitializationInterceptor.TriggerAggregations">
            <summary>
            Defines if the type initialization shall trigger aggregated lifecycle
            events like OnTypesInitialized, OnTypesCompletedName and OnTypesCompleted.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.CanHandle(HotChocolate.Configuration.ITypeSystemObjectContext)">
            <summary>
            Specifies the types that this interceptor wants to handle.
            </summary>
            <param name="context">
            The type system context that represents a specific type system member.
            </param>
            <returns>
            <c>true</c> if this interceptor wants to handle the specified context;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeInitialize(HotChocolate.Configuration.ITypeDiscoveryContext)">
            <summary>
            This event is triggered after the type instance was created but before
            any type definition was initialized.
            </summary>
            <param name="discoveryContext">
            The type discovery context.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterInitialize(HotChocolate.Configuration.ITypeDiscoveryContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is triggered after the type type definition was initialized and
            after the dependencies of this type have been registered
            with the type discovery context.
            </summary>
            <param name="discoveryContext">
            The type discovery context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.RegisterMoreTypes(System.Collections.Generic.IReadOnlyCollection{HotChocolate.Configuration.ITypeDiscoveryContext})">
             <summary>
             If all types are registered you can analyze them and add more new types at this point.
             This event could be hit multiple times.
            
             Ones <see cref="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection{HotChocolate.Configuration.ITypeDiscoveryContext})"/> is hit, no more types can be added.
             </summary>
             <param name="discoveryContexts">
             The discovery contexts of types that are already initialized.
             </param>
             <returns>
             Returns types that shall be included into the schema.
             </returns>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesInitialized(System.Collections.Generic.IReadOnlyCollection{HotChocolate.Configuration.ITypeDiscoveryContext})">
            <summary>
            This event is called after all type system members are initialized.
            </summary>
            <param name="discoveryContexts">
            The type discovery contexts that can be handled by this interceptor.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called after the type definition is initialized
            but before the type dependencies are reported to the discovery contex.
            </summary>
            <param name="discoveryContext">
            The type discovery context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called after the type dependencies are reported to the
            type discovery context but before the type definition is fully initialized.
            </summary>
            <param name="discoveryContext">
            The type discovery context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeCompleteName(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called before the type name is assigned.
            </summary>
            <param name="completionContext">
            The type completion context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterCompleteName(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called after the type name is assigned.
            </summary>
            <param name="completionContext">
            The type completion context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesCompletedName(System.Collections.Generic.IReadOnlyCollection{HotChocolate.Configuration.ITypeCompletionContext})">
            <summary>
            This event is called after all type system members have been named.
            </summary>
            <param name="completionContexts">
            The type discovery contexts that can be handled by this interceptor.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnBeforeCompleteType(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called before the type system member is fully completed.
            </summary>
            <param name="completionContext">
            The type completion context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnAfterCompleteType(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called after the type system member is fully completed.
            </summary>
            <param name="completionContext">
            The type completion context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnValidateType(HotChocolate.Configuration.ITypeSystemObjectContext,HotChocolate.Types.Descriptors.Definitions.DefinitionBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            This event is called after the type system member is fully completed and is
            intended to add validation logic. If the type is not valid throw a
            <see cref="T:HotChocolate.SchemaException"/>.
            </summary>
            <param name="validationContext">
            The type completion context.
            </param>
            <param name="definition">
            The type definition of the type system member.
            </param>
            <param name="contextData">
            The context data of the type system member.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeInitializationInterceptor.OnTypesCompleted(System.Collections.Generic.IReadOnlyCollection{HotChocolate.Configuration.ITypeCompletionContext})">
            <summary>
            This event is called after all type system members have been completed.
            </summary>
            <param name="completionContexts">
            The type discovery contexts that can be handled by this interceptor.
            </param>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeInterceptor">
            <summary>
            Represents the type interceptors for the type initialization.
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeRegistryInterceptor">
            <summary>
            This interceptor allows to hook into type registry events.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeRegistryInterceptor.OnTypeRegistered(HotChocolate.Configuration.ITypeDiscoveryContext)">
            <summary>
            This event is called after the type was registered with the type registry.
            </summary>
            <param name="discoveryContext">
            The type discovery context.
            </param>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeSystemObjectContext">
            <summary>
            The type system context is available during the type system initialization process.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.Type">
            <summary>
            The type system object that is being initialized.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.IsType">
            <summary>
            Defines if <see cref="P:HotChocolate.Configuration.ITypeSystemObjectContext.Type" /> is a type like the object type or interface type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.IsIntrospectionType">
            <summary>
            Defines if <see cref="P:HotChocolate.Configuration.ITypeSystemObjectContext.Type" /> is an introspection type.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.IsDirective">
            <summary>
            Defines if <see cref="P:HotChocolate.Configuration.ITypeSystemObjectContext.Type" /> is a directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.IsSchema">
            <summary>
            Defines if <see cref="P:HotChocolate.Configuration.ITypeSystemObjectContext.Type" /> is a schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.Services">
            <summary>
            The schema level services.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.DescriptorContext">
            <summary>
            The descriptor context that is passed through the initialization process.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.TypeInterceptor">
            <summary>
            The type initialization interceptor that allows to intercept
            objects that er being initialized.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeSystemObjectContext.TypeInspector">
            <summary>
            Gets the type inspector.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeSystemObjectContext.ReportError(HotChocolate.ISchemaError)">
            <summary>
            Report a schema initialization error.
            </summary>
            <param name="error">
            The error that occurred during initialization.
            </param>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeSystemObjectContext.TryPredictTypeKind(HotChocolate.Types.Descriptors.ITypeReference,HotChocolate.Types.TypeKind@)">
            <summary>
            Tries to infer the possible type kind from a type reference.
            </summary>
            <param name="typeRef">
            The type reference.
            </param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:HotChocolate.Configuration.ITypeRegistrarHandler">
            <summary>
            The type registrar handler will process a type reference.
            The handler may or may not create a type instance from the provided type reference
            and register it with the <see cref="T:HotChocolate.Configuration.ITypeRegistrar"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ITypeRegistrarHandler.Kind">
            <summary>
            The type reference kind that can be handled.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ITypeRegistrarHandler.Handle(HotChocolate.Configuration.ITypeRegistrar,HotChocolate.Types.Descriptors.ITypeReference)">
            <summary>
            Handles the type reference.
            </summary>
            <param name="typeRegistrar">
            The type registrar that can be used to register types.
            </param>
            <param name="typeReference">
            The type reference.
            </param>
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.IsQueryType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.IsMutationType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.IsSubscriptionType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.GlobalComponents">
            <summary>
            Global middleware components.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.HotChocolate#Configuration#ITypeCompletionContext#GlobalComponents">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Configuration.RegisteredType.IsOfType">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.TryGetType``1(HotChocolate.Types.Descriptors.ITypeReference,``0@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.GetType``1(HotChocolate.Types.Descriptors.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.GetNamedTypeReference(HotChocolate.Types.Descriptors.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.GetTypes``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.TryGetDirectiveType(HotChocolate.Types.Descriptors.IDirectiveReference,HotChocolate.Types.DirectiveType@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Configuration.RegisteredType.GetSchemaResolver">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Configuration.Validation.ObjectTypeValidationRule">
            <summary>
            Implements the object type validation defined in the spec.
            http://spec.graphql.org/draft/#sec-Objects.Type-Validation
            </summary>
        </member>
        <member name="T:HotChocolate.Configuration.ReadOnlySchemaOptions">
            <summary>
            Represents read-only schema options.
            </summary>
        </member>
        <member name="M:HotChocolate.Configuration.ReadOnlySchemaOptions.#ctor(HotChocolate.IReadOnlySchemaOptions)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Configuration.ReadOnlySchemaOptions"/>.
            </summary>
            <param name="options">
            The options that shall be wrapped as read-only options.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.QueryTypeName">
            <summary>
            Gets the name of the query type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.MutationTypeName">
            <summary>
            Gets or sets the name of the mutation type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.SubscriptionTypeName">
            <summary>
            Gets or sets the name of the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.StrictValidation">
            <summary>
            Defines if the schema allows the query type to be omitted.
            </summary>"
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.UseXmlDocumentation">
            <summary>
            Defines if the CSharp XML documentation shall be integrated.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.ResolveXmlDocumentationFileName">
            <summary>
            A delegate which resolves the name of the XML documentation file to be read.
            Only used if <seealso cref="P:HotChocolate.Configuration.ReadOnlySchemaOptions.UseXmlDocumentation"/> is true.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.SortFieldsByName">
            <summary>
            Defines if fields shall be sorted by name.
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.PreserveSyntaxNodes">
            <summary>
            Defines if syntax nodes shall be preserved on the type system objects
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.EnableDirectiveIntrospection">
            <summary>
            Defines if the experimental directive introspection feature shall be enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultDirectiveVisibility">
            <summary>
            The default directive visibility when directive introspection is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.AllowInlining">
            <summary>
            Defines if field inlining is allowed.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultResolverStrategy">
            <summary>
            Defines that the default resolver execution strategy.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.ValidatePipelineOrder">
            <summary>
            Defines if the order of important middleware components shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.StrictRuntimeTypeValidation">
            <summary>
            Defines if the runtime types of types shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.DefaultIsOfTypeCheck">
            <summary>
            Defines a delegate that determines if a runtime
            is an instance of an <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ReadOnlySchemaOptions.EnableOneOf">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.ISchema">
            <summary>
            A GraphQL Schema defines the capabilities of a GraphQL server. It
            exposes all available types and directives on the server, as well as
            the entry points for query, mutation, and subscription operations.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.Services">
            <summary>
            Gets the global schema services.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.QueryType">
            <summary>
            The type that query operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.MutationType">
            <summary>
            If this server supports mutation, the type that
            mutation operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.SubscriptionType">
            <summary>
            If this server support subscription, the type that
            subscription operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.Types">
            <summary>
            Gets all the schema types.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.DirectiveTypes">
            <summary>
            Gets all the directive types that are supported by this schema.
            </summary>
        </member>
        <member name="M:HotChocolate.ISchema.GetType``1(HotChocolate.NameString)">
            <summary>
            Gets a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <returns>The type.</returns>
            <exception cref="T:System.ArgumentException">
            The specified type does not exist or is not of the
            specified type kind.
            </exception>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetType``1(HotChocolate.NameString,``0@)">
            <summary>
            Tries to get a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <param name="type">The resolved type.</param>
            <returns>
            <c>true</c>, if a type with the name exists and is of the specified
            kind, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetRuntimeType(HotChocolate.NameString,System.Type@)">
            <summary>
            Tries to get the .net type representation of a schema type.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="runtimeType">The resolved .net type.</param>
            <returns>
            <c>true</c>, if a .net type was found that was bound
            the specified schema type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.GetPossibleTypes(HotChocolate.Types.INamedType)">
            <summary>
            Gets the possible object types to
            an abstract type (union type or interface type).
            </summary>
            <param name="abstractType">The abstract type.</param>
            <returns>
            Returns a collection with all possible object types
            for the given abstract type.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.GetDirectiveType(HotChocolate.NameString)">
            <summary>
            Gets a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <returns>
            Returns directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </returns>
            <exception cref="T:System.ArgumentException">
            The specified directive type does not exist.
            </exception>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetDirectiveType(HotChocolate.NameString,HotChocolate.Types.DirectiveType@)">
            <summary>
            Tries to get a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <param name="directiveType">
            The directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </param>
            <returns>
            <c>true</c>, if a directive type with the specified
            name exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.ToDocument(System.Boolean)">
            <summary>
            Generates a schema document.
            </summary>
        </member>
        <member name="M:HotChocolate.ISchema.Print">
            <summary>
            Prints the schema SDL representation.
            </summary>
        </member>
        <member name="M:HotChocolate.ISchema.ToString">
            <summary>
            Prints the schema SDL representation
            </summary>
        </member>
        <member name="T:HotChocolate.ISchemaBuilder">
            <summary>
            The schema builder provides a configuration API to create a GraphQL schema.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaBuilder.ContextData">
            <summary>
            Gets direct access to the schema building context data.
            </summary>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.AddType(System.Type)">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="type">
            The GraphQL type.
            </param>
            <returns>
            Returns the schema builder to chain in further configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.AddType(HotChocolate.Types.INamedType)">
            <summary>
            Adds a GraphQL type to the schema.
            </summary>
            <param name="namedType">
            The GraphQL type.
            </param>
            <returns>
            Returns the schema builder to chain in further configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namedType"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.AddType(HotChocolate.Types.INamedTypeExtension)">
            <summary>
            Adds a GraphQL type extension to the schema.
            </summary>
            <param name="typeExtension">
            The GraphQL type extension.
            </param>
            <returns>
            Returns the schema builder to chain in further configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeExtension"/> is <c>null</c>
            </exception>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.BindClrType(System.Type,System.Type)">
            <summary>
            Binds a .NET runtime type to a GraphQL schema type.
            </summary>
            <param name="clrType">
            The .NET runtime type.
            </param>
            <param name="schemaType">
            The GraphQL schema type.
            </param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.BindRuntimeType(System.Type,System.Type)">
            <summary>
            Binds a .NET runtime type to a GraphQL schema type.
            </summary>
            <param name="runtimeType">
            The .NET runtime type.
            </param>
            <param name="schemaType">
            The GraphQL schema type.
            </param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.AddRootType(System.Type,HotChocolate.Language.OperationType)">
             <summary>
             Add a GraphQL root type to the schema.
             </summary>
             <param name="rootType">
             A type representing a GraphQL root type.
             This type must inherit from <see cref="T:HotChocolate.Types.ObjectType`1"/> or be a class.
             </param>
             <param name="operation">
             The operation type that <see cref="!:rootType"/> represents.
             </param>
             <returns>
             Returns the schema builder to chain in further configuration.
             </returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="rootType"/> is null.
             </exception>
             <exception cref="T:System.ArgumentException">
             - <see cref="!:rootType"/> is either not a class or is not inheriting from
             <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            
             - A root type for the specified <paramref name="operation"/> was already set.
             </exception>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.AddRootType(HotChocolate.Types.ObjectType,HotChocolate.Language.OperationType)">
            <summary>
            Add a GraphQL root type to the schema.
            </summary>
            <param name="rootType">
            An instance of <see cref="T:HotChocolate.Types.ObjectType"/> that represents a root type.
            </param>
            <param name="operation">
            The operation type that <see cref="!:rootType"/> represents.
            </param>
            <returns>
            Returns the schema builder to chain in further configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="rootType"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            A root type for the specified <paramref name="operation"/> was already set.
            </exception>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.Create">
            <summary>
            Creates a new GraphQL Schema.
            </summary>
            <returns>
            Returns a new GraphQL Schema.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchemaBuilder.Create(HotChocolate.Types.Descriptors.IDescriptorContext)">
            <summary>
            Creates a new GraphQL Schema.
            </summary>
            <returns>
            Returns a new GraphQL Schema.
            </returns>
        </member>
        <member name="P:HotChocolate.ISchemaError.Message">
            <summary>
            Gets the error message.
            This property is mandatory and cannot be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Code">
            <summary>
            Gets an error code that can be used to automatically
            process an error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Path">
            <summary>
            Gets the path to the object that caused the error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Extensions">
            <summary>
            Gets non-spec error properties.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Exception">
            <summary>
            Gets the exception associated with this error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="M:HotChocolate.ResolverContextExtensions.GetUser(HotChocolate.Resolvers.IResolverContext)">
            <summary>
            Gets the user for this request.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <returns>
            Returns the user for this request.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.FieldCoordinate,HotChocolate.Resolvers.FieldResolverDelegate,System.Type)">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="field">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <param name="resultType">
            The resolver result type.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{System.Object}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Threading.Tasks.ValueTask{System.Object}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,System.Object})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,``0})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="resolver">
            The resolver delegate.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,System.Object)">
            <summary>
            Adds a resolver delegate that returns a constant result.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="constantResult">
            The constant result that will be returned for the specified field.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,HotChocolate.NameString,HotChocolate.NameString,``0)">
            <summary>
            Adds a resolver delegate that returns a constant result.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <param name="fieldName">
            The field to which the resolver is bound.
            </param>
            <param name="constantResult">
            The constant result that will be returned for the specified field.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver(HotChocolate.ISchemaBuilder,System.Type,System.Nullable{HotChocolate.NameString})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <param name="resolverType">
            The type that holds one or many resolvers
            for the specified <paramref name="typeName"/>.
            </param>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaBuilderExtensions.AddResolver``1(HotChocolate.ISchemaBuilder,System.Nullable{HotChocolate.NameString})">
            <summary>
            Adds a resolver delegate for a specific field.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.ISchemaBuilder"/>.
            </param>
            <typeparam name="T">
            The type that holds one or many resolvers
            for the specified <paramref name="typeName"/>.
            </typeparam>
            <param name="typeName">
            The type to which the resolver is bound.
            </param>
            <returns>
            Returns the <see cref="T:HotChocolate.ISchemaBuilder"/> to allow configuration chaining.
            </returns>
        </member>
        <member name="T:HotChocolate.SchemaExtensions">
            <summary>
            Provides extension methods to <see cref="T:HotChocolate.ISchema"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.SchemaExtensions.GetOperationType(HotChocolate.ISchema,HotChocolate.Language.OperationType)">
            <summary>
            Get the root operation object type.
            </summary>
            <param name="schema">The schema.</param>
            <param name="operation">The operation type.</param>
            <returns>
            Returns the root operation object type.
            </returns>
        </member>
        <member name="M:HotChocolate.SchemaExtensions.TryGetMember(HotChocolate.ISchema,System.String,HotChocolate.Types.ITypeSystemMember@)">
            <summary>
            Tries to resolve a <see cref="T:HotChocolate.Types.ITypeSystemMember"/> by its <see cref="T:HotChocolate.SchemaCoordinate"/>.
            </summary>
            <param name="schema">
            The schema on which the <paramref name="member"/> shall be resolved.
            </param>
            <param name="coordinateString">
            A string representing a schema coordinate.
            </param>
            <param name="member">
            The resolved type system member.
            </param>
            <returns>
            <c>true</c> if a type system member was found with the given 
            <paramref name="coordinateString"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="schema"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.SchemaExtensions.TryGetMember(HotChocolate.ISchema,HotChocolate.SchemaCoordinate,HotChocolate.Types.ITypeSystemMember@)">
            <summary>
            Tries to resolve a <see cref="T:HotChocolate.Types.ITypeSystemMember"/> by its <see cref="T:HotChocolate.SchemaCoordinate"/>.
            </summary>
            <param name="schema">
            The schema on which the <paramref name="member"/> shall be resolved.
            </param>
            <param name="coordinate">
            A schema coordinate.
            </param>
            <param name="member">
            The resolved type system member.
            </param>
            <returns>
            <c>true</c> if a type system member was found with the given 
            <paramref name="coordinate"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="schema"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.SchemaExtensions.GetMember(HotChocolate.ISchema,System.String)">
            <summary>
            Gets a <see cref="T:HotChocolate.Types.ITypeSystemMember"/> by its <see cref="T:HotChocolate.SchemaCoordinate"/>.
            </summary>
            <param name="schema">
            The schema on which the <paramref name="member"/> shall be resolved.
            </param>
            <param name="coordinateString">
            A string representing a schema coordinate.
            </param>
            <returns>
            Returns the resolved type system member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="schema"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The <paramref name="coordinateString"/> has invalid syntax.
            </exception>
            <exception cref="T:HotChocolate.InvalidSchemaCoordinateException">
            Unable to resolve a type system member with the 
            specified <paramref name="coordinateString"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.SchemaExtensions.GetMember(HotChocolate.ISchema,HotChocolate.SchemaCoordinate)">
            <summary>
            Gets a <see cref="T:HotChocolate.Types.ITypeSystemMember"/> by its <see cref="T:HotChocolate.SchemaCoordinate"/>.
            </summary>
            <param name="schema">
            The schema on which the <paramref name="member"/> shall be resolved.
            </param>
            <param name="coordinate">
            A schema coordinate.
            </param>
            <returns>
            Returns the resolved type system member.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="schema"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.InvalidSchemaCoordinateException">
            Unable to resolve a type system member with the 
            specified <paramref name="coordinateString"/>.
            </exception>
        </member>
        <member name="T:HotChocolate.Internal.ArgumentKind">
            <summary>
            Specifies resolver parameter kind.
            </summary>
        </member>
        <member name="T:HotChocolate.Internal.CustomParameterExpressionBuilder">
            <summary>
            A custom parameter expression builder allows to implement custom resolver parameter
            injection logic.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.CustomParameterExpressionBuilder.CanHandle(System.Reflection.ParameterInfo)">
            <summary>
            Checks if this expression builder can handle the following parameter.
            </summary>
            <param name="parameter">
            The parameter that needs to be resolved.
            </param>
            <returns>
            <c>true</c> if the parameter can be handled by this expression builder;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Internal.CustomParameterExpressionBuilder.Build(System.Reflection.ParameterInfo,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression that resolves a resolver parameter.
            </summary>
            <param name="parameter">
            The parameter that needs to be resolved.
            </param>
            <param name="context">
            An expression that represents the resolver context.
            </param>
            <returns>
            Returns an expression that resolves the value for this <paramref name="parameter"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Internal.CustomParameterExpressionBuilder`1">
            <summary>
            A custom parameter expression builder that allows to specify the expressions by
            passing them into the constructor.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.CustomParameterExpressionBuilder`1.#ctor(System.Linq.Expressions.Expression{System.Func{HotChocolate.Resolvers.IResolverContext,`0}})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Internal.CustomParameterExpressionBuilder"/>.
            </summary>
            <param name="expression">
            The expression that shall be used to resolve the parameter value.
            </param>
        </member>
        <member name="M:HotChocolate.Internal.CustomParameterExpressionBuilder`1.#ctor(System.Linq.Expressions.Expression{System.Func{HotChocolate.Resolvers.IResolverContext,`0}},System.Func{System.Reflection.ParameterInfo,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Internal.CustomParameterExpressionBuilder"/>.
            </summary>
            <param name="canHandle">
            A func that defines if a parameter can be handled by this expression builder.
            </param>
            <param name="expression">
            The expression that shall be used to resolve the parameter value.
            </param>
        </member>
        <member name="T:HotChocolate.Internal.CustomServiceParameterExpressionBuilder`1">
            <summary>
            This expression builder allows to map custom services as resolver parameters that do
            not need an attribute.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.ExtendedType.BaseTypes.IsNamedType(System.Type)">
            <summary>
            Defines if the specified type is a named type that can be instantiated.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.Type">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.Source">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.Definition">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsGeneric">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsArray">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsList">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsArrayOrList">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsNamedType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsSchemaType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsInterface">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.HotChocolate#Internal#IExtendedType#TypeArguments">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Internal.ExtendedType.HotChocolate#Internal#IExtendedType#ElementType">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Internal.ExtendedType.Equals(HotChocolate.Internal.IExtendedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Internal.ExtendedType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Internal.ExtendedType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Internal.IExtendedType">
            <summary>
            The extended type provides addition type information about the underlying system type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.Type">
            <summary>
            Gets the underlying type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.Source">
            <summary>
            Gets the original type representation.
            In case of a nullable int the original type will be
            <see cref="!:Nullable&lt;int&gt;"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.Definition">
            <summary>
            Gets the generic type definition if this is a generic type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.Kind">
            <summary>
            Specifies the extended type kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsGeneric">
            <summary>
            Defines that this type is a generic type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsArray">
            <summary>
            Defines that this type is a C# array.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsList">
            <summary>
            Defines that this type is a supported list type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsArrayOrList">
            <summary>
            Defines if this is a collection type meaning it is either <see cref="P:HotChocolate.Internal.IExtendedType.IsArray"/> or
            <see cref="P:HotChocolate.Internal.IExtendedType.IsList"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsNamedType">
            <summary>
            Specifies that this type is a schema type and implements
            ScalarType, ObjectType, InterfaceType, EnumType, UnionType or
            InputObjectType.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsSchemaType">
            <summary>
            Specifies that this type is a schema type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsInterface">
            <summary>
            Specifies if this type is an interface.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.IsNullable">
            <summary>
            Specifies if this type is nullable.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.TypeArguments">
            <summary>
            Gets the generic type information.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IExtendedType.ElementType">
            <summary>
            Gets the element type if <see cref="P:HotChocolate.Internal.IExtendedType.IsArrayOrList"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Internal.IParameterFieldConfiguration">
            <summary>
            The parameter configuration builder allows extensions to configure a field when a certain
            parameter is detected on the field resolver.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.IParameterFieldConfiguration.ApplyConfiguration(System.Reflection.ParameterInfo,HotChocolate.Types.Descriptors.ObjectFieldDescriptor)">
            <summary>
            Applies configuration to a field descriptor based on a resolver parameter.
            </summary>
            <param name="parameter">
            The resolver parameter.
            </param>
            <param name="descriptor">
            The field descriptor.
            </param>
        </member>
        <member name="T:HotChocolate.Internal.IParameterExpressionBuilder">
            <summary>
            This interface represents an expression builder to resolver resolver parameter values.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IParameterExpressionBuilder.Kind">
            <summary>
            Defines the argument kind that is handled by this builder.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IParameterExpressionBuilder.IsPure">
            <summary>
            Specifies if this expression builder can build parameter value resolvers
            for pure resolvers.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.IParameterExpressionBuilder.IsDefaultHandler">
            <summary>
            Specifies that this handler is run after all non-default handlers.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.IParameterExpressionBuilder.Build(System.Reflection.ParameterInfo,System.Linq.Expressions.Expression)">
            <summary>
            Builds an expression that resolves a resolver parameter.
            </summary>
            <param name="parameter">
            The parameter that needs to be resolved.
            </param>
            <param name="source">
            The runtime type of the object that is being resolved.
            </param>
            <param name="context">
            An expression that represents the resolver context.
            </param>
            <returns>
            Returns an expression that resolves the value for this <paramref name="parameter"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Internal.IParameterHandler">
            <summary>
            This base interface is used by the resolver compiler to determine
            if a expression builder or context builder can be applied to a parameter.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.IParameterHandler.CanHandle(System.Reflection.ParameterInfo)">
            <summary>
            Checks if this expression builder can handle the following parameter.
            </summary>
            <param name="parameter">
            The parameter that needs to be resolved.
            </param>
            <returns>
            <c>true</c> if the parameter can be handled by this expression builder;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Internal.ITypeFactory">
            <summary>
            Represents a GraphQL type factory.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.ITypeFactory.CreateType(HotChocolate.Types.INamedType)">
            <summary>
            Creates a type structure with the <paramref name="namedType"/>.
            </summary>
            <param name="namedType">The named type component.</param>
            <returns>
            Returns a GraphQL type structure.
            </returns>
        </member>
        <member name="T:HotChocolate.Internal.ITypeInfo">
            <summary>
            The type info provides information about the type structure that is relevant to
            the GraphQL type system. A <see cref="T:HotChocolate.Internal.ITypeInfo"/> can be created for runtime
            types as well as for schema types.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ITypeInfo.NamedType">
            <summary>
            Gets the type component that represents the named type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ITypeInfo.OriginalType">
            <summary>
            Gets the original type from which this type info was inferred.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ITypeInfo.Components">
            <summary>
            The components represent the GraphQL type structure.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ITypeInfo.IsSchemaType">
            <summary>
            Defines if the <see cref="P:HotChocolate.Internal.ITypeInfo.NamedType"/> is a GraphQL schema type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.ITypeInfo.IsRuntimeType">
            <summary>
            Defines if the <see cref="P:HotChocolate.Internal.ITypeInfo.NamedType"/> is a runtime type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.ITypeInfo.IsInputType">
            <summary>
            If this type is a schema type then this method defines if it is an input type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.ITypeInfo.IsOutputType">
            <summary>
            If this type is a schema type then this method defines if it is an output type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.ITypeInfo.GetExtendedType">
            <summary>
            Gets the extended type that contains information
            about type arguments and nullability.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.NamedType">
            <summary>
            Gets the type component that represents the named type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.OriginalType">
            <summary>
            Gets the original type from which this type info was inferred.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.Components">
            <summary>
            The components represent the GraphQL type structure.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.IsSchemaType">
            <summary>
            Defines if the <see cref="P:HotChocolate.Internal.TypeInfo.NamedType"/> is a GraphQL schema type.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.IsRuntimeType">
            <summary>
            Defines if the <see cref="P:HotChocolate.Internal.TypeInfo.NamedType"/> is a runtime type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfo.GetExtendedType">
            <summary>
            Gets the extended type that contains information
            about type arguments and nullability.
            </summary>
        </member>
        <member name="P:HotChocolate.Internal.TypeInfo.IsValid">
            <summary>
            Defines if the component structure is valid in the GraphQL context.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfo.IsInputType">
            <summary>
            If this type is a schema type then this method defines if it is an input type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfo.IsOutputType">
            <summary>
            If this type is a schema type then this method defines if it is an output type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfo.CreateType(HotChocolate.Types.INamedType)">
            <summary>
            Creates a type structure with the <paramref name="namedType"/>.
            </summary>
            <param name="namedType">The named type component.</param>
            <returns>
            Returns a GraphQL type structure.
            </returns>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfo.RuntimeType.Unwrap(HotChocolate.Internal.IExtendedType)">
            <summary>
            Removes non-essential parts from the type.
            </summary>
        </member>
        <member name="M:HotChocolate.Internal.TypeInfoExtensions.CreateType(HotChocolate.Internal.ITypeInfo,HotChocolate.Types.INamedType)">
            <summary>
            Creates a type structure with the <paramref name="namedType"/>.
            </summary>
            <param name="typeInfo">The type info.</param>
            <param name="namedType">The named type component.</param>
            <returns>
            Returns a GraphQL type structure.
            </returns>
        </member>
        <member name="T:HotChocolate.InvalidSchemaCoordinateException">
            <summary>
            This exception indicates that the specified 
            <see cref="P:HotChocolate.InvalidSchemaCoordinateException.Coordinate"/> 
            could not be resolved.
            </summary>
        </member>
        <member name="M:HotChocolate.InvalidSchemaCoordinateException.#ctor(System.String,HotChocolate.SchemaCoordinate)">
            <summary>
            Creates new instance of <see cref="T:HotChocolate.InvalidSchemaCoordinateException"/>.
            </summary>
            <param name="message">The error message.</param>
            <param name="coordinate">The invalid schema coordinate.</param>
        </member>
        <member name="M:HotChocolate.InvalidSchemaCoordinateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.InvalidSchemaCoordinateException"/> 
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="P:HotChocolate.InvalidSchemaCoordinateException.Coordinate">
            <summary>
            The invalid schema coordinate.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.InvalidSchemaCoordinateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.IReadOnlySchemaOptions">
            <summary>
            Represents read-only schema options.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.QueryTypeName">
            <summary>
            Gets the name of the query type.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.MutationTypeName">
            <summary>
            Gets or sets the name of the mutation type.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.SubscriptionTypeName">
            <summary>
            Gets or sets the name of the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.StrictValidation">
            <summary>
            Defines if the schema allows the query type to be omitted.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.UseXmlDocumentation">
            <summary>
            Defines if the CSharp XML documentation shall be integrated.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.ResolveXmlDocumentationFileName">
            <summary>
            A delegate which resolves the name of the XML documentation file to be read.
            Only used if <seealso cref="P:HotChocolate.IReadOnlySchemaOptions.UseXmlDocumentation"/> is true.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.SortFieldsByName">
            <summary>
            Defines if fields shall be sorted by name.
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.PreserveSyntaxNodes">
            <summary>
            Defines if syntax nodes shall be preserved on the type system objects
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.EnableDirectiveIntrospection">
            <summary>
            Defines if the experimental directive introspection feature shall be enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.DefaultDirectiveVisibility">
            <summary>
            The default directive visibility when directive introspection is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.AllowInlining">
            <summary>
            Defines if field inlining is allowed.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.DefaultResolverStrategy">
            <summary>
            Defines that the default resolver execution strategy.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.ValidatePipelineOrder">
            <summary>
            Defines if the order of important middleware components shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.StrictRuntimeTypeValidation">
            <summary>
            Defines if the runtime types of types shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.DefaultIsOfTypeCheck">
            <summary>
            Defines a delegate that determines if a runtime
            is an instance of an <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.IReadOnlySchemaOptions.EnableOneOf">
            <summary>
            Defines if the OneOf spec RFC is enabled. This feature is experimental.
            </summary>
        </member>
        <member name="T:HotChocolate.ISchemaOptions">
            <summary>
            Represents mutable schema options.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.QueryTypeName">
            <summary>
            Gets or sets the name of the query type.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.MutationTypeName">
            <summary>
            Gets or sets the name of the mutation type.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.SubscriptionTypeName">
            <summary>
            Gets or sets the name of the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.StrictValidation">
            <summary>
            Defines if the schema allows the query type to be omitted.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.UseXmlDocumentation">
            <summary>
            Defines if the CSharp XML documentation shall be integrated.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.ResolveXmlDocumentationFileName">
            <summary>
            A delegate which resolves the name of the XML documentation file to be read.
            Only used if <seealso cref="P:HotChocolate.ISchemaOptions.UseXmlDocumentation"/> is true.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.SortFieldsByName">
            <summary>
            Defines if fields shall be sorted by name.
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.PreserveSyntaxNodes">
            <summary>
            Defines if syntax nodes shall be preserved on the type system objects
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.EnableDirectiveIntrospection">
            <summary>
            Defines if the experimental directive introspection feature shall be enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.DefaultDirectiveVisibility">
            <summary>
            The default directive visibility when directive introspection is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.AllowInlining">
            <summary>
            Defines if field inlining is allowed.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.DefaultResolverStrategy">
            <summary>
            Defines that the default resolver execution strategy.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.ValidatePipelineOrder">
            <summary>
            Defines if the order of important middleware components shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.StrictRuntimeTypeValidation">
            <summary>
            Defines if the runtime types of types shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.DefaultIsOfTypeCheck">
            <summary>
            Defines a delegate that determines if a runtime
            is an instance of an <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaOptions.EnableOneOf">
            <summary>
            Defines if the OneOf spec RFC is enabled. This feature is experimental.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.ArgumentValue">
            <summary>
            Represents an argument value withing the field execution pipeline.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.ArgumentValue.#ctor(HotChocolate.Types.IInputFieldInfo,HotChocolate.Types.ValueKind,System.Boolean,System.Boolean,System.Object,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Resolvers.ArgumentValue"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="kind">
            The value kind.
            </param>
            <param name="isFullyCoerced">
            Specifies if this value is final or if it needs to be coerced during field execution..
            Values with variables for instance need coercion during field execution.
            </param>
            <param name="isDefaultValue">
            Defines if the provided value represents the argument default value and was not explicitly
            provided by the user.
            </param>
            <param name="value">
            The runtime value representation.
            </param>
            <param name="valueLiteral">
            The syntax value representation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/> or <param name="valueLiteral"></param> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Resolvers.ArgumentValue.#ctor(HotChocolate.Types.IInputFieldInfo,HotChocolate.IError)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Resolvers.ArgumentValue"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="error">The argument value error.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="argument"/> or <param name="error"></param> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Name">
            <summary>
            Gets the argument name.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Coordinate">
            <summary>
            Gets the argument field coordinate.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Type">
            <summary>
            Gets the argument type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.RuntimeType">
            <summary>
            Gets the argument runtime type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.DefaultValue">
            <summary>
            Gets the argument default value.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Formatter">
            <summary>
            Return an optional input value formatter.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Kind">
            <summary>
            Specifies the value structure.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.IsFullyCoerced">
            <summary>
            Defines if this argument value is fully coerced and
            needs no post processing.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.HasError">
            <summary>
            Defines if this argument value has errors that will
            be thrown during field execution.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.IsDefaultValue">
            <summary>
            Defines if the value was inferred from the default value.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Value">
            <summary>
            Gets the runtime value representation of this argument.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.ValueLiteral">
            <summary>
            Gets the value literal of this argument value.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.ArgumentValue.Error">
            <summary>
            If this argument has error this represents the argument error.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.DefaultResolverCompiler">
            <summary>
            This class provides some helper methods to compile resolvers for dynamic schemas.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.CompileResolve``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type,HotChocolate.Internal.IParameterExpressionBuilder[])">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.CompileResolve(System.Linq.Expressions.LambdaExpression,System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.CompileResolve(System.Reflection.MemberInfo,System.Type,System.Type,HotChocolate.Internal.IParameterExpressionBuilder[])">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.CompileSubscribe(System.Reflection.MemberInfo,System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.GetArgumentParameters(System.Reflection.ParameterInfo[],HotChocolate.Internal.IParameterExpressionBuilder[])">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Resolvers.DefaultResolverCompiler.ApplyConfiguration(System.Reflection.ParameterInfo[],HotChocolate.Types.Descriptors.ObjectFieldDescriptor)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.Parameters.LambdaParameterExpressionBuilder`2">
            <summary>
            This base class allows to specify the argument expression as lambda expression
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.Parameters.ParentParameterExpressionBuilder">
            <summary>
            Builds parameter expressions injecting the parent object.
            Parameters representing the parent object must be annotated with
            <see cref="T:HotChocolate.ParentAttribute"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.Parameters.ServiceExpressionHelper">
            <summary>
            Provides helpers for service expression builders.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.Expressions.Parameters.ServiceExpressionHelper.ApplyConfiguration(System.Reflection.ParameterInfo,HotChocolate.Types.Descriptors.ObjectFieldDescriptor,HotChocolate.ServiceKind)">
            <summary>
            Applies the service configurations.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.Expressions.Parameters.ServiceExpressionHelper.Build(System.Reflection.ParameterInfo,System.Linq.Expressions.Expression,HotChocolate.ServiceKind)">
            <summary>
            Builds the service expression.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.Parameters.ServiceHelper">
            <summary>
            The service helper configures the object fields with middleware to handle
            various service behaviours like pooled services.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.Parameters.ServiceParameterExpressionBuilder">
            <summary>
            Builds parameter expressions for resolver level dependency injection.
            Parameters need to be annotated with the <see cref="T:HotChocolate.ServiceAttribute"/> or the
            <c>FromServicesAttribute</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.ResolverDescriptor">
            <summary>
            Describes a resolver that is based on a resolver type.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.Expressions.ResolverDescriptor.#ctor(System.Type,HotChocolate.Resolvers.FieldMember,System.Type)">
            <summary>
            Creates a new instance of <see cref="P:HotChocolate.Resolvers.Expressions.ResolverDescriptor.ResolverType"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.Expressions.ResolverDescriptor.ResolverType">
            <summary>
            Gets the resolver type.
            If a resolver type is the <see cref="P:HotChocolate.Resolvers.Expressions.ResolverDescriptor.Field"/> belongs to this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.Expressions.ResolverDescriptor.SourceType">
            <summary>
            Gets the source type aka runtime type of a GraphQL type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.Expressions.ResolverDescriptor.Field">
            <summary>
            Gets the member that shall be compiled to a resolver.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.FieldDelegate">
            <summary>
            This delegate defines the interface of a field pipeline that the
            execution engine invokes to resolve a field result.
            </summary>
            <param name="context">The middleware context.</param>
        </member>
        <member name="T:HotChocolate.Resolvers.PureFieldDelegate">
            <summary>
            This delegates represents a pure resolver that is side-effect free and sync.
            </summary>
            <param name="context">The resolver context.</param>
            <returns>
            Returns the resolver result.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.FieldMiddleware">
            <summary>
            This delegate defines the factory to integrate a field middleware into the field pipeline.
            </summary>
            <param name="next">
            The next field middleware that has to be invoked after the middleware that is
            created by this factory.
            </param>
            <returns>
            Returns the field middleware that is created by this factory.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.FieldResolverDelegate">
            <summary>
            This delegates describes the resolver interface that the execution engine uses to
            resolve the data of a field.
            </summary>
            <param name="context">The resolver context.</param>
            <returns>
            Returns the resolver result.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.FieldResolverDelegates">
            <summary>
            This struct carries compiled resolvers for a field.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.FieldResolverDelegates.#ctor(HotChocolate.Resolvers.FieldResolverDelegate,HotChocolate.Resolvers.PureFieldDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Resolvers.FieldResolverDelegates"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.FieldResolverDelegates.#ctor(HotChocolate.Resolvers.FieldResolver)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Resolvers.FieldResolverDelegates"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.FieldResolverDelegates.Resolver">
            <summary>
            Gets the async resolver which also is the default resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.FieldResolverDelegates.PureResolver">
            <summary>
            Gets a sync resolver which can be used in contexts where no services are needed
            and the method is considered pure.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.FieldResolverDelegates.HasResolvers">
            <summary>
            Defines if this instance has at least one resolver specified.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IDirectiveContext">
            <summary>
            The directive context represent the execution context for a specific
            directive middleware that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IDirectiveContext.Directive">
            <summary>
            Gets the directive that is being executed.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IFieldReference">
            <summary>
            A reference to a specific field of a GraphQL schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldReference.TypeName">
            <summary>
            The name of a GraphQL object type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldReference.FieldName">
            <summary>
            The name of a field of the object type.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IFieldSelection">
            <summary>
            Represents a field selection during execution.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.ResponseName">
            <summary>
            Gets the name this field will have in the response map.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.Field">
            <summary>
            Gets the field that was selected.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.Type">
            <summary>
            Gets the type of the selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.TypeKind">
            <summary>
            Gets the type kind of the selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.SyntaxNode">
            <summary>
            Gets the field selection syntax node.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldSelection.SyntaxNodes">
            <summary>
            Gets the merged field selections.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IMiddlewareContext">
            <summary>
            Encapsulates all resolver-specific information about the execution of an individual field selection.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IMiddlewareContext.Result">
            <summary>
            Gets or sets the result of the middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IMiddlewareContext.IsResultModified">
            <summary>
            Defines if at least one middleware has modified the result.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.Resolvers.IMiddlewareContext.ResolveAsync``1">
            <summary>
            Executes the field resolver and returns its result.
            </summary>
            <typeparam name="T">
            The type to which the result shall be casted.
            </typeparam>
            <returns>
            Returns the resolved field value.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IMiddlewareContext.RegisterForCleanup(System.Action)">
            <summary>
            Register cleanup tasks that will be executed after resolver execution is finished.
            </summary>
            <param name="action">
            Cleanup action.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IMiddlewareContext.ReplaceArguments(System.Collections.Generic.IReadOnlyDictionary{HotChocolate.NameString,HotChocolate.Resolvers.ArgumentValue})">
            <summary>
            Replaces the argument values for the current field execution pipeline.
            </summary>
            <param name="argumentValues">
            The new argument values that shall replace the current argument values.
            </param>
            <returns>
            Returns the original argument values map so that a middleware is able to conserve them
            and restore the initial state of the context after it finished to execute.
            </returns>
        </member>
        <member name="P:HotChocolate.Resolvers.IOperation.Document">
            <summary>
            Gets the parsed query document that contains the
            operation-<see cref="P:HotChocolate.Resolvers.IOperation.Definition" />.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Resolvers.IOperation.Definition">
            <summary>
            Gets the syntax node representing the operation definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IOperation.RootType">
            <summary>
            Gets the root type on which the operation is executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IOperation.Name">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IOperation.Type">
            <summary>
            Gets the operation type (Query, Mutation, Subscription).
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IPureResolverContext">
            <summary>
            The context that is available to pure resolvers.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IPureResolverContext.Schema">
            <summary>
            Gets the GraphQL schema on which the query is executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IPureResolverContext.RootType">
            <summary>
            Gets the root object type of the currently execution operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IPureResolverContext.ObjectType">
            <summary>
            Gets the object type on which the field resolver is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IPureResolverContext.Selection">
            <summary>
            Gets the field selection for which a field resolver is
            being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IPureResolverContext.Variables">
            <summary>
            Gets access to the coerced variable values of the request.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.Parent``1">
            <summary>
            Gets the previous (parent) resolver result.
            </summary>
            <typeparam name="T">
            The type to which the result shall be casted.
            </typeparam>
            <returns>
            Returns the previous (parent) resolver result.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.ArgumentValue``1(HotChocolate.NameString)">
            <summary>
            Gets a specific field argument value.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <typeparam name="T">
            The type to which the argument shall be casted to.
            </typeparam>
            <returns>
            Returns the value of the specified field argument as literal.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.ArgumentLiteral``1(HotChocolate.NameString)">
            <summary>
            Gets a specific field argument as literal.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <typeparam name="TValueNode">
            The type to which the argument shall be casted to.
            </typeparam>
            <returns>
            Returns the value of the specified field argument as literal.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.ArgumentOptional``1(HotChocolate.NameString)">
            <summary>
            Gets a specific field argument as optional.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <typeparam name="T">
            The type to which the argument shall be casted to.
            </typeparam>
            <returns>
            Returns the value of the specified field argument as optional.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.ArgumentKind(HotChocolate.NameString)">
            <summary>
            Gets the value kind of a specific field argument.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <returns>
            Returns the value kind of the specified field argument kind.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.Service``1">
            <summary>
            Gets as required service from the dependency injection container.
            </summary>
            <typeparam name="T">
            The service type.
            </typeparam>
            <returns>
            Returns the specified service.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IPureResolverContext.Resolver``1">
            <summary>
            Gets a resolver object containing one or more resolvers.
            </summary>
            <typeparam name="T">
            The type of the resolver object.
            </typeparam>
            <returns>
            Returns a resolver object containing one or more resolvers.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.IResolverCompiler">
            <summary>
            This services provides access to the internal resolver compiler.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.CompileResolve``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type,HotChocolate.Internal.IParameterExpressionBuilder[])">
            <summary>
            Compiles a resolver from a member selector.
            </summary>
            <param name="propertyOrMethod">
            The member selector.
            </param>
            <param name="sourceType">
            The source type.
            </param>
            <param name="parameterExpressionBuilders">
            Field level parameter expression builders.
            </param>
            <typeparam name="TResolver">
            The resolver type.
            </typeparam>
            <returns>
            Returns a struct containing the compiled resolvers.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.CompileResolve(System.Linq.Expressions.LambdaExpression,System.Type,System.Type)">
            <summary>
            Compiles a resolver from a member selector.
            </summary>
            <param name="lambda">
            The member selector.
            </param>
            <param name="sourceType">
            The source type.
            </param>
            <param name="resolverType">
            The resolver type.
            </param>
            <returns>
            Returns a struct containing the compiled resolvers.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.CompileResolve(System.Reflection.MemberInfo,System.Type,System.Type,HotChocolate.Internal.IParameterExpressionBuilder[])">
            <summary>
            Compiles a resolver from a member.
            </summary>
            <param name="member">
            The member.
            </param>
            <param name="sourceType">
            The source type.
            </param>
            <param name="resolverType">
            The resolver type.
            </param>
            <param name="parameterExpressionBuilders">
            Field level parameter expression builders.
            </param>
            <returns>
            Returns a struct containing the compiled resolvers.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.CompileSubscribe(System.Reflection.MemberInfo,System.Type,System.Type)">
            <summary>
            Compiles a subscribe resolver from a member.
            </summary>
            <param name="member">
            The member.
            </param>
            <param name="sourceType">
            The source type.
            </param>
            <param name="resolverType">
            The resolver type.
            </param>
            <returns>
            Returns the compiled subscribe resolver.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.GetArgumentParameters(System.Reflection.ParameterInfo[],HotChocolate.Internal.IParameterExpressionBuilder[])">
            <summary>
            Filters the specified arguments and returns only the parameters
            representing GraphQL field arguments.
            </summary>
            <param name="parameters">
            The method parameters.
            </param>
            <param name="parameterExpressionBuilders">
            Field level parameter expression builders.
            </param>
            <returns>
            Returns only the parameters representing GraphQL field arguments.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverCompiler.ApplyConfiguration(System.Reflection.ParameterInfo[],HotChocolate.Types.Descriptors.ObjectFieldDescriptor)">
            <summary>
            Applies filed configuration dependencies for the specified parameters.
            </summary>
            <param name="parameters">
            The resolver method parameters.
            </param>
            <param name="descriptor">
            The field descriptor.
            </param>
        </member>
        <member name="T:HotChocolate.Resolvers.IResolverContext">
            <summary>
            The resolver context represent the execution context for a specific
            field that is being resolved.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Services">
            <summary>
            Gets the scoped request service provider.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Field">
            <summary>
            Gets the field on which the field resolver is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Document">
            <summary>
            Gets the parsed query document that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Operation">
            <summary>
            Gets the operation from the query that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.FieldSelection">
            <summary>
            Gets the merged field selection for which a field resolver is
            being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.ResponseName">
            <summary>
            Gets the name that the field will have in the response map.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Path">
            <summary>
            Gets the current execution path.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.HasErrors">
            <summary>
            Indicates that the context has errors. To report new errors use <see cref="M:HotChocolate.Resolvers.IResolverContext.ReportError(HotChocolate.IError)"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.ScopedContextData">
            <summary>
            The scoped context data dictionary can be used by middlewares and
            resolvers to store and retrieve data during execution scoped to the
            hierarchy
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.LocalContextData">
            <summary>
            The local context data dictionary can be used by middlewares and
            resolvers to store and retrieve data during execution scoped to the
            field
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.RequestAborted">
            <summary>
            Notifies when the connection underlying this request is aborted
            and thus request operations should be cancelled.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Argument``1(HotChocolate.NameString)">
            <summary>
            Gets a specific field argument.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <typeparam name="T">
            The type to which the argument shall be casted to.
            </typeparam>
            <returns>
            Returns the value of the specified field argument.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Service(System.Type)">
            <summary>
            Gets as required service from the dependency injection container.
            </summary>
            <param name="service">The service type.</param>
            <returns>
            Returns the specified service.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ReportError(System.String)">
            <summary>
            Report a non-terminating resolver error to the execution engine.
            The error will be displayed in the error section with a reference to
            the field selection that is associated with the current
            resolver context.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ReportError(HotChocolate.IError)">
            <summary>
            Report a non-terminating resolver error to the execution engine.
            The error will be displayed in the error section with a reference to
            the field selection that is associated with the current
            resolver context.
            </summary>
            <param name="error">
            The error.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ReportError(System.Exception,System.Action{HotChocolate.IErrorBuilder})">
            <summary>
            Report a non-terminating resolver error to the execution engine.
            The error will be displayed in the error section with a reference to
            the field selection that is associated with the current
            resolver context.
            </summary>
            <param name="exception">
            The exception that was thrown.
            </param>
            <param name="configure">
            A delegate to further configure the error object.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.GetSelections(HotChocolate.Types.ObjectType,HotChocolate.Language.SelectionSetNode,System.Boolean)">
            <summary>
            Gets the pre-compiled selections for the <paramref name="selectionSet" />
            with the specified <paramref name="typeContext" />.
            type context.
            </summary>
            <param name="typeContext">
            The object type context.
            </param>
            <param name="selectionSet">
            The selection-set for which the pre-compiled selections shall be returned.
            </param>
            <param name="allowInternals">
            Include also internal selections that shall not be included into the result set.
            </param>
            <returns>
            Returns the pre-compiled selections for the <paramref name="selectionSet" />
            with the specified <paramref name="typeContext" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.GetQueryRoot``1">
            <summary>
            Get the query root instance.
            </summary>
            <typeparam name="T">
            The type of the query root.
            </typeparam>
            <returns>
            Returns the query root instance.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.SubscribeResolverDelegate">
            <summary>
            This delegates describes the subscribe resolver interface that the execution engine 
            uses to subscribe to a event stream.
            </summary>
            <param name="context">The resolver context.</param>
            <returns>
            Returns the the event stream.
            </returns>
        </member>
        <member name="T:HotChocolate.Schema">
            <summary>
            A GraphQL Schema defines the capabilities of a GraphQL server. It
            exposes all available types and directives on the server, as well as
            the entry points for query, mutation, and subscription operations.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.Directives">
            <summary>
            Gets the schema directives.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Schema.Services">
            <summary>
            Gets the global schema services.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.QueryType">
            <summary>
            The type that query operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.MutationType">
            <summary>
            If this server supports mutation, the type that
            mutation operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.SubscriptionType">
            <summary>
            If this server support subscription, the type that
            subscription operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.Types">
            <summary>
            Gets all the schema types.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.DirectiveTypes">
            <summary>
            Gets all the directives that are supported by this schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.DefaultName">
            <summary>
            Gets the default schema name.
            </summary>
        </member>
        <member name="M:HotChocolate.Schema.GetType``1(HotChocolate.NameString)">
            <summary>
            Gets a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <returns>The type.</returns>
            <exception cref="T:System.ArgumentException">
            The specified type does not exist or
            is not of the specified type kind.
            </exception>
        </member>
        <member name="M:HotChocolate.Schema.TryGetType``1(HotChocolate.NameString,``0@)">
            <summary>
            Tries to get a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <param name="type">The resolved type.</param>
            <returns>
            <c>true</c>, if a type with the name exists and is of the specified
            kind, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.TryGetRuntimeType(HotChocolate.NameString,System.Type@)">
            <summary>
            Tries to get the .net type representation of a schema.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="runtimeType">The resolved .net type.</param>
            <returns>
            <c>true</c>, if a .net type was found that was bound
            the the specified schema type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.GetPossibleTypes(HotChocolate.Types.INamedType)">
            <summary>
            Gets the possible object types to
            an abstract type (union type or interface type).
            </summary>
            <param name="abstractType">The abstract type.</param>
            <returns>
            Returns a collection with all possible object types
            for the given abstract type.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.GetDirectiveType(HotChocolate.NameString)">
            <summary>
            Gets a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <returns>
            Returns directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </returns>
            <exception cref="T:System.ArgumentException">
            The specified directive type does not exist.
            </exception>
        </member>
        <member name="M:HotChocolate.Schema.TryGetDirectiveType(HotChocolate.NameString,HotChocolate.Types.DirectiveType@)">
            <summary>
            Tries to get a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <param name="directiveType">
            The directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </param>
            <returns>
            <c>true</c>, if a directive type with the specified
            name exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.ToDocument(System.Boolean)">
            <summary>
            Generates a schema document.
            </summary>
        </member>
        <member name="M:HotChocolate.Schema.Print">
            <summary>
            Returns the schema SDL representation.
            </summary>
        </member>
        <member name="M:HotChocolate.Schema.ToString">
            <summary>
            Returns the schema SDL representation.
            </summary>
        </member>
        <member name="T:HotChocolate.SchemaBuilder">
            <summary>
            The schema builder provides a configuration API to create a GraphQL schema.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaBuilder.ContextData">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetSchema(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetSchema(HotChocolate.ISchema)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetSchema(System.Action{HotChocolate.Types.ISchemaTypeDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetOptions(HotChocolate.IReadOnlySchemaOptions)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.ModifyOptions(System.Action{HotChocolate.ISchemaOptions})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.Use(HotChocolate.Resolvers.FieldMiddleware)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddDocument(HotChocolate.LoadSchemaDocument)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.TryAddConvention(System.Type,HotChocolate.CreateConvention,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddConvention(System.Type,HotChocolate.CreateConvention,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.BindClrType(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.BindRuntimeType(System.Type,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddType(HotChocolate.Types.INamedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddType(HotChocolate.Types.INamedTypeExtension)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddDirectiveType(HotChocolate.Types.DirectiveType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddRootType(System.Type,HotChocolate.Language.OperationType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddRootType(HotChocolate.Types.ObjectType,HotChocolate.Language.OperationType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetTypeResolver(HotChocolate.Types.IsOfTypeFallback)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.AddServices(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetContextData(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.SetContextData(System.String,System.Func{System.Object,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.TryAddTypeInterceptor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.TryAddTypeInterceptor(HotChocolate.Configuration.ITypeInitializationInterceptor)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.TryAddSchemaInterceptor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.TryAddSchemaInterceptor(HotChocolate.Configuration.ISchemaInterceptor)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaBuilder.New">
            <summary>
            Creates a new <see cref="T:HotChocolate.SchemaBuilder"/> instance.
            </summary>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.SchemaBuilder"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.SchemaOptions">
            <summary>
            Represents mutable schema options.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.QueryTypeName">
            <summary>
            Gets or sets the name of the query type.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.MutationTypeName">
            <summary>
            Gets or sets the name of the mutation type.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.SubscriptionTypeName">
            <summary>
            Gets or sets the name of the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.StrictValidation">
            <summary>
            Defines if the schema allows the query type to be omitted.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.UseXmlDocumentation">
            <summary>
            Defines if the CSharp XML documentation shall be integrated.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.ResolveXmlDocumentationFileName">
            <summary>
            A delegate which defines the name of the XML documentation file to be read.
            Only used if <seealso cref="P:HotChocolate.SchemaOptions.UseXmlDocumentation"/> is true.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.SortFieldsByName">
            <summary>
            Defines if fields shall be sorted by name.
            Default: <c>false</c>
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.PreserveSyntaxNodes">
            <summary>
            Defines if syntax nodes shall be preserved on the type system objects
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.EnableDirectiveIntrospection">
            <summary>
            Defines if the experimental directive introspection feature shall be enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.DefaultDirectiveVisibility">
            <summary>
            The default directive visibility when directive introspection is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.AllowInlining">
            <summary>
            Defines if field inlining is allowed.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.DefaultResolverStrategy">
            <summary>
            Defines that the default resolver execution strategy.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.ValidatePipelineOrder">
            <summary>
            Defines if the order of important middleware components shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.StrictRuntimeTypeValidation">
            <summary>
            Defines if the runtime types of types shall be validated.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.DefaultIsOfTypeCheck">
            <summary>
            Defines a delegate that determines if a runtime
            is an instance of an <see cref="T:HotChocolate.Types.ObjectType`1"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.SchemaOptions.EnableOneOf">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SchemaOptions.FromOptions(HotChocolate.IReadOnlySchemaOptions)">
            <summary>
            Creates a mutable options object from a read-only options object.
            </summary>
            <param name="options">The read-only options object.</param>
            <returns>Returns a new mutable options object.</returns>
        </member>
        <member name="T:HotChocolate.Types.Argument">
            <summary>
            Represents a field or directive argument.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Argument.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Argument.DeclaringMember">
            <summary>
            Gets the type system member that declares this argument.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Argument.Type">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Argument.RuntimeType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Argument.DefaultValue">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Argument.Formatter">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Argument.IsOptional">
            <summary>
            Defines if the runtime type is represented as an <see cref="T:HotChocolate.Optional`1" />.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Argument.ToString">
            <summary>
            Returns a string that represents the current argument.
            </summary>
            <returns>
            A string that represents the current argument.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.BindFieldAttribute">
            <summary>
            Binds a member of a type extension to a field of the actual type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.BindFieldAttribute.#ctor(System.String)">
            <summary>
            Binds a member of a type extension to a field of the actual type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.BindFieldAttribute.Name">
            <summary>
            The GraphQL field name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.BindFieldAttribute.Replace">
            <summary>
            Defines if the members shall be merged or if this member with all its settings
            will replace the original one.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.BindMemberAttribute">
            <summary>
            Binds a member of a type extension to a member of the actual type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.BindMemberAttribute.#ctor(System.String)">
            <summary>
            Binds a member of a type extension to a member of the actual type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.BindMemberAttribute.Name">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.BindMemberAttribute.Replace">
            <summary>
            Defines if the members shall be merged or if this member with all its settings
            will replace the original one.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DescriptorAttribute.Order">
            <summary>
            Gets the order in which the attributes shall be applied.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DescriptorAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext,HotChocolate.Types.IDescriptor,System.Reflection.ICustomAttributeProvider)">
            <summary>
            Override this to implement the configuration logic for this attribute.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumTypeAttribute.Name">
            <summary>
            Gets or sets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ExtendObjectTypeAttribute">
            <summary>
            Annotate classes which represent extensions to other object types.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ExtendObjectTypeAttribute.Name">
            <summary>
            Gets the GraphQL type name to which this extension is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ExtendObjectTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ExtendObjectTypeAttribute.ExtendsType">
            <summary>
            Gets the .NET type to which this extension is bound to.
            If this is a base type or an interface the extension will bind to all types
            inheriting or implementing the type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreFields">
            <summary>
            Gets a set of field names that will be removed from the extended type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ExtendObjectTypeAttribute.IgnoreProperties">
            <summary>
            Gets a set of property names that will be removed from the extended type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ExtendObjectTypeAttribute.OnConfigure(HotChocolate.Types.Descriptors.IDescriptorContext,HotChocolate.Types.IObjectTypeDescriptor,System.Type)">
            <summary>
            Applies the type extension configuration.
            </summary>
            <param name="context">
            The descriptor context.
            </param>
            <param name="descriptor">
            The object type descriptor.
            </param>
            <param name="type">
            The type to which this instance is annotated to.
            </param>
        </member>
        <member name="P:HotChocolate.Types.InputObjectTypeAttribute.Name">
            <summary>
            Gets or sets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InputObjectTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InterfaceTypeAttribute.Name">
            <summary>
            Gets or sets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InterfaceTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ITypeAttribute">
            <summary>
            The type attribute interface is implement by GraphQL type attributes and provides
            additional information about the annotated type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ITypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ITypeAttribute.Kind">
            <summary>
            Gets the kind of type represented by this attribute.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ITypeAttribute.IsTypeExtension">
            <summary>
            Defines if this attribute represents a type extension.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ObjectTypeAttribute">
            <summary>
            Specifies that the annotated class, struct or interface shall be
            interpreted as a GraphQL object type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectTypeAttribute.Name">
            <summary>
            Gets or sets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ParallelAttribute">
            <summary>
            Marks a resolver as parallel executable which will allow the execution engine
            to execute this resolver in parallel with other resolvers.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.SerialAttribute">
            <summary>
            Marks a resolver as serial executable which will ensure that the execution engine
            synchronizes resolver execution around the annotated resolver and ensures that
            no other resolver is executed in parallel.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.SubscribeAttribute.MessageType">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.SubscribeAttribute.With">
            <summary>
            The method that shall be used to subscribe to the pub/sub system.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TopicAttribute.Name">
            <summary>
            Gets or sets the constant topic name that shall be used to receive messages.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.UnionTypeAttribute.Name">
            <summary>
            Gets or sets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.UnionTypeAttribute.Inherited">
            <summary>
            Defines if this attribute is inherited. The default is <c>false</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.UseServiceScopeAttribute">
             <summary>
             Wraps a middleware around the field that creates a service scope
             for the wrapped pipeline.
            
             Middleware order matters, so in most cases this should be the most outer middleware.
             </summary>
        </member>
        <member name="T:HotChocolate.Types.IComplexOutputType">
            <summary>
            A complex output type can be an <see cref="T:HotChocolate.Types.ObjectType" />
            or an <see cref="T:HotChocolate.Types.InterfaceType" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IComplexOutputType.Implements">
            <summary>
            Gets the interfaces that are implemented by this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IComplexOutputType.Fields">
            <summary>
            Gets the field that this type exposes.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IComplexOutputType.IsImplementing(HotChocolate.NameString)">
            <summary>
            Defines if this type is implementing an interface
            with the given <paramref name="typeName" />.
            </summary>
            <param name="typeName">
            The interface type name.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IComplexOutputType.IsImplementing(HotChocolate.Types.IInterfaceType)">
            <summary>
            Defines if this type is implementing the
            the given <paramref name="interfaceType" />.
            </summary>
            <param name="interfaceType">
            The interface type.
            </param>
        </member>
        <member name="T:HotChocolate.Types.IEnumType">
            <summary>
            Represents a GraphQL enum type
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumType.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumType.Values">
            <summary>
            Gets the possible enum values.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumType.TryGetValue(HotChocolate.NameString,HotChocolate.Types.IEnumValue@)">
            <summary>
            Tries to get the <paramref name="value"/> for
            the specified <paramref name="name"/>.
            </summary>
            <param name="name">
            The GraphQL enum value name.
            </param>
            <param name="value">
            The GraphQL enum value.
            </param>
            <returns>
            <c>true</c> if the <paramref name="name"/> represents a value of this enum type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.IEnumType.TryGetRuntimeValue(HotChocolate.NameString,System.Object@)">
            <summary>
            Tries to get the <paramref name="runtimeValue"/> for
            the specified <paramref name="name"/>.
            </summary>
            <param name="name">
            The GraphQL enum value name.
            </param>
            <param name="runtimeValue">
            The .NET runtime value.
            </param>
            <returns>
            <c>true</c> if the <paramref name="name"/> represents a value of this enum type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IEnumType`1">
            <summary>
            Represents a GraphQL enum type
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumType`1.TryGetRuntimeValue(HotChocolate.NameString,`0@)">
            <summary>
            Tries to get the <paramref name="runtimeValue"/> for
            the specified <paramref name="name"/>.
            </summary>
            <param name="name">
            The GraphQL enum value name.
            </param>
            <param name="runtimeValue">
            The .NET runtime value.
            </param>
            <returns>
            <c>true</c> if the <paramref name="name"/> represents a value of this enum type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IEnumValue">
            <summary>
            Represents a GraphQL enum value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.Name">
            <summary>
            The GraphQL name of this enum value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.Description">
            <summary>
            Gets the GraphQL description for this enum value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.IsDeprecated">
            <summary>
            Defines if this enum value is deprecated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.DeprecationReason">
            <summary>
            Gets the deprecation reason for this enum value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IEnumValue.Value">
            <summary>
            Gets the runtime value.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IField">
            <summary>
            Represents a field or argument of input- or output-types.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IField.DeclaringType">
            <summary>
            Gets the type of which declares this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IField.Index">
            <summary>
            The index of this field in the declaring type system member`s field collection.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasDescription">
            <summary>
            GraphQL type system members that have a description.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasDescription.Description">
            <summary>
            Gets the description of the object.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasDirectives">
            <summary>
            GraphQL type system members that have directives.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasDirectives.Directives">
            <summary>
            Gets the directives of this type system member.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasFieldCoordinate">
            <summary>
            GraphQL type system members that have a field coordinate.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasFieldCoordinate.Coordinate">
            <summary>
            Field coordinate help with pointing to a field or argument in the schema.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasName">
            <summary>
            GraphQL type system members that have a name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasName.Name">
            <summary>
            Gets the GraphQL type system member name.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasScope">
            <summary>
            GraphQL type system members that can be scoped.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasScope.Scope">
            <summary>
            Gets a scope name that was provided by an extension.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasSyntaxNode">
            <summary>
            All implementing classes might correlate to a syntax node
            in a parsed GraphQL SDL syntax tree.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasSyntaxNode.SyntaxNode">
            <summary>
            Gets the associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasTypeDefinition.Definition">
            <summary>
            Gets the inner type definition if it is still available.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasTypeIdentity">
            <summary>
            GraphQL type system members that have a type identity.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasTypeIdentity.TypeIdentity">
            <summary>
            Gets the type identity of this type system member.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputField">
            <summary>
            Represents an input field. Input fields can be arguments of fields
            or fields of an input objects.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputFieldInfo">
            <summary>
            This interface aggregates the most important attributes of a input-field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputFieldInfo.Type">
            <summary>
            Gets the type of this input field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputFieldInfo.DefaultValue">
            <summary>
            Gets the default value literal of this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputFieldInfo.Formatter">
            <summary>
            Gets a formatter that shall intercept deserialized values and reformat them.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputObjectType">
            <summary>
            Represents a GraphQL input object type
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputObjectType.Fields">
            <summary>
            Gets the field that this type exposes.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputValueFormatter">
            <summary>
            An <see cref="T:HotChocolate.Types.IInputValueFormatter"/> can intercept deserialized runtime values and
            reformat them into another value. This interface is useful to for instance apply
            logic like the relay IDs.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInputValueFormatter.OnAfterDeserialize(System.Object)">
            <summary>
            Is called after the field has deserialized its value.
            If you do not want to handle a value just return the incoming <paramref name="runtimeValue"/>;
            otherwise, return the formatted value.
            </summary>
            <param name="runtimeValue">
            The originally deserialized runtime value.
            </param>
            <returns>
            Returns either the <paramref name="runtimeValue"/> or another value
            that represents a formatted version or it.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IInterfaceType">
            <summary>
            Represents a GraphQL interface type
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInterfaceType.SyntaxNode">
            <summary>
            Gets the syntax node representation of this interface type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Resolves the concrete type for the value of a type 
            that implements this interface.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The value for which the type shall be resolved.
            </param>
            <returns>
            Returns <c>null</c> if the value is not of a type 
            implementing this interface.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.ILeafType">
            <summary>
            Represents a GraphQL leaf-type e.g. scalar or enum.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.IsInstanceOfType(HotChocolate.Language.IValueNode)">
            <summary>
            Defines if the given <paramref name="valueSyntax"/> is possibly of this type.
            </summary>
            <param name="valueSyntax">
            The GraphQL value syntax which shall be validated.
            </param>
            <returns>
            <c>true</c> if the given <paramref name="valueSyntax"/> is possibly of this type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.IsInstanceOfType(System.Object)">
            <summary>
            Defines if the given <paramref name="runtimeValue"/> is possibly of this type.
            </summary>
            <param name="runtimeValue">
            The runtime value which shall be validated.
            </param>
            <returns>
            <c>true</c> if the given <paramref name="runtimeValue"/> is possibly of this type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.ParseLiteral(HotChocolate.Language.IValueNode)">
            <summary>
            Parses the GraphQL value syntax of this type into a runtime value representation.
            </summary>
            <param name="valueSyntax">
                A GraphQL value syntax representation of this type.
            </param>
            <returns>
            Returns a runtime value representation of this type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.ParseValue(System.Object)">
            <summary>
            Parses a runtime value of this type into a GraphQL value syntax representation.
            </summary>
            <param name="runtimeValue">
            A result value representation of this type.
            </param>
            <returns>
            Returns a GraphQL value syntax representation of the <paramref name="runtimeValue"/>.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            Unable to parse the given <paramref name="runtimeValue"/>
            into a GraphQL value syntax representation of this type.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.ParseResult(System.Object)">
            <summary>
            Parses a result value of this into a GraphQL value syntax representation.
            </summary>
            <param name="resultValue">
            A result value representation of this type.
            </param>
            <returns>
            Returns a GraphQL value syntax representation of the <paramref name="resultValue"/>.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            Unable to parse the given <paramref name="resultValue"/>
            into a GraphQL value syntax representation of this type.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.Serialize(System.Object)">
            <summary>
            Serializes a runtime value of this type to the result value format.
            </summary>
            <param name="runtimeValue">
            A runtime value representation of this type.
            </param>
            <returns>
            Returns a result value representation of this type.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            Unable to serialize the given <paramref name="runtimeValue"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ILeafType.Deserialize(System.Object)">
            <summary>
            Deserializes a result value of this type to the runtime value format.
            </summary>
            <param name="resultValue">
            A result value representation of this type.
            </param>
            <returns>
            Returns a runtime value representation of this type.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.INamedInputType">
            <summary>
            Represents a GraphQL input type which has a name.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.INamedOutputType">
            <summary>
            Represents a GraphQL output type which has a name.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.INamedType">
            <summary>
            Represents a named GraphQL type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.INamedType.IsAssignableFrom(HotChocolate.Types.INamedType)">
            <summary>
            Determines whether an instance of a specified type <paramref name="type" />
            can be assigned to a variable of the current type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.INamedTypeExtension">
            <summary>
            This is not a full type and is used to split the type configuration into multiple part.
            Any type extension instance is will not survive the initialization and instead is
            merged into the target type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.INamedTypeExtension.Kind">
            <summary>
            The kind of type this type extension extends.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.INamedTypeExtension.ExtendsType">
            <summary>
            Gets a type which this type extension extends.
            The type can be null if a name is used to match this.
            The type can be a runtime type or a schema type and
            needs either to match fully the extended type or be
            implemented by it.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.INamedTypeExtensionMerger">
            <summary>
            This internal interface is used by the type initialization to
            merge the type extension into the actual type..
            </summary>
        </member>
        <member name="M:HotChocolate.Types.INamedTypeExtensionMerger.Merge(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.INamedType)">
            <summary>
            The merge method that allows to merge the type extension into the named type.
            </summary>
            <param name="context">The type extension completion context.</param>
            <param name="type">The target type into which we merge the type extension.</param>
        </member>
        <member name="T:HotChocolate.Types.IObjectField">
            <summary>
            Represents a field of an <see cref="T:HotChocolate.Types.IObjectType"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.DeclaringType">
            <summary>
            Gets the type that declares this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.IsParallelExecutable">
            <summary>
            Defines if this field can be executed in parallel with other fields.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.Middleware">
            <summary>
            Gets the field resolver middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.Resolver">
            <summary>
            Gets the field resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.PureResolver">
            <summary>
            Gets the pure field resolver. The pure field resolver is only available if this field
            can be resolved without side-effects. The execution engine will prefer this resolver
            variant if it is available and there are no executable directives that add a middleware
            to this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.SubscribeResolver">
            <summary>
            Gets the subscription resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.ExecutableDirectives">
            <summary>
            Gets all executable directives that are associated with this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.Member">
            <summary>
            Gets the associated member of the runtime type for this field.
            This property can be <c>null</c> if this field is not associated to
            a concrete member on the runtime type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.ResolverMember">
            <summary>
            Gets the resolver member of this filed.
            If this field has no explicit resolver member
            this property will return <see cref="P:HotChocolate.Types.IObjectField.Member"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectField.MaybeStream">
            <summary>
            Defines that the result of this field might be a stream.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IObjectType">
            <summary>
            Represents a GraphQL object type
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectType.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IObjectType.Fields">
            <summary>
            Gets the field that the type exposes.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectType.IsInstanceOfType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Specifies if the specified <paramref name="resolverResult" /> is an instance of
            this object type.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The result that shall be checked.
            </param>
            <returns>
            <c>true</c> if the <see cref="!:resolverResult"/> is an instance of this type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IOutputField">
            <summary>
            Represents an output field on a interface or object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputField.IsIntrospectionField">
            <summary>
            Defines if this field is a introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputField.IsDeprecated">
            <summary>
            Defines if this field is deprecated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputField.DeprecationReason">
            <summary>
            Gets the deprecation reason.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputField.DeclaringType">
            <summary>
            Gets the type that declares this field.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IOutputFieldInfo">
            <summary>
            This interface aggregates the most important attributes of a output-field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputFieldInfo.Type">
            <summary>
            Gets the return type of this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IOutputFieldInfo.Arguments">
            <summary>
            Gets the field arguments.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IUnionType">
            <summary>
            Represents a GraphQL union type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IUnionType.SyntaxNode">
            <summary>
            Gets the syntax node representation of this union type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IUnionType.Types">
            <summary>
            Gets the <see cref="T:HotChocolate.Types.IObjectType" /> set of this union type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IUnionType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Resolves the concrete type for the value of a type
            that implements this interface.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The value for which the type shall be resolved.
            </param>
            <returns>
            Returns <c>null</c> if the value is not of a type
            implementing this interface.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.IUnionType.ContainsType(HotChocolate.Types.IObjectType)">
            <summary>
            Checks if the type set of this union type contains the
            specified <paramref name="objectType"/>.
            </summary>
            <param name="objectType">
            The object type.
            </param>
            <returns>
            Returns <c>true</c>, if the type set of this union type contains the
            specified <paramref name="objectType"/>; otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.IUnionType.ContainsType(HotChocolate.NameString)">
            <summary>
            Checks if the type set of this union type contains the
            specified <paramref name="typeName"/>.
            </summary>
            <param name="typeName">
            The type name.
            </param>
            <returns>
            Returns <c>true</c>, if the type set of this union type contains the
            specified <paramref name="typeName"/>; otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.SerializationException">
            <summary>
            The serialization exception is thrown whenever a type cannot
            serialize, deserialize or parse a value.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.SerializationException.#ctor(System.String,HotChocolate.Types.IType,HotChocolate.Path)">
            <summary>
            Initializes the <see cref="T:HotChocolate.Types.SerializationException"/>.
            </summary>
            <param name="message">
            The error message.
            </param>
            <param name="type">
            The type that caused the serialization exception.
            </param>
            <param name="path">
            The field path that points to the exact field causing the exception.
            </param>
        </member>
        <member name="M:HotChocolate.Types.SerializationException.#ctor(HotChocolate.IError,HotChocolate.Types.IType,HotChocolate.Path)">
            <summary>
            Initializes the <see cref="T:HotChocolate.Types.SerializationException"/>.
            </summary>
            <param name="error">
            The serialization error object.
            </param>
            <param name="type">
            The type that caused the serialization exception.
            </param>
            <param name="path">
            The field path that points to the exact field causing the exception.
            </param>
        </member>
        <member name="P:HotChocolate.Types.SerializationException.Type">
            <summary>
            The type that caused the serialization exception.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.SerializationException.Path">
            <summary>
            The field path that points to the exact field causing the exception.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Convention.Scope">
            <summary>
            Gets a scope name that was provided by an extension.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ConventionContext.Scope">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ConventionContext.Services">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ConventionContext.ContextData">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ConventionContext.DescriptorContext">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeName(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeName(System.Type,HotChocolate.Types.TypeKind)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetTypeDescription(System.Type,HotChocolate.Types.TypeKind)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetMemberName(System.Reflection.MemberInfo,HotChocolate.Types.MemberKind)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetMemberDescription(System.Reflection.MemberInfo,HotChocolate.Types.MemberKind)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetArgumentName(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetArgumentDescription(System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetEnumValueName(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.GetEnumValueDescription(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.IsDeprecated(System.Reflection.MemberInfo,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.IsDeprecated(System.Object,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultNamingConventions.FormatFieldName(System.String)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.DefaultTypeInspector">
            <summary>
            The default type inspector implementation that provides helpers to inspect .NET types and
            infer GraphQL type structures.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DefaultTypeInspector.IgnoreRequiredAttribute">
            <summary>
            Infer type to be non-null if <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/> is found.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetMembers(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetMembers(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.IsMemberIgnored(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetReturnTypeRef(System.Reflection.MemberInfo,HotChocolate.Types.TypeContext,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetReturnType(System.Reflection.MemberInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetArgumentTypeRef(System.Reflection.ParameterInfo,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetArgumentType(System.Reflection.ParameterInfo,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetTypeRef(System.Type,HotChocolate.Types.TypeContext,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type,System.Nullable{System.Boolean}[])">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetType(System.Type,System.ReadOnlySpan{System.Nullable{System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetEnumValues(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.GetEnumValueMember(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.ExtractNamedType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.IsSchemaType(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.ApplyAttributes(HotChocolate.Types.Descriptors.IDescriptorContext,HotChocolate.Types.IDescriptor,System.Reflection.ICustomAttributeProvider)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.TryGetDefaultValue(System.Reflection.ParameterInfo,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.TryGetDefaultValue(System.Reflection.PropertyInfo,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType,System.Nullable{System.Boolean}[])">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType,System.ReadOnlySpan{System.Nullable{System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType,System.Span{System.Nullable{System.Boolean}},System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeInfo(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeInfo(HotChocolate.Internal.IExtendedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.CreateTypeFactory(HotChocolate.Internal.IExtendedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.TryCreateTypeInfo(System.Type,HotChocolate.Internal.ITypeInfo@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DefaultTypeInspector.TryCreateTypeInfo(HotChocolate.Internal.IExtendedType,HotChocolate.Internal.ITypeInfo@)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.DescriptorContext">
            <summary>
            The descriptor context is passed around during the schema creation and
            allows access to conventions and context data.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.Services">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.Options">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.Naming">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.TypeInspector">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.SchemaInterceptor">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.TypeInterceptor">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.ResolverCompiler">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.InputParser">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.InputFormatter">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DescriptorContext.ContextData">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DescriptorContext.GetConventionOrDefault``1(System.Func{``0},System.String)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.IConvention">
            <summary>
            This is a marker interface to collect registered type conventions from
            the dependency injection container.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.IConventionContext">
            <summary>
            The convention context is available during the convention initialization process.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IConventionContext.Services">
            <summary>
            The schema level services.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IConventionContext.ContextData">
            <summary>
            The schema builder context data that can be used for extensions
            to pass state along the initialization process.
            This property can also be reached through <see cref="!:IDescriptorContext.ContextData" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IConventionContext.DescriptorContext">
            <summary>
            The descriptor context that is passed through the initialization process.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.IDescriptorContext">
            <summary>
            The descriptor context is passed around during the schema creation and
            allows access to conventions and context data.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.Options">
            <summary>
            Gets the schema options.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.Services">
            <summary>
            Gets the schema services.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.Naming">
            <summary>
            Gets the naming conventions.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.TypeInspector">
            <summary>
            Gets the type inspector.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.SchemaInterceptor">
            <summary>
            Gets the schema interceptor.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.TypeInterceptor">
            <summary>
            Gets the type interceptor.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.ResolverCompiler">
            <summary>
            Gets the resolver compiler.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.InputParser">
            <summary>
            Gets the input parser.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.IDescriptorContext.InputFormatter">
            <summary>
            Gets the input formatter.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.IDescriptorContext.GetConventionOrDefault``1(System.Func{``0},System.String)">
            <summary>
            Gets a custom convention.
            </summary>
            <param name="defaultConvention">The default contention.</param>
            <param name="scope">An optional scope for this convention.</param>
            <typeparam name="T">The type of the convention.</typeparam>
            <returns>
            Returns the convention.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.IDocumentationProvider">
            <summary>
            The documentation provider is able to extract GraphQL type system
            documentation from the associated .NET type system.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Type)">
            <summary>
            Gets the documentation for a GraphQL type from the
            associated <see cref="T:System.Type" />.
            </summary>
            <param name="type">
            The type from which the documentation shall be extracted.
            </param>
            <returns>
            Returns a markdown string (https://commonmark.org)
            describing the GraphQL type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            Gets the documentation for a GraphQL input-, output-field or
            directive argument from the associated <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="member">
            The member from which the documentation shall be extracted.
            </param>
            <returns>
            Returns a markdown string (https://commonmark.org)
            describing the GraphQL input-, output-field or
            directive argument,
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.IDocumentationProvider.GetDescription(System.Reflection.ParameterInfo)">
            <summary>
            Gets the documentation for a GraphQL field argument from the
            associated <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="parameter">
            The parameter from which the documentation shall be extracted.
            </param>
            <returns>
            Returns a markdown string (https://commonmark.org)
            describing the GraphQL field argument.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.INamingConventions.FormatFieldName(System.String)">
            <summary>
            Formats a fieldName to abide by the current field naming convention.
            </summary>
            <param name="fieldName">
            The field name that needs formatting.
            </param>
            <returns>
            Returns a name string that has the correct naming format.
            </returns>
            <exception cref="T:System.ArgumentException">
            The field is <c>null</c> or <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.ITypeInspector">
            <summary>
            The type inspector provides helpers to inspect .NET types and
            infer GraphQL type structures.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetMembers(System.Type)">
            <summary>
            Gets the relevant members of a object or input object.
            </summary>
            <param name="type">
            The type that represents the object type.
            </param>
            <returns>
            Returns the relevant members of a object or input object.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetMembers(System.Type,System.Boolean)">
            <summary>
            Gets the relevant members of a object or input object.
            </summary>
            <param name="type">
            The type that represents the object type.
            </param>
            <param name="includeIgnored">
            The type that represents the object type.
            </param>
            <returns>
            Returns the relevant members of a object or input object.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.IsMemberIgnored(System.Reflection.MemberInfo)">
            <summary>
            Defines if a member shall be ignored. This method interprets ignore attributes.
            </summary>
            <param name="member">
            The member that shall be inspected.
            </param>
            <returns>
            <c>true</c> if the member shall be ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetReturnTypeRef(System.Reflection.MemberInfo,HotChocolate.Types.TypeContext,System.String,System.Boolean)">
            <summary>
            Gets the field type reference from a <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="member">
            The member from which the field type shall be extracted.
            </param>
            <param name="context">
            The context defines if the field has an input or output context.
            </param>
            <param name="scope">
            The type reference scope.
            </param>
            <param name="ignoreAttributes">
            Ignores the attributes applied to the member e.g. <see cref="T:HotChocolate.GraphQLTypeAttribute"/>.
            </param>
            <returns>
            Returns a type reference describing the type of the field.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetReturnType(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the field type from a <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="member">
            The member from which the field type shall be extracted.
            </param>
            <param name="ignoreAttributes">
            Ignores the attributes applied to the member e.g. <see cref="T:HotChocolate.GraphQLTypeAttribute"/>.
            </param>
            <returns>
            Returns a type reference describing the type of the field.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetArgumentTypeRef(System.Reflection.ParameterInfo,System.String,System.Boolean)">
            <summary>
            Gets the field argument type reference from a <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="parameter">
            The parameter from which the argument type shall be extracted.
            </param>
            <param name="scope">
            The type reference scope.
            </param>
            <param name="ignoreAttributes">
            Ignores the attributes applied to the member e.g. <see cref="T:HotChocolate.GraphQLTypeAttribute"/>.
            </param>
            <returns>
            Returns a type reference describing the type of the argument.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetArgumentType(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Gets the field argument type from a <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="parameter">
            The parameter from which the argument type shall be extracted.
            </param>
            <param name="ignoreAttributes">
            Ignores the attributes applied to the member e.g. <see cref="T:HotChocolate.GraphQLTypeAttribute"/>.
            </param>
            <returns>
            Returns a type reference describing the type of the argument.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetTypeRef(System.Type,HotChocolate.Types.TypeContext,System.String)">
            <summary>
            Gets a type reference from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="context">
            The context defines if the field has an input or output context.
            </param>
            <param name="scope">
            The type scope.
            </param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type)">
            <summary>
            Gets the extended type representation for the provided <paramref name="type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            Returns the extended type representation for the provided <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type,System.Nullable{System.Boolean}[])">
            <summary>
            Gets the extended type representation for the provided <paramref name="type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="nullable">
            Defines an array that specifies how to apply nullability information
            to the type components.
            </param>
            <returns>
            Returns the extended type representation for the provided <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetType(System.Type,System.ReadOnlySpan{System.Nullable{System.Boolean}})">
            <summary>
            Gets the extended type representation for the provided <paramref name="type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="nullable">
            Defines an array that specifies how to apply nullability information
            to the type components.
            </param>
            <returns>
            Returns the extended type representation for the provided <paramref name="type"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetEnumValues(System.Type)">
            <summary>
            Extracts the values of an enum type.
            </summary>
            <param name="enumType">
            The enum type.
            </param>
            <returns>
            Returns the extracted values of an enum type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetEnumValueMember(System.Object)">
            <summary>
            Gets the associated enum value member.
            </summary>
            <param name="value">
            The enum value.
            </param>
            <returns>
            Returns the associated enum value member.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetNodeIdMember(System.Type)">
            <summary>
            Gets the member that represents the node ID.
            </summary>
            <param name="type">
            The type from which the node ID shall be inferred.
            </param>
            <returns>
            The member that represents node ID or <c>null</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetNodeResolverMethod(System.Type,System.Type)">
            <summary>
            Gets the method that represents the node resolver.
            </summary>
            <param name="nodeType">
            The type which represents a node.
            </param>
            <param name="resolverType">
            The type which provides a resolver to load a node by its id.
            </param>
            <returns>
            The member that represents node resolver or <c>null</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.ExtractNamedType(System.Type)">
            <summary>
            Extracts the named type from a type structure.
            </summary>
            <param name="type">The original type structure.</param>
            <returns>
            Returns the named type form a type structure.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.IsSchemaType(System.Type)">
            <summary>
            Checks if the provided type is a schema type.
            </summary>
            <param name="type">
            The system type that shall be evaluated.
            </param>
            <returns>
            <c>true</c> if the provided type is a schema type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.ApplyAttributes(HotChocolate.Types.Descriptors.IDescriptorContext,HotChocolate.Types.IDescriptor,System.Reflection.ICustomAttributeProvider)">
            <summary>
            Applies the attribute configurations to the descriptor.
            </summary>
            <param name="context">
            The descriptor context.
            </param>
            <param name="descriptor">
            The descriptor to which the configuration shall be applied to.
            </param>
            <param name="attributeProvider">
            The attribute provider.
            </param>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.TryGetDefaultValue(System.Reflection.ParameterInfo,System.Object@)">
            <summary>
            Tries to extract a default value from a parameter.
            </summary>
            <param name="parameter">
            The parameter from which the default value shall be extracted.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            <c>true</c> if a default value was available.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.TryGetDefaultValue(System.Reflection.PropertyInfo,System.Object@)">
            <summary>
            Tries to extract a default value from a property.
            </summary>
            <param name="property">
            The property from which the default value shall be extracted.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>
            <c>true</c> if a default value was available.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType,System.Nullable{System.Boolean}[])">
            <summary>
            Rewrites a types nullability.
            </summary>
            <param name="type">
            The original type.
            </param>
            <param name="nullable">
            The new nullability pattern.
            </param>
            <returns>
            Returns a new type that conforms to the new nullability pattern.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.ChangeNullability(HotChocolate.Internal.IExtendedType,System.ReadOnlySpan{System.Nullable{System.Boolean}})">
            <summary>
            Rewrites a types nullability.
            </summary>
            <param name="type">
            The original type.
            </param>
            <param name="nullable">
            The new nullability pattern.
            </param>
            <returns>
            Returns a new type that conforms to the new nullability pattern.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType)">
            <summary>
            Collects the nullability information from the given type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            Returns the nullability from the type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.CollectNullability(HotChocolate.Internal.IExtendedType,System.Span{System.Nullable{System.Boolean}},System.Int32@)">
            <summary>
            Collects the nullability information from the given type.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="buffer">
            The buffer to which the nullability status is written to.
            </param>
            <param name="written">
            Specifies how many nullability information was written to the buffer.
            </param>
            <returns>
            <c>true</c> if the buffer had sufficient space.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeInfo(System.Type)">
            <summary>
            Create a <see cref="T:HotChocolate.Internal.ITypeInfo"/> from the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The system type from which the <see cref="T:HotChocolate.Internal.ITypeInfo"/> shall be created.
            </param>
            <returns>
            The type info.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeInfo(HotChocolate.Internal.IExtendedType)">
            <summary>
            Create a <see cref="T:HotChocolate.Internal.ITypeInfo"/> from the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The system type from which the <see cref="T:HotChocolate.Internal.ITypeInfo"/> shall be created.
            </param>
            <returns>
            The type info.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.CreateTypeFactory(HotChocolate.Internal.IExtendedType)">
            <summary>
            Create a <see cref="T:HotChocolate.Internal.ITypeFactory"/> from the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The system type from which the <see cref="T:HotChocolate.Internal.ITypeFactory"/> shall be created.
            </param>
            <returns>
            The type factory.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.TryCreateTypeInfo(System.Type,HotChocolate.Internal.ITypeInfo@)">
            <summary>
            Tries to create a <see cref="T:HotChocolate.Internal.ITypeInfo"/> from the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The system type from which the <see cref="T:HotChocolate.Internal.ITypeInfo"/> shall be created.
            </param>
            <param name="typeInfo">
            The type info.
            </param>
            <returns>
            <c>true</c> if a type info could be created.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.TryCreateTypeInfo(HotChocolate.Internal.IExtendedType,HotChocolate.Internal.ITypeInfo@)">
            <summary>
            Tries to create a <see cref="T:HotChocolate.Internal.ITypeInfo"/> from the given <paramref name="type"/>.
            </summary>
            <param name="type">
            The extended type from which the <see cref="T:HotChocolate.Internal.ITypeInfo"/> shall be created.
            </param>
            <param name="typeInfo">
            The type info.
            </param>
            <returns>
            <c>true</c> if a type info could be created.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.IXmlDocumentationFileResolver">
            <summary>
            Resolves an XML documentation file from an assembly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.IXmlDocumentationFileResolver.TryGetXmlDocument(System.Reflection.Assembly,System.Xml.Linq.XDocument@)">
            <summary>
            Trues to resolve an XML documentation file from the given assembly..
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition">
            <summary>
            Defines the properties of a GraphQL argument type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.Descriptors.ITypeReference,HotChocolate.Language.IValueNode,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.DefinitionBase">
            <summary>
            A type system definition is used in the type initialization to store properties
            of a type system object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Name">
            <summary>
            Gets or sets the name the type shall have.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Description">
            <summary>
            Gets or sets the description the type shall have.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.BindTo">
            <summary>
            Gets or sets a name to which this definition is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.ContextData">
            <summary>
            Get access to context data that are copied to the type
            and can be used for customizations.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Dependencies">
            <summary>
            Gets access to additional type dependencies.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.HasDependencies">
            <summary>
            Defines if this type has dependencies.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Configurations">
            <summary>
            Gets configurations that shall be applied at a later point.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.HasConfigurations">
            <summary>
            Defines if this type has configurations.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.AttributesAreApplied">
            <summary>
            Defines whether descriptor attributes have been applied or not.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.GetConfigurations">
            <summary>
            Gets lazy configuration of this definition and all dependent definitions.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.GetDependencies">
            <summary>
            Gets access to additional type dependencies.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.GetContextData">
            <summary>
            Get access to context data that are copied to the type
            and can be used for customizations.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.DefinitionBase`1">
            <summary>
            A type system definition is used in the type initialization to store properties
            of a type system object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase`1.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase`1.HotChocolate#Types#IHasSyntaxNode#SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition">
            <summary>
            This definition represents a directive argument.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.Descriptors.ITypeReference,HotChocolate.Language.IValueNode,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveArgumentDefinition.Property">
            <summary>
            The property to which this argument binds to.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition">
            <summary>
            Defines the properties of a GraphQL directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsRepeatable">
            <summary>
            Defines if this directive can be specified multiple
            times on the same object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsPublic">
            <summary>
            Defines if this directive is visible when directive introspection is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.RuntimeType">
            <summary>
            Gets or sets the .net type representation of this directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.MiddlewareComponents">
            <summary>
            Gets or the associated middleware components.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Locations">
            <summary>
            Defines the location on which a directive can be annotated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Arguments">
            <summary>
            Gets the directive arguments.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.GetMiddlewareComponents">
            <summary>
            Gets or the associated middleware components.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.GetLocations">
            <summary>
            Defines the location on which a directive can be annotated.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.GetArguments">
            <summary>
            Gets the directive arguments.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition">
            <summary>
            Defines the properties of a GraphQL enum type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition.Values">
            <summary>
            Gets the enum values.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition">
            <summary>
            Defines the properties of a GraphQL enum value.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.#ctor(HotChocolate.NameString,System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.DeprecationReason">
            <summary>
            Gets the reason why this value was deprecated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.IsDeprecated">
            <summary>
            Defines if this enum value is deprecated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Ignore">
            <summary>
            Defines if this enum value is ignored 
            and therefore excluded from the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.RuntimeValue">
            <summary>
            Gets the runtime value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Member">
            <summary>
            Gets or sets the enum value member.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase">
            <summary>
            This definition represents a field or argument.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Type">
            <summary>
            Gets the field type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Ignore">
            <summary>
            Defines if this field is ignored and will
            not be included into the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Directives">
            <summary>
            Gets the list of directives that are annotated to this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.HasDirectives">
            <summary>
            Specifies if this field has any directives.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.GetDirectives">
            <summary>
            Gets the list of directives that are annotated to this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase`1.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase`1.HotChocolate#Types#IHasSyntaxNode#SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition">
            <summary>
            Represents a middleware configuration.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition.#ctor(HotChocolate.Resolvers.FieldMiddleware,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition"/>.
            </summary>
            <param name="middleware">
            The delegate representing the middleware.
            </param>
            <param name="isRepeatable">
            Defines if the middleware or result converters is repeatable and
            the same middleware is allowed to occur multiple times.
            </param>
            <param name="key">
            The key is optional and is used to identify a middleware.
            </param>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition.Middleware">
            <summary>
            Gets the delegate representing the middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition.IsRepeatable">
            <summary>
            Defines if the middleware or result converters is repeatable and
            the same middleware is allowed to be occur multiple times.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition.Key">
            <summary>
            The key is optional and is used to identify a middleware.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.IBindableList`1">
            <summary>
            A list that also exposes the binding behavior.
            </summary>
            <typeparam name="T">
            The element type.
            </typeparam>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IBindableList`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IBindableList`1.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the
            <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1" />
            is read-only.
            </exception>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IBindableList`1.BindingBehavior">
            <summary>
            Defines how items of the list can be bound.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.IBindableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds new items to this list.
            </summary>
            <param name="items">
            The items that shall be added.
            </param>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.IDefinition">
            <summary>
            A type system definition is used in the type initialization to store properties
            of a type system object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.Name">
            <summary>
            Gets or sets the name the type shall have.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.Description">
            <summary>
            Gets or sets the description the type shall have.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.BindTo">
            <summary>
            Gets or sets a name to which this definition is bound to.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.AttributesAreApplied">
            <summary>
            Defines whether descriptor attributes are applied or not.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.ContextData">
            <summary>
            Get access to context data that are copied to the type
            and can be used for customizations.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.Dependencies">
            <summary>
            Gets access to additional type dependencies.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.HasDependencies">
            <summary>
            Defines if this type has dependencies.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.Configurations">
            <summary>
            Gets configurations that shall be applied at a later point.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IDefinition.HasConfigurations">
            <summary>
            Defines if this type has configurations.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition.Directives">
            <summary>
            Gets the list of directives that are annotated to
            the implementing object.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition.GetDirectives">
            <summary>
            Gets the list of directives that are annotated to
            the implementing object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IHasExtendsType.ExtendsType">
            <summary>
            If this is a type definition extension this is the type we want to extend.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.IHasIgnore">
            <summary>
            Represents definitions that carry a ignore flag.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IHasIgnore.Ignore">
            <summary>
            Defines if this field is ignored and will
            not be included into the schema.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.IMiddlewareDefinition">
            <summary>
            Represents a middleware or result converter configuration.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IMiddlewareDefinition.IsRepeatable">
            <summary>
            Defines if the middleware or result converters is repeatable and
            the same middleware is allowed to be occur multiple times.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IMiddlewareDefinition.Key">
            <summary>
            The key is optional and is used to identify a middleware.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition">
            <summary>
            The <see cref="T:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition"/> contains the settings
            to create a <see cref="T:HotChocolate.Types.InputField"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.Descriptors.ITypeReference,HotChocolate.Language.IValueNode,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InputFieldDefinition.Property">
            <summary>
            Gets the associated property.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition">
            <summary>
            Defines the properties of a GraphQL input object type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.Fields">
            <summary>
            Gets the input fields.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.CreateInstance">
            <summary>
            Gets or sets the input object runtime value factory delegate.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition.GetFieldData">
            <summary>
            Gets or sets the delegate to extract the field values from the runtime value.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition">
            <summary>
            The <see cref="T:HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition"/> contains the settings
            to create a <see cref="T:HotChocolate.Types.InterfaceField"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.Descriptors.ITypeReference)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InterfaceFieldDefinition.Member">
            <summary>
            Gets the interface member to which this field is bound to.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition.HasInterfaces">
            <summary>
            Specifies if this definition has interfaces.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ITypeDefinition">
            <summary>
            Represents a type definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ITypeDefinition.NeedsNameCompletion">
            <summary>
            Specifies that this type system object needs an explicit name completion since it
            depends on another type system object to complete its name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ITypeDefinition.RuntimeType">
            <summary>
            Gets or sets the runtime type.
            The runtime type defines of which value the type is when it
            manifests in the execution engine.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration">
            <summary>
            A configuration object that is applied to a type system member at a certain event
            during the type system initialization.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration.Owner">
            <summary>
            The definition of the type system member that shall be configured.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration.On">
            <summary>
            Defines on which type initialization step this
            configurations is applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration.Dependencies">
            <summary>
            Defines types on on which this configuration is dependant on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration.AddDependency(HotChocolate.Types.Descriptors.Definitions.TypeDependency)">
            <summary>
            Adds an additional type dependency.
            </summary>
            <param name="dependency">
            The type dependency.
            </param>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ITypeSystemMemberConfiguration.Copy(HotChocolate.Types.Descriptors.Definitions.DefinitionBase)">
            <summary>
            Creates a copy of this object with the new <paramref name="newOwner"/>.
            </summary>
            <param name="newOwner">
            The new owner of this configuration.
            </param>
            <returns>
            Returns the new configuration.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding">
            <summary>
            Describes a binding to an object field.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.#ctor(HotChocolate.NameString,HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding"/>.
            </summary>
            <param name="name">
            The binding name.
            </param>
            <param name="type">
            The binding type.
            </param>
            <param name="replace">
            Defines if the bound property shall be replaced.
            </param>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Name">
            <summary>
            Gets the binding name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Type">
            <summary>
            Gets the binding type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBinding.Replace">
            <summary>
            Defines if the bound property shall be replaced.
            </summary>
            <value></value>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType">
            <summary>
            Describes what a field filter binds to.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType.Property">
            <summary>
            Binds to a property
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.ObjectFieldBindingType.Field">
            <summary>
            Binds to a GraphQL field
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition">
            <summary>
            The <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition"/> contains the settings
            to create a <see cref="T:HotChocolate.Types.ObjectField"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.Descriptors.ITypeReference,HotChocolate.Resolvers.FieldResolverDelegate,HotChocolate.Resolvers.PureFieldDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SourceType">
            <summary>
            The object runtime type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverType">
            <summary>
            The resolver type that exposes the resolver member.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Member">
            <summary>
            The member on the <see cref="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SourceType" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.BindToField">
            <summary>
            Defines a binding to another object field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResolverMember">
            <summary>
            The member that represents the resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Expression">
            <summary>
            The expression that represents the resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResultType">
            <summary>
            The result type of the resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Resolver">
            <summary>
            The delegate that represents the resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.PureResolver">
            <summary>
            The delegate that represents an optional pure resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.Resolvers">
            <summary>
            Gets or sets all resolvers at once.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.SubscribeResolver">
            <summary>
            The delegate that represents the pub-/sub-system subscribe delegate to open an
            event stream in case this field represents a subscription.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.MiddlewareDefinitions">
            <summary>
            A list of middleware components which will be used to form the field pipeline.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.ResultConverters">
            <summary>
            A list of converters that can transform the resolver result.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.CustomSettings">
            <summary>
            A list of custom settings objects that can be user in the type interceptors.
            Custom settings are not copied to the actual type system object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.IsIntrospectionField">
            <summary>
            Defines if this field configuration represents an introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.IsParallelExecutable">
            <summary>
            Defines if this field can be executed in parallel with other fields.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.GetMiddlewareDefinitions">
            <summary>
            A list of middleware components which will be used to form the field pipeline.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.GetResultConverters">
            <summary>
            A list of converters that can transform the resolver result.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition.GetCustomSettings">
            <summary>
            A list of custom settings objects that can be user in the type interceptors.
            Custom settings are not copied to the actual type system object.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition">
            <summary>
            Defines the properties of a GraphQL object type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.RuntimeType">
            <summary>
            Gets or sets the .net type representation of this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.FieldBindingType">
            <summary>
            The type that shall be used to infer fields from.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.KnownRuntimeTypes">
            <summary>
            Runtime types that also represent this GraphQL type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.FieldIgnores">
            <summary>
            Gets fields that shall be ignored.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsOfType">
            <summary>
            A delegate to determine if a resolver result is of this object type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.IsExtension">
            <summary>
            Defines if this type definition represents a object type extension.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.Interfaces">
            <summary>
            Gets the interfaces that this object type implements.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.HasInterfaces">
            <summary>
            Specifies if this definition has interfaces.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition.Fields">
            <summary>
            Gets the fields of this object type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase.HasArguments">
            <summary>
            Specifies if this field has any arguments.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.ResultConverterDefinition">
            <summary>
            Represents a result converter configuration.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ResultConverterDefinition.#ctor(HotChocolate.Resolvers.ResultConverterDelegate,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.FieldMiddlewareDefinition"/>.
            </summary>
            <param name="converter">
            The delegate representing the result converter.
            </param>
            <param name="isRepeatable">
            Defines if the middleware or result converters is repeatable and
            the same middleware is allowed to be occur multiple times.
            </param>
            <param name="key">
            The key is optional and is used to identify a middleware.
            </param>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ResultConverterDefinition.Converter">
            <summary>
            Gets the delegate representing the result converter.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ResultConverterDefinition.IsRepeatable">
            <summary>
            Defines if the middleware or result converters is repeatable and
            the same middleware is allowed to be occur multiple times.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ResultConverterDefinition.Key">
            <summary>
            The key is optional and is used to identify a middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.Directives">
            <summary>
            Gets the list of directives that are annotated to this schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.HasDirectives">
            <summary>
            Specifies if this schema has directives.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.GetDirectives">
            <summary>
            Gets the list of directives that are annotated to this schema.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1">
            <summary>
            A definition that represents a type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.NeedsNameCompletion">
            <summary>
            Specifies that this type system object needs an explicit name completion since it
            depends on another type system object to complete its name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.RuntimeType">
            <summary>
            Gets or sets the .net type representation of this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.ExtendsType">
            <summary>
            If this is a type definition extension this is the type we want to extend.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.Directives">
            <summary>
            Gets the list of directives that are annotated to this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.HasDirectives">
            <summary>
            Specifies if this definition has directives.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.GetDirectives">
            <summary>
            Gets the list of directives that are annotated to this field.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind">
            <summary>
            Defines when the type dependency has to be fulfilled.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Default">
            <summary>
            The dependency instance does not need to be completed.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Named">
            <summary>
            The dependency instance needs to have it`s name completed.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Completed">
            <summary>
            The dependency instance needs to be fully completed.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition">
            <summary>
            Defines the properties of a GraphQL union type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.#ctor(HotChocolate.NameString,System.String,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.ResolveAbstractType">
            <summary>
            A delegate to get the concrete object type of a resolver result.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition.Types">
            <summary>
            The types that make up the union type set.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Name(HotChocolate.NameString)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Description(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.DeprecationReason(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Deprecated(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Deprecated">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type(HotChocolate.Language.ITypeNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Type(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Argument(HotChocolate.NameString,System.Action{HotChocolate.Types.IArgumentDescriptor})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Ignore(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolver(HotChocolate.Resolvers.FieldResolverDelegate,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Resolve(HotChocolate.Resolvers.FieldResolverDelegate,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.ResolveWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Subscribe(HotChocolate.Resolvers.SubscribeResolverDelegate)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Use(HotChocolate.Resolvers.FieldMiddleware)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ObjectFieldDescriptor.Directive(HotChocolate.NameString,HotChocolate.Language.ArgumentNode[])">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Name">
            <summary>
            Gets the name of this reference.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Dependency">
            <summary>
            Gets the reference to the type this type is dependant on.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Factory">
            <summary>
            Gets a factory to create this type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Equals(HotChocolate.Types.Descriptors.DependantFactoryTypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.DependantFactoryTypeReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.ITypeReference">
            <summary>
            A type reference is used to refer to a type in the type system.
            This allows us to loosely couple types during schema creation.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ITypeReference.Kind">
            <summary>
            Gets the kind of type reference.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ITypeReference.Context">
            <summary>
            Gets the context in which the type reference was created.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.ITypeReference.Scope">
            <summary>
            Gets the scope in which the type reference was created.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.SyntaxTypeReference.Name">
            <summary>
            Gets the name of the named type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.SyntaxTypeReference.Type">
            <summary>
            Gets the internal syntax type reference.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.SyntaxTypeReference.Factory">
            <summary>
            Gets a factory to create this type. Note, a factory is optional.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(HotChocolate.Types.Descriptors.SyntaxTypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(HotChocolate.Types.Descriptors.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.SyntaxTypeReference.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.SyntaxTypeReference.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.Descriptors.SyntaxTypeReference.ToString">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.TypeReference">
            <summary>
            A type reference is used to refer to a type in the type system.
            This allows us to loosely couple types during schema creation.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.TypeReference.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.TypeReference.Context">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Descriptors.TypeReference.Scope">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Descriptors.TypeReferenceKind">
            <summary>
            Specifies the kind of type reference.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.TypeReferenceKind.ExtendedType">
            <summary>
            The type reference is represented by a .NET type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.TypeReferenceKind.SchemaType">
            <summary>
            The type reference is represented by a schema type reference.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.TypeReferenceKind.Syntax">
            <summary>
            The type reference is represented by a <see cref="T:HotChocolate.Language.ITypeNode"/>.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.TypeReferenceKind.Factory">
            <summary>
            The type reference is represented by a <see cref="T:HotChocolate.Language.ITypeNode"/> and
            contains a factory to create the type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.TypeReferenceKind.DependantFactory">
            <summary>
            The type reference refers to a type that is dependant on another type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.BindingBehavior">
            <summary>
            Defines the type system binding behavior.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.BindingBehavior.Implicit">
            <summary>
            Implicitly bind type system members.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.BindingBehavior.Explicit">
            <summary>
            Type system members need to be explicitly bound.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode)">
            <summary>
            Associates the argument with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="inputValueDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="T:HotChocolate.Types.IDescriptorExtension`1">
            <summary>
            Allows for access to the type definition.
            </summary>
            <typeparam name="T">The type definition.</typeparam>
        </member>
        <member name="P:HotChocolate.Types.IDescriptorExtension`1.Definition">
            <summary>
            The type definition.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeCreate(System.Action{`0})">
            <summary>
            Allows to rewrite the type definition before the type
            is created but after all the users descriptor changes
            are applied.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeCreate(System.Action{HotChocolate.Types.Descriptors.IDescriptorContext,`0})">
            <summary>
            Allows to rewrite the type definition before the type
            is created but after all the users descriptor changes
            are applied.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeNaming(System.Action{HotChocolate.Configuration.ITypeCompletionContext,`0})">
            <summary>
            Allows to rewrite the type definition before the type
            name is applied but after
            <see cref="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeCreate(System.Action{HotChocolate.Types.Descriptors.IDescriptorContext,`0})"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeCompletion(System.Action{HotChocolate.Configuration.ITypeCompletionContext,`0})">
            <summary>
            Allows to rewrite the type definition before the type
            is completed but after
            <see cref="M:HotChocolate.Types.IDescriptorExtension`1.OnBeforeNaming(System.Action{HotChocolate.Configuration.ITypeCompletionContext,`0})"/>.
            </summary>        
        </member>
        <member name="T:HotChocolate.Types.IDescriptor`1">
            <summary>
            A type system descriptor provides a fluent builder API to configure a type system member.
            The output of a descriptor is a definition which represents the configuration for a
            type system member.
            </summary>
            <typeparam name="T">
            The type definition.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.IDescriptor`1.Extend">
            <summary>
            Provides access to the underlying configuration. This is useful for extensions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode)">
            <summary>
            Associates the argument with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="inputValueDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode)">
            <summary>
            Associates the specified <paramref name="directiveDefinitionNode"/>
            with the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="directiveDefinitionNode">
            The <see cref="T:HotChocolate.Language.DirectiveDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="value">The directive type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.DirectiveType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Argument(HotChocolate.NameString)">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Location(HotChocolate.Types.DirectiveLocation)">
            <summary>
            Specifies in which location the directive belongs in.
            </summary>
            <param name="value">The directive location.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use(HotChocolate.Resolvers.DirectiveMiddleware)">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use``1">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use``1(System.Func{System.IServiceProvider,HotChocolate.Resolvers.FieldDelegate,``0})">
            <summary>
            Configure a middleware for this directive.
            </summary>
            <param name="factory">The middleware factory.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Repeatable">
            <summary>
            Allows this directive type to be declared multiple times
            in a single location.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Public">
            <summary>
            Directive is public and visible within the type system and through introspection.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Internal">
            <summary>
            Directive is internal and only visible within the type system.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode)">
            <summary>
            Associates the specified <paramref name="directiveDefinitionNode"/>
            with the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="directiveDefinitionNode">
            The <see cref="T:HotChocolate.Language.DirectiveDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="value">The directive type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.DirectiveType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArguments(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the argument binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The directive type descriptor will try to infer the directive type
             arguments from the specified .net directive type representation
             (<typeparamref name="T"/>).
            
             Explicit:
             All arguments have to specified explicitly via
             <see cref="!:IDirectiveTypeDescriptor&lt;T&gt;.Field&lt;TValue&gt;(Expression&lt;Func&lt;T, TValue&gt;&gt;)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArgumentsExplicitly">
            <summary>
            Defines that all arguments have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArgumentsImplicitly">
            <summary>
            The directive type will add arguments for all compatible properties.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Argument(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="property">
            An expression selecting a property <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Argument(HotChocolate.NameString)">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Location(HotChocolate.Types.DirectiveLocation)">
            <summary>
            Specifies in which location the directive belongs in.
            </summary>
            <param name="value">The directive location.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use(HotChocolate.Resolvers.DirectiveMiddleware)">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use``1">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use``1(System.Func{System.IServiceProvider,HotChocolate.Resolvers.FieldDelegate,``0})">
            <summary>
            Configure a middleware for this directive.
            </summary>
            <param name="factory">The middleware factory.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Repeatable">
            <summary>
            Allows this directive type to be declared multiple
            times in a single location.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Public">
            <summary>
            Directive is public and visible within the type system and through introspection.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Internal">
            <summary>
            Directive is internal and only visible within the type system.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode)">
            <summary>
            Associates the enum type with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="enumTypeDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name the enum type shall have.
            </summary>
            <param name="value">
            The name value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.Description(System.String)">
            <summary>
            Defines the description that the enum type shall have.
            </summary>
            <param name="value">
            The description value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.Value``1(``0)">
            <summary>
            Defines a value that should be included on the enum type.
            </summary>
            <param name="value">
            The value to include.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.BindValuesExplicitly">
            <summary>
            Defines that all enum values have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.BindValuesImplicitly">
            <summary>
            Defines that all enum values shall be inferred
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode)">
            <summary>
            Associates the enum type with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="enumTypeDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name the enum type shall have.
            </summary>
            <param name="value">
            The name value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.Description(System.String)">
            <summary>
            Defines the description that the enum type shall have.
            </summary>
            <param name="value">
            The description value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.Value(`0)">
            <summary>
            Defines a value that should be included on the enum type.
            </summary>
            <param name="value">
            The value to include.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.BindValuesExplicitly">
            <summary>
            Defines that all enum values have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.BindValuesImplicitly">
            <summary>
            Defines that all enum values shall be inferred
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.EnumValue"/>.
            The name represents the public visible enum value name.
            </summary>
            <param name="value">The enum value name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.EnumValue"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The enum value description.</param>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.DeprecationReason(System.String)">
            <summary>
            Specifies a deprecation reason for this enum value.
            </summary>
            <param name="reason">The reason why this enum value is deprecated.</param>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.Deprecated(System.String)">
            <summary>
            Deprecates the enum value.
            </summary>
            <param name="reason">The reason why this enum value is deprecated.</param>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.Deprecated">
            <summary>
            Deprecates the enum value.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumValueDescriptor.Ignore(System.Boolean)">
            <summary>
            Ignores the given enum value for the schema creation.
            This enum will not be included into the GraphQL schema.
            </summary>
            <param name="ignore">
            The value specifying if this enum value shall be ignored by the type initialization.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IInputObjectTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInputObjectTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be inferred
            from the associated .Net type,
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IInterfaceTypeDescriptor.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode)" -->
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="value">The interface type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.InterfaceType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The interface type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IInterfaceTypeDescriptor`1.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode)" -->
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="value">The interface type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.InterfaceType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The interface type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFields(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the field binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The object type descriptor will try to infer the object type
             fields from the specified .net object type representation
             (<typeparamref name="T"/>).
            
             Explicit:
             All field have to be specified explicitly via
             <see cref="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/>
             or <see cref="!:Field(string)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be inferred
            from the associated .Net type,
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IObjectFieldDescriptor">
            <summary>
            A fluent configuration API for GraphQL object type fields.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.SyntaxNode(HotChocolate.Language.FieldDefinitionNode)">
            <summary>
            Associates the specified <paramref name="fieldDefinition"/>
            with the <see cref="T:HotChocolate.Types.ObjectField"/>.
            </summary>
            <param name="fieldDefinition">
            The <see cref="T:HotChocolate.Language.FieldDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.ObjectField"/>.
            </summary>
            <param name="value">The object field name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.ObjectField"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The object field description.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.DeprecationReason(System.String)">
            <summary>
            Specifies a deprecation reason for this field.
            </summary>
            <param name="reason">The reason why this field is deprecated.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Deprecated(System.String)">
            <summary>
            Deprecates the object field.
            </summary>
            <param name="reason">The reason why this field is deprecated.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Deprecated">
            <summary>
            Deprecates the object field.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Type``1">
            <summary>
            Defines the type of the object field.
            </summary>
            <typeparam name="TOutputType">
            The type.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Type``1(``0)">
            <summary>
            Defines the type of the object field.
            </summary>
            <typeparam name="TOutputType">
            The type.
            </typeparam>
            <param name="outputType">
            The output type instance.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Type(HotChocolate.Language.ITypeNode)">
            <summary>
            Defines the type of the object field.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Type(System.Type)">
            <summary>
            Defines the type of the object field.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Argument(HotChocolate.NameString,System.Action{HotChocolate.Types.IArgumentDescriptor})">
            <summary>
            Defines a field argument.
            </summary>
            <param name="argumentName">
            The field argument name.
            </param>
            <param name="argumentDescriptor">
            The argument descriptor to specify the argument configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectFieldDescriptor.Ignore(System.Boolean)">
            <summary>
            Ignores the given field for the schema creation.
            This field will not be included into the GraphQL schema.
            </summary>
            <param name="ignore">
            The value specifying if this field shall be ignored by the type initialization.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IObjectFieldDescriptor.ResolveWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" -->
        <member name="T:HotChocolate.Types.IObjectTypeDescriptor">
            <summary>
            A fluent configuration API for GraphQL object types.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.ObjectTypeDefinitionNode)">
            <summary>
            Associates the specified <paramref name="objectTypeDefinition"/>
            with the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="objectTypeDefinition">
            The <see cref="T:HotChocolate.Language.ObjectTypeDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="value">The object type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.ObjectType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.IsOfType(HotChocolate.Types.IsOfType)">
            <summary>
            Specifies a delegate that can determine if a resolver result
            represents an object instance of this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="isOfType">
            The delegate that provides the IsInstanceOfType functionality.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Field(HotChocolate.NameString)">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="name">
            The name that the field shall have.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TResolver"/>.
            The resolver type containing the property or method.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Field(System.Reflection.MemberInfo)">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            The member that shall be used as a field.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.ExtendsType(System.Type)">
            <summary>
            If configuring a type extension this is the type that shall be extended.
            </summary>
            <param name="extendsType">
            The type to extend.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.ExtendsType``1">
            <summary>
            If configuring a type extension this is the type that shall be extended.
            </summary>
            <typeparam name="T">The type to extend.</typeparam>
        </member>
        <member name="T:HotChocolate.Types.IObjectTypeDescriptor`1">
            <summary>
            A fluent configuration API for GraphQL object types.
            </summary>
            <typeparam name="TRuntimeType">
            The runtime type.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="value">The object type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text of the <see cref="T:HotChocolate.Types.ObjectType"/>
            that can be accessed via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFields(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the field binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The object type descriptor will try to infer the object type
             fields from the specified .net object type representation
             (<typeparamref name="TRuntimeType"/>).
            
             Explicit:
             All field have to be specified explicitly via
             <see cref="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/>
             or <see cref="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(HotChocolate.NameString)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be inferred
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.IsOfType(HotChocolate.Types.IsOfType)">
            <summary>
            Specifies a delegate that can determine if a resolver result
            represents an object instance of this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="isOfType">
            The delegate that provides the IsInstanceOfType functionality.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TRuntimeType"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TRuntimeType"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(HotChocolate.NameString)">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="name">
            The name that the field shall have.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TResolver"/>.
            The resolver type containing the property or method.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(System.Reflection.MemberInfo)">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            The member representing a field.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.ExtendsType(System.Type)">
            <summary>
            If configuring a type extension this is the type that shall be extended.
            </summary>
            <param name="extendsType">
            The type to extend.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.ExtendsType``1">
            <summary>
            If configuring a type extension this is the type that shall be extended.
            </summary>
            <typeparam name="TExtendsType">The type to extend.</typeparam>
        </member>
        <member name="T:HotChocolate.Types.DirectiveLocation">
            <summary>
            A Directive can be adjacent to many parts of the GraphQL language,
            a DirectiveLocation describes one such possible adamancies.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Query">
            <summary>
            Location adjacent to a query operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Mutation">
            <summary>
            Location adjacent to a mutation operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Subscription">
            <summary>
            Location adjacent to a subscription operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Field">
            <summary>
            Location adjacent to a field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FragmentDefinition">
            <summary>
            Location adjacent to a fragment definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FragmentSpread">
            <summary>
            Location adjacent to a fragment spread.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InlineFragment">
            <summary>
            Location adjacent to an inline fragment.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.VariableDefinition">
            <summary>
            Location adjacent to a field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Schema">
            <summary>
            Location adjacent to a schema definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Scalar">
            <summary>
            Location adjacent to a scalar definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Object">
            <summary>
            Location adjacent to an object type definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FieldDefinition">
            <summary>
            Location adjacent to a field definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.ArgumentDefinition">
            <summary>
            Location adjacent to an argument definition
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Interface">
            <summary>
            Location adjacent to an interface definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Union">
            <summary>
            Location adjacent to a union definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Enum">
            <summary>
            Location adjacent to an enum definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.EnumValue">
            <summary>
            Location adjacent to an enum value definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InputObject">
            <summary>
            Location adjacent to an input object type definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InputFieldDefinition">
            <summary>
            Location adjacent to an input object field definition.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.CostTypeInterceptor.IsDataResolver(HotChocolate.Types.Descriptors.Definitions.ObjectFieldDefinition)">
            <summary>
            Defines if a resolver is possible fetching data and causing higher impact on the system.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.DeferDirective">
             <summary>
             The `@defer` directive may be provided for fragment spreads and inline fragments to
             inform the executor to delay the execution of the current fragment to indicate
             deprioritization of the current fragment. A query with `@defer` directive will cause
             the request to potentially return multiple responses, where non-deferred data is
             delivered in the initial response and data deferred is delivered in a subsequent
             response. `@include` and `@skip` take precedence over `@defer`.
            
             directive @defer(label: String, if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT
             </summary>
        </member>
        <member name="M:HotChocolate.Types.DeferDirective.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.DeferDirective"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DeferDirective.If">
            <summary>
            Deferred when true.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DeferDirective.Label">
            <summary>
            If this argument label has a value other than null, it will be passed
            on to the result of this defer directive. This label is intended to
            give client applications a way to identify to which fragment a deferred
            result belongs to.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.DeferDirectiveType">
             <summary>
             The `@defer` directive may be provided for fragment spreads and inline fragments to
             inform the executor to delay the execution of the current fragment to indicate
             deprioritization of the current fragment. A query with `@defer` directive will cause
             the request to potentially return multiple responses, where non-deferred data is
             delivered in the initial response and data deferred is delivered in a subsequent
             response. `@include` and `@skip` take precedence over `@defer`.
            
             directive @defer(label: String, if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT
             </summary>
        </member>
        <member name="T:HotChocolate.Types.DeprecatedDirectiveType">
             <summary>
             The @deprecated directive is used within the type system definition
             language to indicate deprecated portions of a GraphQL service’s schema,
             such as deprecated fields on a type or deprecated enum values.
            
             Deprecations include a reason for why it is deprecated,
             which is formatted using Markdown syntax (as specified by CommonMark).
             </summary>
        </member>
        <member name="T:HotChocolate.Types.Directives">
            <summary>
            Helper class for built-in directives.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Directives.IsBuiltIn(HotChocolate.NameString)">
            <summary>
            Checks if the specified directive represents a built-in directive.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ICostSettings">
            <summary>
            The settings needed to apply default costs to resolvers.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ICostSettings.Enable">
            <summary>
            Defines if the complexity analysis is enabled.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ICostSettings.ApplyDefaults">
            <summary>
            Defines if default cost and multipliers shall be applied to the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ICostSettings.DefaultComplexity">
            <summary>
            Gets or sets the complexity that is applied to all fields
            that do not have a cost directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ICostSettings.DefaultResolverComplexity">
            <summary>
            Gets or sets the complexity that is applied to async and data
            resolvers if <see cref="P:HotChocolate.Types.ICostSettings.ApplyDefaults"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.MultiplierPathString">
            <summary>
            The type name string guarantees that a string adheres to the
            GraphQL spec rules: /[_A-Za-z][_0-9A-Za-z]*/
            </summary>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Types.MultiplierPathString"/> struct.
            </summary>
            <param name="value">The actual type name string</param>
        </member>
        <member name="P:HotChocolate.Types.MultiplierPathString.Value">
            <summary>
            The name value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.MultiplierPathString.HasValue">
            <summary>
            <c>true</c> if the name is not empty
            </summary>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.ToString">
            <summary>
            Provides the name string.
            </summary>
            <returns>The name string value</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Add(HotChocolate.Types.MultiplierPathString)">
            <summary>
            Appends a <see cref="T:HotChocolate.Types.MultiplierPathString"/> to this
            instance and returns a new instance of
            <see cref="T:HotChocolate.Types.MultiplierPathString"/> representing the combined
            <see cref="T:HotChocolate.Types.MultiplierPathString"/>.
            </summary>
            <returns>The combined <see cref="T:HotChocolate.Types.MultiplierPathString"/>.</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString,System.StringComparison)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value
            to another value using a specific <see cref="T:System.StringComparison"/>
            type.
            </summary>
            <param name="other">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <param name="comparisonType">
            The <see cref="T:System.StringComparison"/> type to use.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value to
            another value using <see cref="F:System.StringComparison.Ordinal"/>
            comparison type.
            </summary>
            <param name="other">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value to
            another value using <see cref="F:System.StringComparison.Ordinal"/>
            comparison.
            </summary>
            <param name="obj">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing
            algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Equality(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Inequality(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are not equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(System.String,HotChocolate.Types.MultiplierPathString)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(HotChocolate.Types.MultiplierPathString,System.String)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            The <see cref="T:HotChocolate.Types.MultiplierPathString"/> combination of both values
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Implicit(System.String)~HotChocolate.Types.MultiplierPathString">
            <summary>
            Implicitly creates a new <see cref="T:HotChocolate.Types.MultiplierPathString"/> from
            the given string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Implicit(HotChocolate.Types.MultiplierPathString)~System.String">
            <summary>
            Implicitly calls ToString().
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:HotChocolate.Types.OneOfAttribute">
            <summary>
            The `@oneOf` directive is used within the type system definition language
            to indicate an Input Object is a Oneof Input Object.
            
            <code>
            input UserUniqueCondition @oneOf {
              id: ID
              username: String
              organizationAndEmail: OrganizationAndEmailInput
            }
            </code>
            </summary>
        </member>
        <member name="T:HotChocolate.Types.OneOfDirectiveType">
            <summary>
            The `@oneOf` directive is used within the type system definition language
            to indicate an Input Object is a Oneof Input Object.
            
            <code>
            input UserUniqueCondition @oneOf {
              id: ID
              username: String
              organizationAndEmail: OrganizationAndEmailInput
            }
            </code>
            </summary>
        </member>
        <member name="T:HotChocolate.Types.SkipDirectiveType">
            <summary>
            Directs the executor to skip this field or fragment when the `if` argument is true.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.SpecifiedByDirectiveType">
            <summary>
            The `@specifiedBy` directive is used within the type system definition language
            to provide a URL for specifying the behavior of custom
            scalar definitions. The URL should point to a human-readable specification of
            the data format, serialization, and coercion rules for the scalar. For example,
            a GraphQL system providing a `UUID` scalar might link to
            [RFC 4122](https://tools.ietf.org/html/rfc4122),
            or some document defining a reasonable subset of that RFC. If a specification
            URL is present, systems and tools that are aware of it should conform to its
            described rules. Built-in scalar types should not provide a URL in this way.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.StreamDirective">
             <summary>
             The `@stream` directive may be provided for a field of `List` type so that the
             backend can leverage technology such as asynchronous iterators to provide a partial
             list in the initial response, and additional list items in subsequent responses.
             `@include` and `@skip` take precedence over `@stream`.
            
             directive @stream(label: String, initialCount: Int!, if: Boolean) on FIELD
             </summary>
        </member>
        <member name="M:HotChocolate.Types.StreamDirective.#ctor(System.Boolean,System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.StreamDirective"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Types.StreamDirective.If">
            <summary>
            Streamed when true.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.StreamDirective.Label">
            <summary>
            If this argument label has a value other than null,
            it will be passed on to the result of this stream directive.
            This label is intended to give client applications a way to identify to
            which fragment a streamed result belongs to.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.StreamDirective.InitialCount">
            <summary>
            The initial elements that shall be send down to the consumer.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.StreamDirectiveType">
             <summary>
             The `@stream` directive may be provided for a field of `List` type so that the
             backend can leverage technology such as asynchronous iterators to provide a partial
             list in the initial response, and additional list items in subsequent responses.
             `@include` and `@skip` take precedence over `@stream`.
            
             directive @stream(label: String, initialCount: Int!, if: Boolean) on FIELD
             </summary>
        </member>
        <member name="T:HotChocolate.Types.DirectiveType">
             <summary>
             A GraphQL schema describes directives which are used to annotate various parts of a
             GraphQL document as an indicator that they should be evaluated differently by a
             validator, executor, or client tool such as a code generator.
            
             http://spec.graphql.org/draft/#sec-Type-System.Directives
             </summary>
        </member>
        <member name="M:HotChocolate.Types.DirectiveType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition)">
            <summary>
            Create a directive type from a type definition.
            </summary>
            <param name="definition">
            The directive type definition that specifies the properties of the
            newly created directive type.
            </param>
            <returns>
            Returns the newly created directive type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.RuntimeType">
            <summary>
            Gets the runtime type.
            The runtime type defines of which value the type is when it
            manifests in the execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.IsRepeatable">
            <summary>
            Defines if this directive is repeatable. Repeatable directives are often useful when
            the same directive should be used with different arguments at a single location,
            especially in cases where additional information needs to be provided to a type or
            schema extension via a directive
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.Locations">
            <summary>
            Gets the locations where this directive type can be used to annotate
            a type system member.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.Arguments">
            <summary>
            Gets the directive arguments.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.IsExecutableDirective">
             <summary>
             Defines that this directive can be used in executable GraphQL documents.
            
             In order to be executable a directive must at least be valid
             in one of the following locations:
             QUERY (<see cref="F:HotChocolate.Types.DirectiveLocation.Query"/>)
             MUTATION (<see cref="F:HotChocolate.Types.DirectiveLocation.Mutation"/>)
             SUBSCRIPTION (<see cref="F:HotChocolate.Types.DirectiveLocation.Subscription"/>)
             FIELD (<see cref="F:HotChocolate.Types.DirectiveLocation.Field"/>)
             FRAGMENT_DEFINITION (<see cref="F:HotChocolate.Types.DirectiveLocation.FragmentDefinition"/>)
             FRAGMENT_SPREAD (<see cref="F:HotChocolate.Types.DirectiveLocation.FragmentSpread"/>)
             INLINE_FRAGMENT (<see cref="F:HotChocolate.Types.DirectiveLocation.InlineFragment"/>)
             VARIABLE_DEFINITION (<see cref="F:HotChocolate.Types.DirectiveLocation.VariableDefinition"/>)
             </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.IsTypeSystemDirective">
             <summary>
             Defines that this directive can be applied to type system members.
            
             In order to be a type system directive it must at least be valid
             in one of the following locations:
             SCHEMA (<see cref="F:HotChocolate.Types.DirectiveLocation.Schema"/>)
             SCALAR (<see cref="F:HotChocolate.Types.DirectiveLocation.Scalar"/>)
             OBJECT (<see cref="F:HotChocolate.Types.DirectiveLocation.Object"/>)
             FIELD_DEFINITION (<see cref="F:HotChocolate.Types.DirectiveLocation.FieldDefinition"/>)
             ARGUMENT_DEFINITION (<see cref="F:HotChocolate.Types.DirectiveLocation.ArgumentDefinition"/>)
             INTERFACE (<see cref="F:HotChocolate.Types.DirectiveLocation.Interface"/>)
             UNION (<see cref="F:HotChocolate.Types.DirectiveLocation.Union"/>)
             ENUM (<see cref="F:HotChocolate.Types.DirectiveLocation.Enum"/>)
             ENUM_VALUE (<see cref="F:HotChocolate.Types.DirectiveLocation.EnumValue"/>)
             INPUT_OBJECT (<see cref="F:HotChocolate.Types.DirectiveLocation.InputObject"/>)
             INPUT_FIELD_DEFINITION (<see cref="F:HotChocolate.Types.DirectiveLocation.InputFieldDefinition"/>)
             </summary>
        </member>
        <member name="P:HotChocolate.Types.DirectiveType.IsPublic">
            <summary>
            Defines if instances of this directive type are publicly visible through introspection.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.EnumType">
             <summary>
             GraphQL Enum types, like Scalar types, also represent leaf values in a GraphQL type system.
             However Enum types describe the set of possible values.
            
             Enums are not references for a numeric value, but are unique values in their own right.
             They may serialize as a string: the name of the represented value.
            
             In this example, an Enum type called Direction is defined:
            
             <code>
             enum Direction {
               NORTH
               EAST
               SOUTH
               WEST
             }
             </code>
             </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.EnumType.SyntaxNode">
            <summary>
            Gets the associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumType.Values">
            <summary>
            Gets the enum values of this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumType.NameLookup">
            <summary>
            Gets a dictionary that allows to lookup the enum value by its name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.EnumType.ValueLookup">
            <summary>
            Gets a dictionary that allows to lookup the enum value by its runtime value.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumType.TryGetRuntimeValue(HotChocolate.NameString,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.IsInstanceOfType(HotChocolate.Language.IValueNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.IsInstanceOfType(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.ParseLiteral(HotChocolate.Language.IValueNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.ParseValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.ParseResult(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.Deserialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.TryDeserialize(System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumType.#ctor(System.Action{HotChocolate.Types.IEnumTypeDescriptor})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumType"/>.
            </summary>
            <param name="configure">
            A delegate defining the configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.EnumType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition)">
            <summary>
            Create an enum type from a type definition.
            </summary>
            <param name="definition">
            The enum type definition that specifies the properties of the newly created enum type.
            </param>
            <returns>
            Returns the newly created enum type.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.EnumType.Configure(HotChocolate.Types.IEnumTypeDescriptor)">
            <summary>
            Override this in order to specify the type configuration explicitly.
            </summary>
            <param name="descriptor">
            The descriptor of this type lets you express the type configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.EnumType.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext,HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext,HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.EnumTypeExtension">
            <summary>
            Enum type extensions are used to represent an enum type which has been extended from
            some original enum type. For example, this might be used to represent additional local data,
            or by a GraphQL service which is itself an extension of another GraphQL service.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumTypeExtension.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumTypeExtension"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumTypeExtension.#ctor(System.Action{HotChocolate.Types.IEnumTypeDescriptor})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumTypeExtension"/>.
            </summary>
            <param name="configure">
            A delegate defining the configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.EnumTypeExtension.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.EnumTypeDefinition)">
            <summary>
            Create an enum type extension from a type definition.
            </summary>
            <param name="definition">
            The enum type definition that specifies the properties of
            the newly created enum type extension.
            </param>
            <returns>
            Returns the newly created enum type extension.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.EnumTypeExtension.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumTypeExtension.Configure(HotChocolate.Types.IEnumTypeDescriptor)">
            <summary>
            Override this in order to specify the type configuration explicitly.
            </summary>
            <param name="descriptor">
            The descriptor of this type lets you express the type configuration.
            </param>
        </member>
        <member name="T:HotChocolate.Types.EnumType`1">
             <summary>
             GraphQL Enum types, like Scalar types, also represent leaf values in a GraphQL type system.
             However Enum types describe the set of possible values.
            
             Enums are not references for a numeric value, but are unique values in their own right.
             They may serialize as a string: the name of the represented value.
            
             In this example, an Enum type called Direction is defined:
            
             <code>
             enum Direction {
               NORTH
               EAST
               SOUTH
               WEST
             }
             </code>
             </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumType`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumType`1.#ctor(System.Action{HotChocolate.Types.IEnumTypeDescriptor{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Types.EnumType"/>.
            </summary>
            <param name="configure">
            A delegate defining the configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.EnumType`1.TryGetRuntimeValue(HotChocolate.NameString,`0@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.EnumType`1.Configure(HotChocolate.Types.IEnumTypeDescriptor{`0})">
            <summary>
            Override this in order to specify the type configuration explicitly.
            </summary>
            <param name="descriptor">
            The descriptor of this type lets you express the type configuration.
            </param>
        </member>
        <member name="M:HotChocolate.Types.EnumType`1.CreateDefinition(HotChocolate.Configuration.ITypeDiscoveryContext)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.DirectiveTypeDescriptorExtensions.Type(HotChocolate.Types.IDirectiveArgumentDescriptor,System.String)">
            <summary>
            Specifies the type of a directive argument with GraphQL SDL type syntax.
            </summary>
            <param name="descriptor">
            The directive argument descriptor.
            </param>
            <param name="typeSyntax">
            The GraphQL SDL type syntax.
            </param>
            <returns>
            Returns the directive argument descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c>.
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The GraphQL SDL type syntax is invalid.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.EnumTypeDescriptorExtensions">
            <summary>
            Provides extensions to the <see cref="T:HotChocolate.Types.IEnumTypeDescriptor"/> and
            <see cref="T:HotChocolate.Types.IEnumTypeDescriptor`1"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.EnumTypeDescriptorExtensions.Ignore``1(HotChocolate.Types.IEnumTypeDescriptor{``0},``0)">
            <summary>
            Ignores the given enum value for the schema creation.
            This enum will not be included into the GraphQL schema.
            </summary>
            <param name="descriptor">
            The enum type descriptor.
            </param>
            <param name="value">
            The enum value that shall be ignored.
            </param>
            <typeparam name="T">
            The enum value type.
            </typeparam>
            <returns>
            Returns the enum type descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c> or
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.EnumTypeDescriptorExtensions.Ignore``1(HotChocolate.Types.IEnumTypeDescriptor,``0)">
            <summary>
            Ignores the given enum value for the schema creation.
            This enum will not be included into the GraphQL schema.
            </summary>
            <param name="descriptor">
            The enum type descriptor.
            </param>
            <param name="value">
            The enum value that shall be ignored.
            </param>
            <typeparam name="T">
            The enum value type.
            </typeparam>
            <returns>
            Returns the enum type descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c> or
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.InputObjectTypeDescriptorExtensions">
            <summary>
            Provides extension methods to <see cref="T:HotChocolate.Types.IInputObjectTypeDescriptor"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeDescriptorExtensions.Ignore``1(HotChocolate.Types.IInputObjectTypeDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Ignores the specified <paramref name="property"/>.
            </summary>
            <param name="descriptor">
            The input type descriptor.
            </param>
            <param name="property">
            An expression representing the property that shall be ignored.
            </param>
            <typeparam name="T">
            The runtime type of the input object.
            </typeparam>
            <returns>
            Returns the descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="descriptor"/> is <c>null</c> or
            the <paramref name="property"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeDescriptorExtensions.OneOf(HotChocolate.Types.IInputObjectTypeDescriptor)">
            <summary>
            Defines an input object type as a oneof input object type
            where only ever one field can hold a value.
            </summary>
            <param name="descriptor">
            The input type descriptor.
            </param>
            <returns>
            Returns the descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="descriptor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeDescriptorExtensions.OneOf``1(HotChocolate.Types.IInputObjectTypeDescriptor{``0})">
            <summary>
            Defines an input object type as a oneof input object type
            where only ever one field can hold a value.
            </summary>
            <param name="descriptor">
            The input type descriptor.
            </param>
            <typeparam name="T">
            The runtime type of the input object.
            </typeparam>
            <returns>
            Returns the descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="descriptor"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeDescriptorExtensions.Type(HotChocolate.Types.IInputFieldDescriptor,System.String)">
            <summary>
            Specifies the type of an input field with GraphQL SDL type syntax.
            </summary>
            <param name="descriptor">
            The input field descriptor.
            </param>
            <param name="typeSyntax">
            The GraphQL SDL type syntax.
            </param>
            <returns>
            Returns the input field descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c>.
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The GraphQL SDL type syntax is invalid.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InterfaceTypeDescriptorExtensions.Type(HotChocolate.Types.IInterfaceFieldDescriptor,System.String)">
            <summary>
            Specifies the type of an interface field with GraphQL SDL type syntax.
            </summary>
            <param name="descriptor">
            The interface field descriptor.
            </param>
            <param name="typeSyntax">
            The GraphQL SDL type syntax.
            </param>
            <returns>
            Returns the interface field descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c>.
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The GraphQL SDL type syntax is invalid.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.ObjectFieldDescriptorExtensions">
            <summary>
            Provides configuration methods to <see cref="T:HotChocolate.Types.IObjectFieldDescriptor"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectFieldDescriptorExtensions.Serial(HotChocolate.Types.IObjectFieldDescriptor)">
            <summary>
            Marks a field as serial executable which will ensure that the execution engine
            synchronizes resolver execution around the marked field and ensures that
            no other field is executed in parallel.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectFieldDescriptorExtensions.Parallel(HotChocolate.Types.IObjectFieldDescriptor)">
            <summary>
            Marks a field as parallel executable which will allow the execution engine
            to execute this field in parallel with other resolvers.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectFieldDescriptorExtensions.Type(HotChocolate.Types.IObjectFieldDescriptor,System.String)">
            <summary>
            Specifies the type of an object field with GraphQL SDL type syntax.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="typeSyntax">
            The GraphQL SDL type syntax.
            </param>
            <returns>
            Returns the object field descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c>.
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The GraphQL SDL type syntax is invalid.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ObjectFieldDescriptorExtensions.Type(HotChocolate.Types.IArgumentDescriptor,System.String)">
            <summary>
            Specifies the type of an argument with GraphQL SDL type syntax.
            </summary>
            <param name="descriptor">
            The argument descriptor.
            </param>
            <param name="typeSyntax">
            The GraphQL SDL type syntax.
            </param>
            <returns>
            Returns the argument descriptor for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="descriptor"/> is <c>null</c>.
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            The GraphQL SDL type syntax is invalid.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ObjectFieldDescriptorExtensions.UseServiceScope(HotChocolate.Types.IObjectFieldDescriptor)">
             <summary>
             Wraps a middleware around the field that creates a service scope
             for the wrapped pipeline.
            
             Middleware order matters, so in most cases this should be the most outer middleware.
             </summary>
             <param name="descriptor">
             The field descriptor.
             </param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="descriptor"/> is <c>null</c>.
             </exception>
        </member>
        <member name="T:HotChocolate.Types.ObjectTypeDescriptorExtensions">
            <summary>
            Provides extensions to <see cref="T:HotChocolate.Types.IObjectTypeDescriptor"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectTypeDescriptorExtensions.Implements(HotChocolate.Types.IObjectTypeDescriptor,HotChocolate.NameString)">
            <summary>
            Specifies an interface that is implemented by this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="typeName">
            The type name of the interface.
            </param>
        </member>
        <member name="M:HotChocolate.Types.ObjectTypeDescriptorExtensions.Implements``1(HotChocolate.Types.IObjectTypeDescriptor{``0},HotChocolate.NameString)">
            <summary>
            Specifies an interface that is implemented by this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="typeName">
            The type name of the interface.
            </param>
        </member>
        <member name="M:HotChocolate.Types.ResolveWithObjectFieldDescriptorExtensions.ResolveWith``2(HotChocolate.Types.IObjectFieldDescriptor,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Resolve a <typeparamref name="TResult"/> using the <paramref name="propertyOrMethod"/> 
            member selector on <typeparamref name="TResolver"/>.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="propertyOrMethod">
            The member selector.
            </param>
            <typeparam name="TResolver">
            The resolver type.
            </typeparam>
            <typeparam name="TResult">
            The result type.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.ResolveWithObjectFieldDescriptorExtensions.ResolveWith``2(HotChocolate.Types.IObjectFieldDescriptor,System.Linq.Expressions.Expression{System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Asynchronously resolve a <typeparamref name="TResult"/> using the 
            <paramref name="propertyOrMethod"/> member selector on <typeparamref name="TResolver"/>.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="propertyOrMethod">
            The member selector.
            </param>
            <typeparam name="TResolver">
            The resolver type.
            </typeparam>
            <typeparam name="TResult">
            The result type.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``1(HotChocolate.Types.IObjectFieldDescriptor,System.String)">
            <summary>
            Subscribes to fixed topic on the <see cref="T:HotChocolate.Subscriptions.ITopicEventReceiver" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="topicName">
            A name representing the topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.String)">
            <summary>
            Subscribes to a topic that is represented by an argument value.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="argumentName">
            A name of the argument that is used to resolve the topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.Func{HotChocolate.Resolvers.IResolverContext,``0})">
            <summary>
            Subscribes to a topic that is resolved by executing <paramref name="resolveTopic" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="resolveTopic">
            A delegate that resolves a value that will used as topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Subscribes to a topic that is resolved by executing <paramref name="resolveTopic" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="resolveTopic">
            A delegate that resolves a value that will used as topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.TypeExtensions.RewriteNullability(HotChocolate.Types.IType,HotChocolate.Language.INullabilityNode)">
            <summary>
            Rewrites the type nullability according to the <paramref name="nullability"/> modifier.
            </summary>
            <param name="type">The type that shall be rewritten.</param>
            <param name="nullability">The nullability modifier.</param>
            <returns>
            Returns the rewritten type.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="nullability"/> modifier does not match the
            <paramref name="type"/> structure.
            </exception>
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.Name">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.Description">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.SyntaxNode">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.Coordinate">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.Index">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.Directives">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.RuntimeType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.FieldBase`1.ContextData">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputField.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InputField.Type">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputField.DeclaringType">
            <summary>
            Gets the type that declares this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InputField.RuntimeType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputField.DefaultValue">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputField.Formatter">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputField.IsOptional">
            <summary>
            Defines if the runtime type is represented as an <see cref="T:HotChocolate.Optional`1" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InputField.Property">
            <summary>
            If this field is bound to a property on a concrete model,
            then this property exposes this property.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputField.ToString">
            <summary>
            Returns a string that represents the current field.
            </summary>
            <returns>
            A string that represents the current field.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.InputObjectType">
             <summary>
             A GraphQL Input Object defines a set of input fields; the input fields are either scalars,
             enums, or other input objects. This allows arguments to accept arbitrarily complex structs.
            
             In this example, an Input Object called Point2D describes x and y inputs:
            
             <code>
             input Point2D {
               x: Float
               y: Float
             }
             </code>
             </summary>
            <summary>
            Represents a GraphQL input object type
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectType.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InputObjectType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectType.#ctor(System.Action{HotChocolate.Types.IInputObjectTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InputObjectType"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InputObjectType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition)">
            <summary>
            Create an input object type from a type definition.
            </summary>
            <param name="definition">
            The input object type definition that specifies the properties of the
            newly created input object type.
            </param>
            <returns>
            Returns the newly created input object type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.InputObjectType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InputObjectType.SyntaxNode">
            <summary>
            Gets the GraphQL syntax representation of this type
            if it was provided during initialization.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InputObjectType.Fields">
            <summary>
            Gets the fields of this type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectType.Configure(HotChocolate.Types.IInputObjectTypeDescriptor)">
            <summary>
            Override this to configure the type.
            </summary>
            <param name="descriptor">
            The descriptor allows to configure the interface type.
            </param>
        </member>
        <member name="T:HotChocolate.Types.InputObjectTypeExtension">
            <summary>
            Input object type extensions are used to represent an input object type
            which has been extended from some original input object type. For example,
            this might be used by a GraphQL service which is itself an extension of another
            GraphQL service.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeExtension.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InputObjectTypeExtension"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeExtension.#ctor(System.Action{HotChocolate.Types.IInputObjectTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InputObjectTypeExtension"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InputObjectTypeExtension.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.InputObjectTypeDefinition)">
            <summary>
            Create an input object type extension from a type definition.
            </summary>
            <param name="definition">
            The input object type definition that specifies the properties of the
            newly created input object type extension.
            </param>
            <returns>
            Returns the newly created input object type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.InputObjectTypeExtension.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InterfaceField.DeclaringType">
            <summary>
            Gets the type that declares this field.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:HotChocolate.Types.InterfaceType" -->
        <member name="M:HotChocolate.Types.InterfaceType.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.#ctor(System.Action{HotChocolate.Types.IInterfaceTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition)">
            <summary>
            Create an interface type from a type definition.
            </summary>
            <param name="definition">
            The interface type definition that specifies the properties of the
            newly created interface type.
            </param>
            <returns>
            Returns the newly created interface type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.InterfaceType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InterfaceType.SyntaxNode">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.InterfaceType.Implements">
            <summary>
            Gets the interfaces that are implemented by this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.InterfaceType.Fields">
            <summary>
            Gets the field that this type exposes.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.NameString)">
            <summary>
            Defines if this type is implementing an interface
            with the given <paramref name="typeName" />.
            </summary>
            <param name="typeName">
            The interface type name.
            </param>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.Types.InterfaceType)">
            <summary>
            Defines if this type is implementing the
            the given <paramref name="interfaceType" />.
            </summary>
            <param name="interfaceType">
            The interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.IsImplementing(HotChocolate.Types.IInterfaceType)">
            <summary>
            Defines if this type is implementing the
            the given <paramref name="interfaceType" />.
            </summary>
            <param name="interfaceType">
            The interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.IsAssignableFrom(HotChocolate.Types.INamedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Resolves the concrete type for the value of a type
            that implements this interface.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The value for which the type shall be resolved.
            </param>
            <returns>
            Returns <c>null</c> if the value is not of a type
            implementing this interface.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.InterfaceType.Configure(HotChocolate.Types.IInterfaceTypeDescriptor)">
            <summary>
            Override this to configure the type.
            </summary>
            <param name="descriptor">
            The descriptor allows to configure the interface type.
            </param>
        </member>
        <member name="T:HotChocolate.Types.InterfaceTypeExtension">
             <summary>
             Interface type extensions are used to represent an interface which has been extended
             from some original interface.
            
             For example, this might be used to represent common local data on many types,
             or by a GraphQL service which is itself an extension of another GraphQL service.
             </summary>
        </member>
        <member name="M:HotChocolate.Types.InterfaceTypeExtension.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InterfaceTypeExtension"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.InterfaceTypeExtension.#ctor(System.Action{HotChocolate.Types.IInterfaceTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.InterfaceTypeExtension"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.InterfaceTypeExtension.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.InterfaceTypeDefinition)">
            <summary>
            Create an interface type extension from a type definition.
            </summary>
            <param name="definition">
            The interface type definition that specifies the properties of the
            newly created interface type extension.
            </param>
            <returns>
            Returns the newly created interface type extension.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.InterfaceTypeExtension.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.Introspection.IntrospectionFields.TypeName">
            <summary>
            Gets the field name of the __typename introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Introspection.IntrospectionFields.Schema">
            <summary>
            Gets the field name of the __schema introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Introspection.IntrospectionFields.Type">
            <summary>
            Gets the field name of the __type introspection field.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Introspection.IntrospectionTypes">
            <summary>
            Helper to identify introspection types.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Introspection.IntrospectionTypes.IsIntrospectionType(HotChocolate.NameString)">
            <summary>
            Defines if the type name represents an introspection type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Introspection.IntrospectionTypes.IsIntrospectionType(HotChocolate.Types.INamedType)">
            <summary>
            Defines if the type represents an introspection type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Introspection.__AppliedDirective">
            <summary>
            An Applied Directive is an instances of a directive as applied to a schema element.
            This type is NOT specified by the graphql specification presently.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Introspection.__DirectiveArgument">
            <summary>
            Directive arguments can have names and values.
            The values are in graphql SDL syntax printed as a string.
            This type is NOT specified by the graphql specification presently.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IntrospectionAttribute">
            <summary>
            Defines that the annotated type is an internal introspection type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IsOfType">
            <summary>
            A delegate to determine if a resolver result is of a certain object type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IsOfTypeFallback">
            <summary>
            A delegate to determine if a resolver result is of a certain object type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.NamedTypeBase`1">
            <summary>
            A base class for named GraphQL types.
            </summary>
            <typeparam name="TDefinition">
            The type definition of the named GraphQL type.
            </typeparam>
        </member>
        <member name="P:HotChocolate.Types.NamedTypeBase`1.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.NamedTypeBase`1.Directives">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.NamedTypeBase`1.RuntimeType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.NamedTypeBase`1.TypeIdentity">
            <summary>
            A type representing the identity of the specified type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.NamedTypeBase`1.IsAssignableFrom(HotChocolate.Types.INamedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.NamedTypeBase`1.OnRegisterDependencies(HotChocolate.Configuration.ITypeDiscoveryContext,`0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.NamedTypeBase`1.OnCompleteType(HotChocolate.Configuration.ITypeCompletionContext,`0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.NamedTypeBase`1.SetTypeIdentity(System.Type)">
            <summary>
            This method allows the concrete type implementation to set its type identity.
            </summary>
            <param name="typeDefinitionOrIdentity">
            The type definition or type identity.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeDefinitionOrIdentity"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.NamedTypeExtensionBase`1">
            <summary>
            This is not a full type and is used to split the type configuration into multiple part.
            Any type extension instance is will not survive the initialization and instead is
            merged into the target type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.NamedTypeExtensionBase`1.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.NamedTypeExtensionBase`1.ExtendsType">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.ObjectField">
            <summary>
            Represents a field of an <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.DeclaringType">
            <summary>
            Gets the type that declares this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.IsParallelExecutable">
            <summary>
            Defines if this field can be executed in parallel with other fields.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Middleware">
            <summary>
            Gets the field resolver middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Resolver">
            <summary>
            Gets the field resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.PureResolver">
            <summary>
            Gets the pure field resolver. The pure field resolver is only available if this field
            can be resolved without side-effects. The execution engine will prefer this resolver
            variant if it is available and there are no executable directives that add a middleware
            to this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.SubscribeResolver">
            <summary>
            Gets the subscription resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.ExecutableDirectives">
            <summary>
            Gets all executable directives that are associated with this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Member">
            <summary>
            Gets the associated member of the runtime type for this field.
            This property can be <c>null</c> if this field is not associated to
            a concrete member on the runtime type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.ResolverMember">
            <summary>
            Gets the resolver member of this filed.
            If this field has no explicit resolver member
            this property will return <see cref="P:HotChocolate.Types.ObjectField.Member"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Expression">
            <summary>
            Gets the associated resolver expression.
            This expression can be <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.ResolverExpression">
            <summary>
            Gets the associated resolver expression.
            This expression can be <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.IsIntrospectionField">
            <summary>
            Defines if this field as a introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.MaybeStream">
            <summary>
            Defines that the result of this field might be a stream.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ObjectType">
             <summary>
             GraphQL operations are hierarchical and composed, describing a tree of information.
             While Scalar types describe the leaf values of these hierarchical operations,
             Objects describe the intermediate levels.
            
             GraphQL Objects represent a list of named fields, each of which yield a value of a
             specific type. Object values should be serialized as ordered maps, where the selected
             field names (or aliases) are the keys and the result of evaluating the field is the value,
             ordered by the order in which they appear in the selection set.
            
             All fields defined within an Object type must not have a name which begins
             with "__" (two underscores), as this is used exclusively by
             GraphQL’s introspection system.
             </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.#ctor(System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition)">
            <summary>
            Create a object type from a type definition.
            </summary>
            <param name="definition">
            The object type definition that specifies the properties of the
            newly created object type.
            </param>
            <returns>
            Returns the newly created object type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.ObjectType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.ObjectType.SyntaxNode">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.ObjectType.Implements">
            <summary>
            Gets the interfaces that are implemented by this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectType.Fields">
            <summary>
            Gets the field that this type exposes.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.IsInstanceOfType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ObjectType.IsOfType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Specifies if the specified <paramref name="resolverResult" /> is an instance of
            this object type.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The result that shall be checked.
            </param>
            <returns>
            <c>true</c> if the <see cref="!:resolverResult"/> is an instance of this type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.NameString)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.Types.InterfaceType)">
            <summary>
            Defines if this type is implementing the
            the given <paramref name="interfaceType" />.
            </summary>
            <param name="interfaceType">
            The interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.ObjectType.IsImplementing(HotChocolate.Types.IInterfaceType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ObjectType.Configure(HotChocolate.Types.IObjectTypeDescriptor)">
            <summary>
            Override this to configure the type.
            </summary>
            <param name="descriptor">
            The descriptor allows to configure the interface type.
            </param>
        </member>
        <member name="T:HotChocolate.Types.ObjectTypeExtension">
             <summary>
             Object type extensions are used to represent a type which has been extended
             from some original type.
            
             For example, this might be used to represent local data, or by a GraphQL service
             which is itself an extension of another GraphQL service.
             </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectTypeExtension.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectTypeExtension.#ctor(System.Action{HotChocolate.Types.IObjectTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ObjectTypeExtension.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.ObjectTypeDefinition)">
            <summary>
            Create a object type from a type definition.
            </summary>
            <param name="definition">
            The object type definition that specifies the properties of the
            newly created object type.
            </param>
            <returns>
            Returns the newly created object type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.ObjectTypeExtension.Kind">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.OperationTypeNames">
            <summary>
            These constants represent well-known names for the operation types.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.OperationTypeNames.Query">
            <summary>
            The well-known name for the query type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.OperationTypeNames.Mutation">
            <summary>
            The well-known name for the mutation type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.OperationTypeNames.Subscription">
            <summary>
            The well-known name for the subscription type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.Type">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.RuntimeType">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.IsIntrospectionField">
            <summary>
            Defines if this field as a introspection field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.OutputFieldBase`1.DeprecationReason">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.OutputFieldBase`1.ToString">
            <summary>
            Returns a string that represents the current field.
            </summary>
            <returns>
            A string that represents the current field.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Pagination.GetPagingProvider">
            <summary>
            A delegate to resolve a paging provider.
            </summary>
            <param name="services">The service provider to resolver the paging providers from.</param>
            <param name="sourceType">The type that is returned by the resolver.</param>
            <param name="providerName">The name of the provider that shall be selected.</param>
        </member>
        <member name="T:HotChocolate.Types.Pagination.IPage">
            <summary>
            Represents a page of a data set.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.IPage.Items">
            <summary>
            Gets the items of this page.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.IPage.Info">
            <summary>
            Gets basic information about this page in the overall data set.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Pagination.IPage.GetTotalCountAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the total count of the data set.
            </summary>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns></returns>
        </member>
        <member name="T:HotChocolate.Types.Pagination.IPageInfo">
            <summary>
            Provides basic information about a the page in the data set.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.IPageInfo.HasNextPage">
            <summary>
            Specifies if the current page has a next page.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.IPageInfo.HasPreviousPage">
            <summary>
            Specifies if the current page has a previous page.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Pagination.IPageType">
            <summary>
            The paging result type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.IPageType.ItemType">
            <summary>
            Gets the item type of the page.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Pagination.IPagingHandler.ValidateContext(HotChocolate.Resolvers.IResolverContext)">
            <summary>
            Will be called by the paging middleware before anything is executed and validates
            if the current context is valid.
            </summary>
            <param name="context">
            The current resolver context.
            </param>
            <exception cref="T:HotChocolate.GraphQLException">
            If context is not valid a <see cref="T:HotChocolate.GraphQLException"/> is expected.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.Pagination.IPagingHandler.SliceAsync(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Slices the <paramref name="source"/> and returns a page from it.
            </summary>
            <param name="context">
            The current resolver context.
            </param>
            <param name="source">
            The data set.
            </param>
            <returns>
            Returns the page representing a part from the <see cref="!:source"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Pagination.IPagingProvider">
             <summary>
             Represents an paging provider, which can be implemented to
             create optimized pagination for data sources.
            
             The paging provider will be used by the configuration to choose
             the right paging handler for executing the field.
             </summary>
        </member>
        <member name="M:HotChocolate.Types.Pagination.IPagingProvider.CanHandle(HotChocolate.Internal.IExtendedType)">
            <summary>
            Specifies if this paging provider can handle the specified <see cref="!:source"/>.
            </summary>
            <param name="source">
            The source type represents the result of the field resolver and could be a collection,
            a query builder or some other object representing the data set.
            </param>
        </member>
        <member name="M:HotChocolate.Types.Pagination.IPagingProvider.CreateHandler(HotChocolate.Internal.IExtendedType,HotChocolate.Types.Pagination.PagingOptions)">
            <summary>
            Creates the paging handler that is able to interact with the specified source and
            able to slice the data.
            </summary>
            <param name="source">
            The source type represents the result of the field resolver and could be a collection,
            a query builder or some other object representing the data set.
            </param>
            <param name="options">
            The paging settings that apply to the newly create paging handler.
            </param>
            <returns>
            Returns the paging handler that was create for the specified <paramref name="source"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Pagination.PagingOptions">
            <summary>
            The paging options.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.DefaultPageSize">
            <summary>
            Gets or sets the default page size.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.MaxPageSize">
            <summary>
            Gets or sets the max allowed page size.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.IncludeTotalCount">
            <summary>
            Defines if the total count of the paged data set
            shall be included into the paging result type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.AllowBackwardPagination">
            <summary>
            Defines if backward pagination is allowed or deactivated
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.RequirePagingBoundaries">
            <summary>
            Defines if the paging middleware shall require the
            API consumer to specify paging boundaries.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.InferConnectionNameFromField">
            <summary>
            Connection names are by default inferred from the field name to
            which they are bound to as opposed to the node type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Pagination.PagingOptions.ProviderName">
            <summary>
            The name of the paging provider that shall be used.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Pagination.PagingOptions.Merge(HotChocolate.Types.Pagination.PagingOptions)">
            <summary>
            Merges the <paramref name="other"/> options into this options instance wherever
            a property is not set.
            </summary>
            <param name="other">
            The other options class that shall override unset props.
            </param>
        </member>
        <member name="M:HotChocolate.Types.Pagination.PagingOptions.Copy">
            <summary>
            Creates a copy of the current options instance.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Relay.IDAttribute">
            <summary>
            The <see cref="T:HotChocolate.Types.Relay.IDAttribute"/> marks a field or parameter as a Global Unique Id.
            The type of the target is rewritten to <c>ID</c> and a middleware is registered that,
            automatically combines the value of fields annotated as ID with another value to form a
            global identifier.
            </summary>
            <remarks>
            Per default, this additional value is the name of the type the Id belongs to.
            Since type names are unique within a schema, this ensures that we are returning a unique
            Id within the schema. If our GraphQL server serves multiple schemas, the schema name
            is also included in this combined Id. The resulting Id is then Base64 encoded to make
            it opaque.
            </remarks>
            <example>
            <para>
            A field can be rewritten to a id by adding <c>[ID]</c> to the resolver.
            </para>
            <code>
            public class User
            {
                [ID]
                public int Id {get; set;}
            }
            </code>
            <para>
            In the resulting schema, the field `<c>User.id</c>` will be rewritten from `<c>Int</c>` to
            `<c>ID</c>`
            </para>
            <code>
            type User
            {
                id: ID!
            }
            </code>
            <para>
            If `<c>User.id</c>` is requested in a query, the value is transformed to a base64 string
            combined with the typename
            Assuming `<c>User.id</c>` has the value 1. The following string is base64 encoded
            <code>
            User
            i1
            </code>
            results in
            <code>
            VXNlcgppMQ==
            </code>
            </para>
            </example>
        </member>
        <member name="M:HotChocolate.Types.Relay.IDAttribute.#ctor(System.String)">
            <inheritdoc cref="T:HotChocolate.Types.Relay.IDAttribute"/>
        </member>
        <member name="P:HotChocolate.Types.Relay.IDAttribute.TypeName">
            <summary>
            With the <see cref="P:HotChocolate.Types.Relay.IDAttribute.TypeName"/> property you can override the type name
            of the ID. This is useful to rewrite a parameter of a mutation or query, to a specific
            id.
            </summary>
            <example>
            <para>
            A field can be rewritten to a id by adding <c>[ID]</c> to the resolver.
            </para>
            <code>
            public class UserQuery
            {
                public User GetUserById([ID("User")] int id) => //....
            }
            </code>
            <para>
            The argument is rewritten to <c>ID</c> and expect a id of type User.
            Assuming `<c>User.id</c>` has the value 1. The following string is base64 encoded
            </para>
            </example>
        </member>
        <member name="M:HotChocolate.Types.Relay.IDAttribute.TryConfigure(HotChocolate.Types.Descriptors.IDescriptorContext,HotChocolate.Types.IDescriptor,System.Reflection.ICustomAttributeProvider)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.Relay.NodeAttribute">
            <summary>
            This attribute marks a relay node type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.NodeAttribute.IdField">
            <summary>
            The name of the member representing the ID field of the node.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.NodeAttribute.NodeResolver">
            <summary>
            The name of the member representing the node resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.NodeAttribute.NodeResolverType">
            <summary>
            The type of the node resolver.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Relay.NodeResolverAttribute">
            <summary>
            This attribute marks the node resolver in a relay node type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Relay.RelayIdFieldHelpers.ApplyIdToField(HotChocolate.Types.IDescriptor{HotChocolate.Types.Descriptors.Definitions.ArgumentDefinition},HotChocolate.NameString)">
            <summary>
            Applies the <see cref="T:HotChocolate.Types.RelayIdFieldExtensions"><c>.ID()</c></see> to a argument
            descriptor
            </summary>
            <remarks>
            You most likely want to call `<c>.ID()</c>` directly and do not use this helper
            </remarks>
            <param name="descriptor"></param>
            <param name="typeName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HotChocolate.Types.Relay.RelayIdFieldHelpers.ApplyIdToField(HotChocolate.Types.IDescriptor{HotChocolate.Types.Descriptors.Definitions.OutputFieldDefinitionBase},HotChocolate.NameString)">
            <summary>
            Applies the <see cref="T:HotChocolate.Types.RelayIdFieldExtensions"><c>.ID()</c></see> to a argument
            descriptor
            </summary>
            <remarks>
            You most likely want to call `<c>.ID()</c>` directly and do not use this helper
            </remarks>
            <param name="descriptor"></param>
            <param name="typeName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:HotChocolate.Types.Relay.IIdSerializer">
            <summary>
            The ID serializer is used to parse and format node ids.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Relay.IIdSerializer.Serialize``1(HotChocolate.NameString,HotChocolate.NameString,``0)">
            <summary>
            Creates a schema unique identifier from a source schema name,
            an ID and type name.
            </summary>
            <typeparam name="T">The id type.</typeparam>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <param name="id">The id.</param>
            <returns>
            Returns an ID string containing the type name and the ID.
            </returns>
            <exception cref="T:HotChocolate.Types.Relay.IdSerializationException">
            Unable to create a schema unique ID string.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.Relay.IIdSerializer.Deserialize(System.String)">
            <summary>
            Deserializes a schema unique identifier to reveal the source
            schema, internal ID and type name of an object.
            </summary>
            <param name="serializedId">
            The schema unique ID string.
            </param>
            <returns>
            Returns an <see cref="T:HotChocolate.Types.Relay.IdValue"/> containing the information
            encoded into the unique ID string.
            </returns>
            <exception cref="T:HotChocolate.Types.Relay.IdSerializationException">
            Unable to deconstruct the schema unique ID string.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.Relay.INode">
            <summary>
            Marker interface for relay node types.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Relay.INodeResolver">
            <summary>
            The node resolver is used to resolve a specific node type by the specified id.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Relay.INodeResolver.ResolveAsync(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Resolves a new instance by the specified <paramref name="id"/>.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="id">
            The id runtime value.
            </param>
            <returns>
            Returns the resolver node.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.Relay.MutationPayloadOptions">
            <summary>
            Represents options for adding a query root field to mutation payloads.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.MutationPayloadOptions.QueryFieldName">
            <summary>
            The name of the query field on a mutation payload (default: query).
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.MutationPayloadOptions.MutationPayloadPredicate">
            <summary>
            A predicate that defines if the query field shall be added to
            the specified payload type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Relay.RelayOptions">
            <summary>
            Represents relay options.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.RelayOptions.AddQueryFieldToMutationPayloads">
            <summary>
            If set to <c>true</c> the mutation payloads are rewritten to provide access to
            the query root type to allow better capabilities refetch data.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.RelayOptions.QueryFieldName">
            <summary>
            The name of the query field on a mutation payload (default: query).
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.RelayOptions.MutationPayloadPredicate">
            <summary>
            A predicate that defines if the query field shall be added to
            the specified payload type.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.RelayIdFieldExtensions">
            <summary>
            <c>.ID()</c> marks a field or parameter as a Global Unique Id.
            The type of the target is rewritten to <c>ID</c> and a middleware is registered that,
            automatically combines the value of fields annotated as ID with another value to form a
            global identifier.
            </summary>
            <remarks>
            Per default, this additional value is the name of the type the Id belongs to.
            Since type names are unique within a schema, this ensures that we are returning a unique
            Id within the schema. If our GraphQL server serves multiple schemas, the schema name
            is also included in this combined Id. The resulting Id is then Base64 encoded to make
            it opaque.
            </remarks>
            <example>
            <para>
            A field can be rewritten to a id by adding <c>[ID]</c> to the resolver.
            </para>
            <code>
            public class User
            {
                public int Id {get; set;}
            }
            public class UserType : ObjectType&gt;User>
            {
                protected override void Configure(IObjectTypeDescriptor&gt;User> descriptor)
                {
                    descriptor.Field(x => x.User).ID();
                }
            }
            </code>
            <para>
            In the resulting schema, the field `<c>User.id</c>` will be rewritten from `<c>Int</c>`
            to `<c>ID</c>`
            </para>
            <code>
            type User
            {
                id: ID!
            }
            </code>
            <para>
            If `<c>User.id</c>` is requested in a query, the value is transformed to a base64 string
            combined with the typename
            Assuming `<c>User.id</c>` has the value 1. The following string is base64 encoded
            <code>
            User
            i1
            </code>
            results in
            <code>
            VXNlcgppMQ==
            </code>
            </para>
            </example>
        </member>
        <member name="M:HotChocolate.Types.RelayIdFieldExtensions.ID(HotChocolate.Types.IInputFieldDescriptor,HotChocolate.NameString)">
            <inheritdoc cref="T:HotChocolate.Types.RelayIdFieldExtensions"/>
            <param name="descriptor">the the descriptor</param>
            <param name="typeName">
            Sets the <see cref="P:HotChocolate.Types.Relay.IDAttribute.TypeName">type name</see> of the relay id
            </param>
        </member>
        <member name="M:HotChocolate.Types.RelayIdFieldExtensions.ID(HotChocolate.Types.IArgumentDescriptor,HotChocolate.NameString)">
            <inheritdoc cref="T:HotChocolate.Types.RelayIdFieldExtensions"/>
            <param name="descriptor">the the descriptor</param>
            <param name="typeName">
            Sets the <see cref="P:HotChocolate.Types.Relay.IDAttribute.TypeName">type name</see> of the relay id
            </param>
        </member>
        <member name="M:HotChocolate.Types.RelayIdFieldExtensions.ID(HotChocolate.Types.IObjectFieldDescriptor,HotChocolate.NameString)">
            <inheritdoc cref="T:HotChocolate.Types.RelayIdFieldExtensions"/>
            <param name="descriptor">the the descriptor</param>
            <param name="typeName">
            Sets the <see cref="P:HotChocolate.Types.Relay.IDAttribute.TypeName">type name</see> of the relay id
            </param>
        </member>
        <member name="M:HotChocolate.Types.RelayIdFieldExtensions.ID(HotChocolate.Types.IInterfaceFieldDescriptor)">
            <inheritdoc cref="T:HotChocolate.Types.RelayIdFieldExtensions"/>
            <param name="descriptor">the the descriptor</param>
        </member>
        <member name="T:HotChocolate.Types.ResolveAbstractType">
            <summary>
            Gets the concrete object type of a resolver result.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.AnyType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.AnyType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.AnyType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.AnyType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.BooleanType">
             <summary>
             The Boolean scalar type represents true or false.
            
             http://facebook.github.io/graphql/June2018/#sec-Boolean
             </summary>
        </member>
        <member name="M:HotChocolate.Types.BooleanType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.BooleanType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.BooleanType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.BooleanType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ByteArrayType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ByteArrayType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ByteArrayType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ByteArrayType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ByteType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ByteType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ByteType.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ByteType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ByteType.#ctor(HotChocolate.NameString,System.String,System.Byte,System.Byte,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ByteType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.DateTimeType">
             <summary>
             This GraphQL Scalar represents an exact point in time.
             This point in time is specified by having an offset to UTC and does not use time zone.
            
             https://www.graphql-scalars.com/date-time/
             </summary>
        </member>
        <member name="M:HotChocolate.Types.DateTimeType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DateTimeType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DateTimeType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DateTimeType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DateType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DateTimeType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DateType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DateTimeType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DecimalType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DecimalType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DecimalType.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DecimalType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.DecimalType.#ctor(HotChocolate.NameString,System.String,System.Decimal,System.Decimal,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.DecimalType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.FloatType">
             <summary>
             The Float scalar type represents signed double‐precision fractional
             values as specified by IEEE 754. Response formats that support an
             appropriate double‐precision number type should use that type to
             represent this scalar.
            
             http://facebook.github.io/graphql/June2018/#sec-Float
             </summary>
        </member>
        <member name="M:HotChocolate.Types.FloatType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.FloatType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.FloatType.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.FloatType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.FloatType.#ctor(HotChocolate.NameString,System.String,System.Double,System.Double,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.FloatType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.FloatTypeBase`1.IsInstanceOfType(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.FloatTypeBase`1.CreateParseValueError(System.Object)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.FloatTypeBase`1.ParseLiteral(HotChocolate.Language.IValueNode)"/> encountered an
            invalid <see cref="T:HotChocolate.Language.IValueNode"/>
            </summary>
            <param name="valueSyntax">
            The value syntax that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="M:HotChocolate.Types.FloatTypeBase`1.CreateParseLiteralError(HotChocolate.Language.IValueNode)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.FloatTypeBase`1.ParseLiteral(HotChocolate.Language.IValueNode)"/> encountered an
            invalid <see cref="T:HotChocolate.Language.IValueNode"/>
            </summary>
            <param name="valueSyntax">
            The value syntax that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="M:HotChocolate.Types.FloatTypeBase`1.CreateParseResultError(System.Object)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.FloatTypeBase`1.ParseResult(System.Object)"/> encountered an
            invalid value
            </summary>
            <param name="runtimeValue">
            The runtimeValue that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IdType">
             <summary>
             The ID scalar type represents a unique identifier, often used to refetch
             an object or as the key for a cache. The ID type is serialized in the
             same way as a String; however, it is not intended to be human‐readable.
            
             While it is often numeric, it should always serialize as a String.
            
             http://facebook.github.io/graphql/June2018/#sec-ID
             </summary>
        </member>
        <member name="M:HotChocolate.Types.IdType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IdType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IdType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IdType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IntegerTypeBase`1.CreateParseResultError(System.Object)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.IntegerTypeBase`1.ParseResult(System.Object)"/> encountered an
            invalid value
            </summary>
            <param name="runtimeValue">
            The runtimeValue that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="T:HotChocolate.Types.IntType">
             <summary>
             The Int scalar type represents a signed 32‐bit numeric non‐fractional
             value. Response formats that support a 32‐bit integer or a number type
             should use that type to represent this scalar.
            
             http://facebook.github.io/graphql/June2018/#sec-Int
             </summary>
        </member>
        <member name="M:HotChocolate.Types.IntType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IntType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IntType.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IntType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IntType.#ctor(HotChocolate.NameString,System.String,System.Int32,System.Int32,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IntType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Iso8601Duration">
            <summary>
            ISO 8601 Duration based on XsdDuration which include additional "Weeks" part
            https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.Xml/src/System/Xml/Schema/XsdDuration.cs
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Iso8601Duration.TryToTimeSpan(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Nullable{System.TimeSpan}@)">
            <summary>
            Internal helper method that converts to a TimeSpan value. This code uses the estimate
            that there are 365 days in the year, 52 weeks in a year and 30 days in a month.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Iso8601Duration.TryParseDigits(System.String,System.Int32@,System.Boolean,System.Int32@,System.Int32@)">
            Helper method that constructs an integer from leading digits starting at s[offset].
            "offset" is updated to contain an offset just beyond the last digit.
            The number of digits consumed is returned in cntDigits.
            The integer is returned (0 if no digits).  If the digits cannot fit into an Int32:
              1. If eatDigits is true, then additional digits will be silently discarded
                 (don't count towards numDigits)
              2. If eatDigits is false, an overflow exception is thrown
        </member>
        <member name="M:HotChocolate.Types.LongType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.LongType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.LongType.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.LongType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.LongType.#ctor(HotChocolate.NameString,System.String,System.Int64,System.Int64,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.LongType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.MultiplierPathType">
            <summary>
            The name scalar represents a valid GraphQL name as specified in the spec
            and can be used to refer to fields or types.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.MultiplierPathType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.MultiplierPathType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.NameType">
            <summary>
            The name scalar represents a valid GraphQL name as specified in the spec
            and can be used to refer to fields or types.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.NameType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.NameType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.NameType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.NameType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.Scalars">
            <summary>
            This class provides helper methods to deal with scalar types.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Scalars.IsBuiltIn(HotChocolate.NameString)">
            <summary>
            Defines if the specified name represents a built-in scalar type.
            </summary>
            <param name="typeName">
            A GraphQL type name.
            </param>
            <returns>
            Returns <c>true</c> if the specified name represents a built-in scalar type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.Scalars.IsReservedName(HotChocolate.NameString)" -->
        <member name="M:HotChocolate.Types.Scalars.TryGetKind(System.Object,HotChocolate.Types.ValueKind@)">
            <summary>
            Tries to infer the GraphQL literal kind from a runtime value.
            </summary>
            <param name="value">
            The runtime value.
            </param>
            <param name="kind">
            The expected GraphQL literal kind.
            </param>
            <returns>
            <c>true</c> if the literal kind can be inferred.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.ScalarType">
            <summary>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves on these trees are GraphQL scalars.
            </summary>
            <summary>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves on these trees are GraphQL scalars.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.Kind">
            <summary>
            Gets the type kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.Bind">
            <summary>
            Defines if this scalar binds implicitly to its runtime type or
            if it has to be explicitly assigned to it.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.RuntimeType">
            <summary>
            The .net type representation of this scalar.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.SpecifiedBy">
            <summary>
            Gets the optional description of this scalar type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.IsInstanceOfType(HotChocolate.Language.IValueNode)">
            <summary>
            Defines if the specified <paramref name="valueSyntax" />
            can be parsed by this scalar.
            </summary>
            <param name="valueSyntax">
            The literal that shall be checked.
            </param>
            <returns>
            <c>true</c> if the literal can be parsed by this scalar;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueSyntax" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.IsInstanceOfType(System.Object)">
            <summary>
            Defines if the specified <paramref name="runtimeValue" />
            is a instance of this type.
            </summary>
            <param name="runtimeValue">
            A value representation of this type.
            </param>
            <returns>
            <c>true</c> if the value is a value of this type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.ParseLiteral(HotChocolate.Language.IValueNode)">
            <summary>
            Parses the specified <paramref name="valueSyntax" />
            to the .net representation of this type.
            </summary>
            <param name="valueSyntax">
                The literal that shall be parsed.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueSyntax" /> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Types.SerializationException">
            The specified <paramref name="valueSyntax" /> cannot be parsed
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.ParseValue(System.Object)">
            <summary>
            Parses the .net value representation to a value literal.
            </summary>
            <param name="runtimeValue">
            The .net value representation.
            </param>
            <returns>
            Returns a GraphQL literal representing the .net value.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            The specified <paramref name="runtimeValue" /> cannot be parsed
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.ParseResult(System.Object)">
            <summary>
            Parses a result value of this into a GraphQL value syntax representation.
            </summary>
            <param name="resultValue">
            A result value representation of this type.
            </param>
            <returns>
            Returns a GraphQL value syntax representation of the <paramref name="resultValue"/>.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            Unable to parse the given <paramref name="resultValue"/>
            into a GraphQL value syntax representation of this type.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.Serialize(System.Object)">
            <summary>
            Serializes the .net value representation.
            </summary>
            <param name="runtimeValue">
            The .net value representation.
            </param>
            <returns>
            Returns the serialized value.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            The specified <paramref name="runtimeValue" /> cannot be serialized
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.TrySerialize(System.Object,System.Object@)">
            <summary>
            Tries to serializes the .net value representation to the output format.
            </summary>
            <param name="runtimeValue">
            The .net value representation.
            </param>
            <param name="resultValue">
            The serialized value.
            </param>
            <returns>
            <c>true</c> if the value was correctly serialized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.Deserialize(System.Object)">
            <summary>
            Deserializes the serialized value to it`s .net value representation.
            </summary>
            <param name="resultValue">
            The serialized value representation.
            </param>
            <returns>
            Returns the .net value representation.
            </returns>
            <exception cref="T:HotChocolate.Types.SerializationException">
            The specified <paramref name="resultValue" /> cannot be deserialized
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.TryDeserialize(System.Object,System.Object@)">
            <summary>
            Tries to deserializes the value from the output format to the .net value representation.
            </summary>
            <param name="resultValue">
            The serialized value.
            </param>
            <param name="runtimeValue">
            The .net value representation.
            </param>
            <returns>
            <c>true</c> if the serialized value was correctly deserialized; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.#ctor(HotChocolate.NameString,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Types.ScalarType"/> class.
            </summary>
            <param name="name">
            The unique type name.
            </param>
            <param name="bind">
            Defines if this scalar binds implicitly to its runtime type or
            if it has to be explicitly assigned to it.
            </param>
        </member>
        <member name="T:HotChocolate.Types.ScalarType`1">
            <summary>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves on these trees are GraphQL scalars.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`1.#ctor(HotChocolate.NameString,HotChocolate.Types.BindingBehavior)">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.ScalarType`1.RuntimeType">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`1.TrySerialize(System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`1.TryDeserialize(System.Object,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Types.ScalarType`2">
            <summary>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves on these trees are GraphQL scalars.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.#ctor(HotChocolate.NameString,HotChocolate.Types.BindingBehavior)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.IsInstanceOfType(HotChocolate.Language.IValueNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.IsInstanceOfType(`1)">
            <summary>
            Defines if the specified <paramref name="valueSyntax" />
            can be parsed by this scalar.
            </summary>
            <param name="valueSyntax">
            The literal that shall be checked.
            </param>
            <returns>
            <c>true</c> if the literal can be parsed by this scalar;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueSyntax" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.IsInstanceOfType(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.IsInstanceOfType(`0)">
            <summary>
            Defines if the specified <paramref name="runtimeValue" />
            is a instance of this type.
            </summary>
            <param name="runtimeValue">
            A value representation of this type.
            </param>
            <returns>
            <c>true</c> if the value is a value of this type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.ParseLiteral(HotChocolate.Language.IValueNode)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.ParseLiteral(`1)">
            <summary>
            Parses the specified <paramref name="valueSyntax" />
            to the .net representation of this type.
            </summary>
            <param name="valueSyntax">
            The literal that shall be parsed.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="valueSyntax" /> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Types.SerializationException">
            The specified <paramref name="valueSyntax" /> cannot be parsed
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.ParseValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.ParseValue(`0)">
            <summary>
            Parses a <typeparam name="TRuntimeType">runtime value</typeparam> into a
            <typeparam name="TLiteral">valueSyntax</typeparam>
            </summary>
            <param name="runtimeValue">The value to parse</param>
            <returns>The parsed value syntax</returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.CreateParseLiteralError(HotChocolate.Language.IValueNode)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.ScalarType`2.ParseLiteral(HotChocolate.Language.IValueNode)"/> encountered an
            invalid <see cref="T:HotChocolate.Language.IValueNode"/>
            </summary>
            <param name="valueSyntax">
            The value syntax that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType`2.CreateParseValueError(System.Object)">
            <summary>
            Creates the exception that will be thrown when <see cref="M:HotChocolate.Types.ScalarType`2.ParseValue(System.Object)"/> encountered an
            invalid value
            </summary>
            <param name="runtimeValue">
            The runtimeValue that should be parsed
            </param>
            <returns>
            The created exception that should be thrown
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ShortType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ShortType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ShortType.#ctor(System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ShortType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ShortType.#ctor(HotChocolate.NameString,System.String,System.Int16,System.Int16,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.ShortType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.SpecScalarAttribute">
            <summary>
            Defines that the annotated scalar type is defined
            in the GraphQL specification.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.StringType">
             <summary>
             The String scalar type represents textual data, represented as
             UTF‐8 character sequences. The String type is most often used
             by GraphQL to represent free‐form human‐readable text.
            
             http://facebook.github.io/graphql/June2018/#sec-String
             </summary>
        </member>
        <member name="M:HotChocolate.Types.StringType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.StringType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.StringType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.StringType"/> class.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TimeSpanFormat.Iso8601">
            <summary>
            TimeSpan ISO 8601 Format
            https://tools.ietf.org/html/rfc3339
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TimeSpanFormat.DotNet">
            <summary>
            TimeSpan .NET Constant ("c") Format
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings#the-constant-c-format-specifier
            </summary>
        </member>
        <member name="T:HotChocolate.Types.TimeSpanType">
            <summary>
            The TimeSpan scalar type represented in two formats:
            <see cref="F:HotChocolate.Types.TimeSpanFormat.Iso8601"/> and <see cref="F:HotChocolate.Types.TimeSpanFormat.DotNet"/>
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UrlType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.UrlType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UrlType.#ctor(HotChocolate.NameString,System.String,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.UrlType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UuidType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.UuidType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UuidType.#ctor(System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.UuidType"/> class.
            </summary>
            <param name="defaultFormat">
            The expected format of GUID strings by this scalar.
            <c>'N'</c>: nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
            <c>'D'</c>(default):  nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn
            <c>'B'</c>: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}
            <c>'P'</c>: (nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)
            </param>
            <param name="enforceFormat">
            Specifies if the <paramref name="defaultFormat"/> is enforced and violations will cause
            a <see cref="T:HotChocolate.Types.SerializationException"/>. If set to <c>false</c> and the string
            does not match the <paramref name="defaultFormat"/> the scalar will try to deserialize
            the string using the other formats.
            </param>
        </member>
        <member name="M:HotChocolate.Types.UuidType.#ctor(HotChocolate.NameString,System.String,System.Char,System.Boolean,HotChocolate.Types.BindingBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.UuidType"/> class.
            </summary>
            <param name="name">
            The name that this scalar shall have.
            </param>
            <param name="description">
            The description of this scalar.
            </param>
            <param name="defaultFormat">
            The expected format of GUID strings by this scalar.
            <c>'N'</c> (default): nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
            <c>'D'</c>: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn
            <c>'B'</c>: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}
            <c>'P'</c>: (nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn)
            </param>
            <param name="enforceFormat">
            Specifies if the <paramref name="defaultFormat"/> is enforced and violations will cause
            a <see cref="T:HotChocolate.Types.SerializationException"/>. If set to <c>false</c> and the string
            does not match the <paramref name="defaultFormat"/> the scalar will try to deserialize
            the string using the other formats.
            </param>
            <param name="bind">
            Defines if this scalar binds implicitly to <see cref="T:System.Guid"/>,
            or must be explicitly bound.
            </param>
        </member>
        <member name="P:HotChocolate.Types.TypeSystemObjectBase.Scope">
            <summary>
            Gets a scope name that was provided by an extension.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TypeSystemObjectBase.Name">
            <summary>
            Gets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TypeSystemObjectBase.Description">
            <summary>
            Gets the optional description of this scalar type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.TypeSystemObjectBase.Initialize(HotChocolate.Configuration.ITypeDiscoveryContext)">
            <summary>
            The type configuration is created and dependencies are registered.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.TypeSystemObjectBase.CompleteName(HotChocolate.Configuration.ITypeCompletionContext)">
            <summary>
            If this type has a dynamic type it will be completed in this step.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.TypeSystemObjectBase.CompleteType(HotChocolate.Configuration.ITypeCompletionContext)">
            <summary>
            All type properties are set and the type settings are completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.TypeSystemObjectBase.FinalizeType(HotChocolate.Configuration.ITypeCompletionContext)">
             <summary>
             All types are completed at this point and the type can clean up any
             temporary data structures.
            
             This step is mainly to cleanup.
             </summary>
        </member>
        <member name="T:HotChocolate.Types.UnionType">
             <summary>
             GraphQL Unions represent an object that could be one of a list of GraphQL Object types,
             but provides for no guaranteed fields between those types.
             They also differ from interfaces in that Object types declare what interfaces
             they implement, but are not aware of what unions contain them.
            
             With interfaces and objects, only those fields defined on the type can be queried directly;
             to query other fields on an interface, typed fragments must be used.
             This is the same as for unions, but unions do not define any fields,
             so no fields may be queried on this type without the use of type refining
             fragments or inline fragments (with the exception of the meta-field __typename).
            
             For example, we might define the following types:
            
             <code>
             union SearchResult = Photo | Person
            
             type Person {
               name: String
               age: Int
             }
            
             type Photo {
               height: Int
               width: Int
             }
            
             type SearchQuery {
               firstSearchResult: SearchResult
             }
             </code>
             </summary>
        </member>
        <member name="M:HotChocolate.Types.UnionType.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.UnionType"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UnionType.#ctor(System.Action{HotChocolate.Types.IUnionTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.UnionType"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.UnionType.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition)">
            <summary>
            Create a union type from a type definition.
            </summary>
            <param name="definition">
            The union type definition that specifies the properties of the
            newly created union type.
            </param>
            <returns>
            Returns the newly created union type.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.UnionType.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.UnionType.SyntaxNode">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Types.UnionType.Types">
            <summary>
            Gets the <see cref="T:HotChocolate.Types.IObjectType" /> set of this union type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UnionType.IsAssignableFrom(HotChocolate.Types.INamedType)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.UnionType.ContainsType(HotChocolate.Types.ObjectType)">
            <summary>
            Checks if the type set of this union type contains the
            specified <paramref name="objectType"/>.
            </summary>
            <param name="objectType">
            The object type.
            </param>
            <returns>
            Returns <c>true</c>, if the type set of this union type contains the
            specified <paramref name="objectType"/>; otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.UnionType.ContainsType(HotChocolate.NameString)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Types.UnionType.ResolveConcreteType(HotChocolate.Resolvers.IResolverContext,System.Object)">
            <summary>
            Resolves the concrete type for the value of a type
            that implements this interface.
            </summary>
            <param name="context">
            The resolver context.
            </param>
            <param name="resolverResult">
            The value for which the type shall be resolved.
            </param>
            <returns>
            Returns <c>null</c> if the value is not of a type
            implementing this interface.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.UnionTypeExtension">
            <summary>
            Union type extensions are used to represent a union type which has been extended
            from some original union type. For example, this might be used to represent additional
            local data, or by a GraphQL service which is itself an extension of another
            GraphQL service.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UnionTypeExtension.#ctor">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.UnionTypeExtension"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.UnionTypeExtension.#ctor(System.Action{HotChocolate.Types.IUnionTypeDescriptor})">
            <summary>
            Initializes a new  instance of <see cref="T:HotChocolate.Types.UnionTypeExtension"/>.
            </summary>
            <param name="configure">
            A delegate to specify the properties of this type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configure"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.UnionTypeExtension.CreateUnsafe(HotChocolate.Types.Descriptors.Definitions.UnionTypeDefinition)">
            <summary>
            Create a union type extension from a type definition.
            </summary>
            <param name="definition">
            The union type definition that specifies the properties of the
            newly created union type extension.
            </param>
            <returns>
            Returns the newly created union type extension.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.UnionTypeExtension.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.RelaySchemaBuilderExtensions.EnableRelaySupport(HotChocolate.ISchemaBuilder,HotChocolate.Types.Relay.RelayOptions)">
            <summary>
            Enables relay schema style.
            </summary>
        </member>
        <member name="M:HotChocolate.RelaySchemaBuilderExtensions.AddGlobalObjectIdentification(HotChocolate.ISchemaBuilder)">
            <summary>
            Adds a <c>node</c> field to the root query according to the
            Global Object Identification specification.
            </summary>
        </member>
        <member name="M:HotChocolate.RelaySchemaBuilderExtensions.AddQueryFieldToMutationPayloads(HotChocolate.ISchemaBuilder,System.Action{HotChocolate.Types.Relay.MutationPayloadOptions})">
            <summary>
            Enables rewriting of mutation payloads to provide access to a query root field.
            </summary>
        </member>
        <member name="T:HotChocolate.Utilities.IChangeTypeProvider">
            <summary>
            A <see cref="T:HotChocolate.Utilities.IChangeTypeProvider" /> is used by the type converter to create new converter.
            Each <see cref="T:HotChocolate.Utilities.IChangeTypeProvider" /> can provide one ore multiple value converters.
            </summary>
        </member>
        <member name="M:HotChocolate.Utilities.IChangeTypeProvider.TryCreateConverter(System.Type,System.Type,HotChocolate.Utilities.ChangeTypeProvider,HotChocolate.Utilities.ChangeType@)">
            <summary>
            Tries to create a converter that can convert a value that is of the
            type <paramref name="source"/> to a value of the type <paramref name="target"/>.
            If this type provider can only handle parts of the conversion it can refer back to the
            root converter to ask other <see cref="T:HotChocolate.Utilities.IChangeTypeProvider"/> to provide the rest of
            the type conversion.
            </summary>
            <param name="source">
            The source type.
            </param>
            <param name="target">
            The traget type.
            </param>
            <param name="root">
            The root change type provider that has access to
            all registered <see cref="T:HotChocolate.Utilities.IChangeTypeProvider"/>.
            </param>
            <param name="converter">
            The converter that was produced by this instance.
            </param>
            <returns>
            Returns a boolean indicating if this <see cref="T:HotChocolate.Utilities.IChangeTypeProvider"/> was able to
            create a type converter.
            </returns>
        </member>
    </members>
</doc>
