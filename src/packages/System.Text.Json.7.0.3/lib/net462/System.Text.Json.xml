<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Text.Json</name>
    </assembly>
    <members>
        <member name="P:System.HexConverter.CharToHexLookup">
            <summary>Map from an ASCII char to its hex value, e.g. arr['b'] == 11. 0xFF means it's not a hex digit.</summary>
        </member>
        <member name="T:System.Text.Json.JsonNamingPolicy">
            <summary>
            Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.JsonNamingPolicy"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
            <summary>
            Returns the naming policy for camel-casing.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
            <summary>
            When overridden in a derived class, converts the specified name according to the policy.
            </summary>
            <param name="name">The name to convert.</param>
            <returns>The converted name.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonAttribute">
            <summary>
            The base class of serialization attributes.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
            <summary>
            When specified on <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/>,
            determines when properties and fields across the type graph are ignored.
            When specified on <see cref="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition"/>, controls whether
            a property or field is ignored during serialization and deserialization. This option
            overrides the setting on <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
            <summary>
            Property is never ignored during serialization or deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
            <summary>
            Property is always ignored during serialization and deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
            <summary>
            If the value is the default, the property is ignored during serialization.
            This is applied to both reference and value-type properties and fields.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
            <summary>
            If the value is <see langword="null"/>, the property is ignored during serialization.
            This is applied only to reference-type properties and fields.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonKnownNamingPolicy">
            <summary>
            The <see cref="T:System.Text.Json.JsonNamingPolicy"/> to be used at run time.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonKnownNamingPolicy.Unspecified">
            <summary>
            Specifies that JSON property names should not be converted.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonKnownNamingPolicy.CamelCase">
            <summary>
            Specifies that the built-in <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase"/> be used to convert JSON property names.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
            <summary>
            Determines how <see cref="T:System.Text.Json.JsonSerializer"/> handles numbers when serializing and deserializing.
            <remarks>
            The behavior of <see cref="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString"/> and <see cref="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals"/> is not defined by the JSON specification. Altering the default number handling can potentially produce JSON that cannot be parsed by other JSON implementations.
            </remarks>
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
            <summary>
            Numbers will only be read from <see cref="F:System.Text.Json.JsonTokenType.Number"/> tokens and will only be written as JSON numbers (without quotes).
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
            <summary>
            Numbers can be read from <see cref="F:System.Text.Json.JsonTokenType.String"/> tokens.
            Does not prevent numbers from being read from <see cref="F:System.Text.Json.JsonTokenType.Number"/> token.
            Strings that have escaped characters will be unescaped before reading.
            Leading or trailing trivia within the string token, including whitespace, is not allowed.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
            <summary>
            Numbers will be written as JSON strings (with quotes), not as JSON numbers.
            <remarks>
            This behavior is not defined by the JSON specification. Altering the default number handling can potentially produce JSON that cannot be parsed by other JSON implementations.
            </remarks>
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
            <summary>
            The "NaN", "Infinity", and "-Infinity" <see cref="F:System.Text.Json.JsonTokenType.String"/> tokens can be read as
            floating-point constants, and the <see cref="T:System.Single"/> and <see cref="T:System.Double"/> values for these
            constants (such as <see cref="F:System.Single.PositiveInfinity"/> and <see cref="F:System.Double.NaN"/>)
            will be written as their corresponding JSON string representations.
            Strings that have escaped characters will be unescaped before reading.
            Leading or trailing trivia within the string token, including whitespace, is not allowed.
            <remarks>
            This behavior is not defined by the JSON specification. Altering the default number handling can potentially produce JSON that cannot be parsed by other JSON implementations.
            </remarks>
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializableAttribute">
            <summary>
            Instructs the System.Text.Json source generator to generate source code to help optimize performance
            when serializing and deserializing instances of the specified type and types in its object graph.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializableAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonSerializableAttribute"/> with the specified type.
            </summary>
            <param name="type">The type to generate source code for.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializableAttribute.TypeInfoPropertyName">
            <summary>
            The name of the property for the generated <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> for
            the type on the generated, derived <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> type.
            </summary>
            <remarks>
            Useful to resolve a name collision with another type in the compilation closure.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode">
            <summary>
            Determines what the source generator should generate for the type. If the value is <see cref="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Default"/>,
            then the setting specified on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode"/> will be used.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSourceGenerationMode">
            <summary>
            The generation mode for the System.Text.Json source generator.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Default">
            <summary>
            When specified on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode"/>, indicates that both type-metadata initialization logic
            and optimized serialization logic should be generated for all types. When specified on <see cref="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode"/>,
            indicates that the setting on <see cref="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode"/> should be used.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Metadata">
            <summary>
            Instructs the JSON source generator to generate type-metadata initialization logic.
            </summary>
            <remarks>
            This mode supports all <see cref="T:System.Text.Json.JsonSerializer"/> features.
            </remarks>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonSourceGenerationMode.Serialization">
            <summary>
            Instructs the JSON source generator to generate optimized serialization logic.
            </summary>
            <remarks>
            This mode supports only a subset of <see cref="T:System.Text.Json.JsonSerializer"/> features.
            </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute">
            <summary>
            Instructs the System.Text.Json source generator to assume the specified
            options will be used at run time via <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.DefaultIgnoreCondition">
            <summary>
            Specifies the default ignore condition.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IgnoreReadOnlyFields">
            <summary>
            Specifies whether to ignore read-only fields.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IgnoreReadOnlyProperties">
            <summary>
            Specifies whether to ignore read-only properties.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.IncludeFields">
            <summary>
            Specifies whether to include fields for serialization and deserialization.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.PropertyNamingPolicy">
            <summary>
            Specifies a built-in naming polices to convert JSON property names with.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.WriteIndented">
            <summary>
            Specifies whether JSON output should be pretty-printed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute.GenerationMode">
            <summary>
            Specifies the source generation mode for types that don't explicitly set the mode with <see cref="P:System.Text.Json.Serialization.JsonSerializableAttribute.GenerationMode"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
            <summary>
            When placed on a constructor, indicates that the constructor should be used to create
            instances of the type on deserialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
            <summary>
            When placed on a property, field, or type, specifies the converter type to use.
            </summary>
            <remarks>
            The specified converter type must derive from <see cref="T:System.Text.Json.Serialization.JsonConverter"/>.
            When placed on a property or field, the specified converter will always be used.
            When placed on a type, the specified converter will be used unless a compatible converter is added to
            <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/> or there is another <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> on a property or field
            of the same type.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> with the specified converter type.
            </summary>
            <param name="converterType">The type of the converter.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
            <summary>
            The type of the converter to create, or null if <see cref="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)"/> should be used to obtain the converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
            <summary>
            If overridden and <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType"/> is null, allows a custom attribute to create the converter in order to pass additional state.
            </summary>
            <returns>
            The custom converter.
            </returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonDerivedTypeAttribute">
            <summary>
            When placed on a type declaration, indicates that the specified subtype should be opted into polymorphic serialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDerivedTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new attribute with specified parameters.
            </summary>
            <param name="derivedType">A derived type that should be supported in polymorphic serialization of the declared based type.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDerivedTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new attribute with specified parameters.
            </summary>
            <param name="derivedType">A derived type that should be supported in polymorphic serialization of the declared base type.</param>
            <param name="typeDiscriminator">The type discriminator identifier to be used for the serialization of the subtype.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDerivedTypeAttribute.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new attribute with specified parameters.
            </summary>
            <param name="derivedType">A derived type that should be supported in polymorphic serialization of the declared base type.</param>
            <param name="typeDiscriminator">The type discriminator identifier to be used for the serialization of the subtype.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonDerivedTypeAttribute.DerivedType">
            <summary>
            A derived type that should be supported in polymorphic serialization of the declared base type.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonDerivedTypeAttribute.TypeDiscriminator">
            <summary>
            The type discriminator identifier to be used for the serialization of the subtype.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
             <summary>
             When placed on a property or field of type <see cref="T:System.Text.Json.Nodes.JsonObject"/> or
             <see cref="T:System.Collections.Generic.IDictionary`2"/>, any properties that do not have a
             matching property or field are added during deserialization and written during serialization.
             </summary>
             <remarks>
             When using <see cref="T:System.Collections.Generic.IDictionary`2"/>, the TKey value must be <see cref="T:System.String"/>
             and TValue must be <see cref="T:System.Text.Json.JsonElement"/> or <see cref="T:System.Object"/>.
            
             During deserializing with a <see cref="T:System.Collections.Generic.IDictionary`2"/> extension property with TValue as
             <see cref="T:System.Object"/>, the type of object created will either be a <see cref="T:System.Text.Json.Nodes.JsonNode"/> or a
             <see cref="T:System.Text.Json.JsonElement"/> depending on the value of <see cref="P:System.Text.Json.JsonSerializerOptions.UnknownTypeHandling"/>.
            
             If a <see cref="T:System.Text.Json.JsonElement"/> is created, a "null" JSON value is treated as a JsonElement with <see cref="P:System.Text.Json.JsonElement.ValueKind"/>
             set to <see cref="F:System.Text.Json.JsonValueKind.Null"/>, otherwise a "null" JSON value is treated as a <c>null</c> object reference.
            
             During serializing, the name of the extension data member is not included in the JSON;
             the data contained within the extension data is serialized as properties of the JSON object.
            
             If there is more than one extension member on a type, or the member is not of the correct type,
             an <see cref="T:System.InvalidOperationException"/> is thrown during the first serialization or deserialization of that type.
             </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
            <summary>
            Prevents a property or field from being serialized or deserialized.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
            <summary>
            Specifies the condition that must be met before a property or field will be ignored.
            </summary>
            <remarks>The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always"/>.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
             <summary>
             Indicates that the property or field should be included for serialization and deserialization.
             </summary>
             <remarks>
             When applied to a public property, indicates that non-public getters and setters should be used for serialization and deserialization.
            
             Non-public properties and fields are not allowed when serializing and deserializing. If the attribute is used on a non-public property or field,
             an <see cref="T:System.InvalidOperationException"/> is thrown during the first serialization or deserialization of the declaring type.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
            <summary>
            When placed on a type, property, or field, indicates what <see cref="T:System.Text.Json.Serialization.JsonNumberHandling"/>
            settings should be used when serializing or deserializing numbers.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
            <summary>
            Indicates what settings should be used when serializing or deserializing numbers.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPolymorphicAttribute">
            <summary>
            When placed on a type, indicates that the type should be serialized polymorphically.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPolymorphicAttribute.TypeDiscriminatorPropertyName">
            <summary>
            Gets or sets a custom type discriminator property name for the polymorhic type.
            Uses the default '$type' property name if left unset.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPolymorphicAttribute.UnknownDerivedTypeHandling">
            <summary>
            Gets or sets the behavior when serializing an undeclared derived runtime type.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPolymorphicAttribute.IgnoreUnrecognizedTypeDiscriminators">
            <summary>
            When set to <see langword="true"/>, instructs the deserializer to ignore any
            unrecognized type discriminator id's and reverts to the contract of the base type.
            Otherwise, it will fail the deserialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
            <summary>
            Specifies the property name that is present in the JSON when serializing and deserializing.
            This overrides any naming policy specified by <see cref="T:System.Text.Json.JsonNamingPolicy"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> with the specified property name.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonRequiredAttribute">
            <summary>
            Indicates that the annotated member must bind to a JSON property on deserialization.
            </summary>
            <remarks>
            <see langword="null"/> token in JSON will not trigger a validation error.
            For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            this attribute will be mapped to <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.IsRequired"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonRequiredAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonPropertyOrderAttribute">
            <summary>
            Specifies the property order that is present in the JSON when serializing. Lower values are serialized first.
            If the attribute is not specified, the default value is 0.
            </summary>
            <remarks>If multiple properties have the same value, the ordering is undefined between them.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonPropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:System.Text.Json.Serialization.JsonPropertyOrderAttribute"/> with the specified order.
            </summary>
            <param name="order">The order of the property.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonPropertyOrderAttribute.Order">
            <summary>
            The serialization order of the property.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.CastingConverter`2">
            <summary>
            Converter wrapper which casts SourceType into TargetType
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.JsonMetadataServicesConverter`1">
            <summary>
            Provides a mechanism to invoke "fast-path" serialization logic via
            <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeHandler"/>. This type holds an optional
            reference to an actual <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> for the type
            <typeparamref name="T"/>, to provide a fallback when the fast path cannot be used.
            </summary>
            <typeparam name="T">The type to converter</typeparam>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.LargeObjectWithParameterizedConstructorConverterWithReflection`1">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ArrayConverter`2">
            <summary>
            Converter for <cref>System.Array</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.DictionaryDefaultConverter`3">
            <summary>
            Default base class implementation of <cref>JsonDictionaryConverter{TCollection}</cref> .
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.DictionaryOfTKeyTValueConverter`3">
            <summary>
            Converter for Dictionary{string, TValue} that (de)serializes as a JSON object with properties
            representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ICollectionOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.ICollection{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IDictionaryConverter`1">
            <summary>
            Converter for <cref>System.Collections.IDictionary</cref> that (de)serializes as a JSON object with properties
            representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IDictionaryOfTKeyTValueConverter`3">
            <summary>
            Converter for <cref>System.Collections.Generic.IDictionary{TKey, TValue}</cref> that
            (de)serializes as a JSON object with properties representing the dictionary element key and value.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableConverter`1">
            <summary>
            Converter for <cref>System.Collections.IEnumerable</cref>.
            </summary>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableConverterFactory">
            <summary>
            Converter factory for all IEnumerable types.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableDefaultConverter`2">
            <summary>
            Default base class implementation of <cref>JsonIEnumerableConverter{TCollection, TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IEnumerableOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.IEnumerable{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IListConverter`1">
            Converter for <cref>System.Collections.IList</cref>.
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.IListOfTConverter`2">
            <summary>
            Converter for <cref>System.Collections.Generic.IList{TElement}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ListOfTConverter`2">
            Converter for <cref>System.Collections.Generic.List{TElement}</cref>.
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.JsonNodeConverter">
            <summary>
            Converter for JsonNode-derived types. The {T} value must be Object and not JsonNode
            since we allow Object-declared members\variables to deserialize as {JsonNode}.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectConverterFactory">
            <summary>
            Converter factory for all object-based types (non-enumerable and non-primitive).
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectDefaultConverter`1">
            <summary>
            Default base class implementation of <cref>JsonObjectConverter{T}</cref>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.ReadConstructorArguments(System.Text.Json.ReadStack@,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Performs a full first pass of the JSON input and deserializes the ctor args.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Converters.ObjectWithParameterizedConstructorConverter`1.TryLookupConstructorParameter(System.Text.Json.ReadStack@,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonParameterInfo@)">
            <summary>
            Lookup the constructor parameter given its name in the reader.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.LargeObjectWithParameterizedConstructorConverter`1">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Converters.SmallObjectWithParameterizedConstructorConverter`5">
            <summary>
            Implementation of <cref>JsonObjectConverter{T}</cref> that supports the deserialization
            of JSON objects using parameterized constructors.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverter`1._nameCacheForWriting">
            <summary>
            Holds a mapping from enum value to text that might be formatted with <see cref="F:System.Text.Json.Serialization.Converters.EnumConverter`1._namingPolicy" />.
            <see cref="T:System.UInt64"/> is as the key used rather than <typeparamref name="T"/> given measurements that
            show private memory savings when a single type is used https://github.com/dotnet/runtime/pull/36726#discussion_r428868336.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverter`1._nameCacheForReading">
            <summary>
            Holds a mapping from text that might be formatted with <see cref="F:System.Text.Json.Serialization.Converters.EnumConverter`1._namingPolicy" /> to enum value.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverterOptions.AllowStrings">
            <summary>
            Allow string values.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Converters.EnumConverterOptions.AllowNumbers">
            <summary>
            Allow number values.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnDeserialized">
            <summary>
            Specifies that the JSON type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnDeserialized.OnDeserialized"/> method called after deserialization occurs.
            </summary>
            <remarks>
            This behavior is only supported on types representing JSON objects.
            Types that have a custom converter or represent either collections or primitive values do not support this behavior.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnDeserialized.OnDeserialized">
            <summary>
            The method that is called after deserialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnDeserializing">
            <summary>
            Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnDeserializing.OnDeserializing"/> method called before deserialization occurs.
            </summary>
            <remarks>
            This behavior is only supported on types representing JSON objects.
            Types that have a custom converter or represent either collections or primitive values do not support this behavior.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnDeserializing.OnDeserializing">
            <summary>
            The method that is called before deserialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnSerialized">
            <summary>
            Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnSerialized.OnSerialized"/> method called after serialization occurs.
            </summary>
            <remarks>
            This behavior is only supported on types representing JSON objects.
            Types that have a custom converter or represent either collections or primitive values do not support this behavior.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnSerialized.OnSerialized">
            <summary>
            The method that is called after serialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IJsonOnSerializing">
            <summary>
            Specifies that the type should have its <see cref="M:System.Text.Json.Serialization.IJsonOnSerializing.OnSerializing"/> method called before serialization occurs.
            </summary>
            <remarks>
            This behavior is only supported on types representing JSON objects.
            Types that have a custom converter or represent either collections or primitive values do not support this behavior.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.IJsonOnSerializing.OnSerializing">
            <summary>
            The method that is called before serialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonSerializerContext">
            <summary>
            Provides metadata about a set of types that is relevant to JSON serialization.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerContext.Options">
            <summary>
            Gets the run time specified options of the context. If no options were passed
            when instanciating the context, then a new instance is bound and returned.
            </summary>
            <remarks>
            The options instance cannot be mutated once it is bound to the context instance.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerContext.CanUseSerializationLogic">
            <summary>
            Indicates whether pre-generated serialization logic for types in the context
            is compatible with the run time specified <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonSerializerContext.GeneratedSerializerOptions">
            <summary>
            The default run time options for the context. Its values are defined at design-time via <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates an instance of <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> and binds it with the indicated <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
            <param name="options">The run time provided options for the context instance.</param>
            <remarks>
            If no instance options are passed, then no options are set until the context is bound using <see cref="M:System.Text.Json.JsonSerializerOptions.AddContext``1"/>,
            or until <see cref="P:System.Text.Json.Serialization.JsonSerializerContext.Options"/> is called, where a new options instance is created and bound.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance representing the given type.
            </summary>
            <param name="type">The type to fetch metadata about.</param>
            <returns>The metadata for the specified type, or <see langword="null" /> if the context has no metadata for the type.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling">
            <summary>
            Defines how objects of a derived runtime type that has not been explicitly declared for polymorphic serialization should be handled.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling.FailSerialization">
            <summary>
            An object of undeclared runtime type will fail polymorphic serialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling.FallBackToBaseType">
            <summary>
            An object of undeclared runtime type will fall back to the serialization contract of the base type.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownDerivedTypeHandling.FallBackToNearestAncestor">
            <summary>
            An object of undeclared runtime type will revert to the serialization contract of the nearest declared ancestor type.
            Certain interface hierarchies are not supported due to diamond ambiguity constraints.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver">
            <summary>
            Defines the default, reflection-based JSON contract resolver used by System.Text.Json.
            </summary>
            <remarks>
            The contract resolver used by <see cref="P:System.Text.Json.JsonSerializerOptions.Default"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.#ctor">
            <summary>
            Creates a mutable <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Resolves a JSON contract for a given <paramref name="type"/> and <paramref name="options"/> configuration.
            </summary>
            <param name="type">The type for which to resolve a JSON contract.</param>
            <param name="options">A <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance used to determine contract configuration.</param>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> defining a reflection-derived JSON contract for <paramref name="type"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> or <paramref name="options"/> is <see langword="null"/>.</exception>
            <remarks>
            The base implementation of this method will produce a reflection-derived contract
            and apply any callbacks from the <see cref="P:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.Modifiers"/> list.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.Modifiers">
             <summary>
             Gets a list of user-defined callbacks that can be used to modify the initial contract.
             </summary>
             <remarks>
             The modifier list will be rendered immutable after the first <see cref="M:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)"/> invocation.
            
             Modifier callbacks are called consecutively in the order in which they are specified in the list.
             </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver">
            <summary>
            Used to resolve the JSON serialization contract for requested types.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Resolves a <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> contract for the requested type and options.
            </summary>
            <param name="type">Type to be resolved.</param>
            <param name="options">Configuration used when resolving the metadata.</param>
            <returns>
            A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance matching the requested type,
            or <see langword="null"/> if no contract could be resolved.
            </returns>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonDerivedType">
            <summary>
            Represents a supported derived type defined in the metadata of a polymorphic type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonDerivedType.#ctor(System.Type)">
            <summary>
            Specifies a supported derived type without a type discriminator.
            </summary>
            <param name="derivedType">The derived type to be supported by the polymorphic type metadata.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonDerivedType.#ctor(System.Type,System.Int32)">
            <summary>
            Specifies a supported derived type with an integer type discriminator.
            </summary>
            <param name="derivedType">The derived type to be supported by the polymorphic type metadata.</param>
            <param name="typeDiscriminator">The type discriminator to be associated with the derived type.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonDerivedType.#ctor(System.Type,System.String)">
            <summary>
            Specifies a supported derived type with a string type discriminator.
            </summary>
            <param name="derivedType">The derived type to be supported by the polymorphic type metadata.</param>
            <param name="typeDiscriminator">The type discriminator to be associated with the derived type.</param>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonDerivedType.DerivedType">
            <summary>
            A derived type that should be supported in polymorphic serialization of the declared base type.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonDerivedType.TypeDiscriminator">
            <summary>
            The type discriminator identifier to be used for the serialization of the subtype.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions">
            <summary>
            Defines polymorphic configuration for a specified base type.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions.DerivedTypes">
            <summary>
            Gets the list of derived types supported in the current polymorphic type configuration.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions.IgnoreUnrecognizedTypeDiscriminators">
            <summary>
            When set to <see langword="true"/>, instructs the serializer to ignore any
            unrecognized type discriminator id's and reverts to the contract of the base type.
            Otherwise, it will fail the deserialization.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The parent <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions.UnknownDerivedTypeHandling">
            <summary>
            Gets or sets the behavior when serializing an undeclared derived runtime type.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The parent <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            </exception>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPolymorphismOptions.TypeDiscriminatorPropertyName">
            <summary>
            Gets or sets a custom type discriminator property name for the polymorhic type.
            Uses the default '$type' property name if left unset.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The parent <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            </exception>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver">
            <summary>
            Contains utilities and combinators acting on <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfoResolver.Combine(System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver[])">
             <summary>
             Combines multiple <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver"/> sources into one.
             </summary>
             <param name="resolvers">Sequence of contract resolvers to be queried for metadata.</param>
             <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver"/> combining results from <paramref name="resolvers"/>.</returns>
             <exception cref="T:System.ArgumentException"><paramref name="resolvers"/> or any of its elements is null.</exception>
             <remarks>
             The combined resolver will query each of <paramref name="resolvers"/> in the specified order,
             returning the first result that is non-null. If all <paramref name="resolvers"/> return null,
             then the combined resolver will also return <see langword="null"/>.
            
             Can be used to combine multiple <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> sources,
             which typically define contract metadata for small subsets of types.
             It can also be used to fall back to <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> wherever necessary.
             </remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind">
            <summary>
            Determines the kind of contract metadata a given <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> is specifying.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.None">
            <summary>
            Type is either a simple value or uses a custom converter.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object">
            <summary>
            Type is serialized as an object with properties.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Enumerable">
            <summary>
            Type is serialized as a collection with elements.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Dictionary">
            <summary>
            Type is serialized as a dictionary with key/value pair entries.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.CustomJsonTypeInfo`1">
            <summary>
            Creates and initializes serialization metadata for a type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.CustomJsonTypeInfo`1.#ctor(System.Text.Json.Serialization.JsonConverter,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates serialization metadata for a type using a simple converter.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.FSharpCoreReflectionProxy">
            <summary>
            Proxy class used to access FSharp.Core metadata and reflection APIs that are not statically available to System.Text.Json.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.FSharpCoreReflectionProxy.FSharpKind">
            <summary>
            The various categories of F# types that System.Text.Json supports.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.FSharpCoreReflectionProxy.IsFSharpType(System.Type)">
            <summary>
            Checks if the provided System.Type instance is emitted by the F# compiler.
            If true, also initializes the proxy singleton for future by other F# types.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.FSharpCoreReflectionProxy.Instance">
            <summary>
            Gets the singleton proxy instance; prerequires a successful IsFSharpType call for proxy initialization.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.DefaultValueHolder">
            <summary>
            Helper class used for calculating the default value for a given System.Type instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.DefaultValueHolder.DefaultValue">
            <summary>
            Returns the default value for the specified type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DefaultValueHolder.IsDefaultValue(System.Object)">
            <summary>
            Returns true if <param name="value"/> contains only default values.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DefaultValueHolder.CreateHolder(System.Type)">
            <summary>
            Creates a holder instance representing a type.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1">
            <summary>
            Provides serialization metadata about a collection type.
            </summary>
            <typeparam name="TCollection">The collection type.</typeparam>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1.ObjectCreator">
            <summary>
            A <see cref="T:System.Func`1"/> to create an instance of the collection when deserializing.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1.KeyInfo">
            <summary>
            If a dictionary type, the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance representing the key type.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1.ElementInfo">
            <summary>
            A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance representing the element type.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1.NumberHandling">
            <summary>
            The <see cref="T:System.Text.Json.Serialization.JsonNumberHandling"/> option to apply to number collection elements.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues`1.SerializeHandler">
            <summary>
            An optimized serialization implementation assuming pre-determined <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute"/> defaults.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonMetadataServices">
            <summary>
            Provides helpers to create and initialize metadata for JSON-serializable types.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateArrayInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0[]})">
            <summary>
            Creates serialization metadata for an array.
            </summary>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use.</param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateListInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use.</param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0},System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``1,``2}},``0})">
            <summary>
            Creates serialization metadata for <see cref="!:System.Collections.Immutable.ImmutableDictionary&lt;TKey, TValue&gt;"/> and
            types assignable to <see cref="!:System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <param name="createRangeFunc">A method to create an immutable dictionary instance.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIReadOnlyDictionaryInfo``3(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TKey">The generic definition of the key type.</typeparam>
            <typeparam name="TValue">The generic definition of the value type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateImmutableEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0},System.Func{System.Collections.Generic.IEnumerable{``1},``0})">
            <summary>
            Creates serialization metadata for non-dictionary immutable collection types.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <param name="createRangeFunc">A method to create an immutable dictionary instance.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIListInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIListInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateISetInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.ISet`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateICollectionInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateStackInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.Stack`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateQueueInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateConcurrentStackInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Concurrent.ConcurrentStack`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateConcurrentQueueInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIAsyncEnumerableInfo``2(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <typeparam name="TElement">The generic definition of the element type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIDictionaryInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateStackInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0},System.Action{``0,System.Object})">
            <summary>
            Creates serialization metadata for <see cref="T:System.Collections.Stack"/> types.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <param name="addFunc">A method for adding elements to the collection when using the serializer's code-paths.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateQueueInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0},System.Action{``0,System.Object})">
            <summary>
            Creates serialization metadata for <see cref="T:System.Collections.Queue"/> types.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <param name="addFunc">A method for adding elements to the collection when using the serializer's code-paths.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateIEnumerableInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{``0})">
            <summary>
            Creates serialization metadata for types assignable to <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="TCollection">The generic definition of the type.</typeparam>
            <param name="options"></param>
            <param name="collectionInfo">Provides serialization metadata about the collection type.</param>
            <returns>Serialization metadata for the given type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.BooleanConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Boolean"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ByteArrayConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts byte array values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ByteConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Byte"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CharConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Char"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DateTimeConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.DateTime"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DateTimeOffsetConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.DateTimeOffset"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DecimalConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Decimal"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.DoubleConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Double"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GuidConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Guid"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int16Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Int16"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int32Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Int32"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.Int64Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Int64"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonArrayConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.Nodes.JsonArray"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonElementConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.JsonElement"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonNodeConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.Nodes.JsonNode"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonObjectConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.Nodes.JsonObject"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonValueConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.Nodes.JsonArray"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.JsonDocumentConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Text.Json.JsonDocument"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.ObjectConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Object"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.SingleConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Single"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.SByteConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.SByte"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.StringConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.String"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.TimeSpanConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.TimeSpan"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt16Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.UInt16"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt32Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.UInt32"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UInt64Converter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.UInt64"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.UriConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Uri"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonMetadataServices.VersionConverter">
            <summary>
            Returns a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <see cref="T:System.Version"/> values.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetUnsupportedTypeConverter``1">
            <summary>
            Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that throws <see cref="T:System.NotSupportedException"/>.
            </summary>
            <typeparam name="T">The generic definition for the type.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that throws <see cref="T:System.NotSupportedException"/></returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetEnumConverter``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T"/> values.
            </summary>
            <typeparam name="T">The generic definition for the enum type.</typeparam>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization.</param>
            <returns>A <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T"/> values.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetNullableConverter``1(System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T??"/> values.
            </summary>
            <typeparam name="T">The generic definition for the underlying nullable type.</typeparam>
            <param name="underlyingTypeInfo">Serialization metadata for the underlying nullable type.</param>
            <returns>A <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T??"/> values</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetNullableConverter``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T??"/> values.
            </summary>
            <typeparam name="T">The generic definition for the underlying nullable type.</typeparam>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization.</param>
            <returns>A <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance that converts <typeparamref name="T??"/> values</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues{``0})">
            <summary>
            Creates metadata for a property or field.
            </summary>
            <typeparam name="T">The type that the converter for the property returns or accepts when converting JSON data.</typeparam>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to initialize the metadata with.</param>
            <param name="propertyInfo">Provides serialization metadata about the property or field.</param>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance initialized with the provided metadata.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonObjectInfoValues{``0})">
            <summary>
            Creates metadata for a complex class or struct.
            </summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to initialize the metadata with.</param>
            <param name="objectInfo">Provides serialization metadata about an object type with constructors, properties, and fields.</param>
            <typeparam name="T">The type of the class or struct.</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="options"/> or <paramref name="objectInfo"/> is null.</exception>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> instance representing the class or struct.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo``1(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.JsonConverter)">
            <summary>
            Creates metadata for a primitive or a type with a custom converter.
            </summary>
            <typeparam name="T">The generic type definition.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> instance representing the type.</returns>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1">
            <summary>
            Provides serialization metadata about an object type with constructors, properties, and fields.
            </summary>
            <typeparam name="T">The object type to serialize or deserialize.</typeparam>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ObjectCreator">
            <summary>
            Provides a mechanism to create an instance of the class or struct when deserializing, using a parameterless constructor.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ObjectWithParameterizedConstructorCreator">
            <summary>
            Provides a mechanism to create an instance of the class or struct when deserializing, using a parameterized constructor.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.PropertyMetadataInitializer">
            <summary>
            Provides a mechanism to initialize metadata for properties and fields of the class or struct.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.ConstructorParameterMetadataInitializer">
            <summary>
            Provides a mechanism to initialize metadata for a parameterized constructor of the class or struct to be used when deserializing.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.NumberHandling">
            <summary>
            Specifies how number properties and fields should be processed when serializing and deserializing.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonObjectInfoValues`1.SerializeHandler">
            <summary>
            Provides a serialization implementation for instances of the class or struct which assumes options specified by <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute"/>.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues">
            <summary>
            Provides information about a constructor parameter required for JSON deserialization.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.Name">
            <summary>
            The name of the parameter.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.ParameterType">
            <summary>
            The type of the parameter.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.Position">
            <summary>
            The zero-based position of the parameter in the formal parameter list.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.HasDefaultValue">
            <summary>
            Whether a default value was specified for the parameter.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonParameterInfoValues.DefaultValue">
            <summary>
            The default value of the parameter.
            </summary>
            <remarks>This API is for use by the output of the System.Text.Json source generator and should not be called directly.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonParameterInfo">
            <summary>
            Holds relevant state about a method parameter, like the default value of
            the parameter, and the position in the method's parameter list.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonParameterInfo.CreateIgnoredParameterPlaceholder(System.Text.Json.Serialization.Metadata.JsonParameterInfoValues,System.Text.Json.Serialization.Metadata.JsonPropertyInfo,System.Boolean)">
            <summary>
            Create a parameter that is ignored at run time. It uses the same type (typeof(sbyte)) to help
            prevent issues with unsupported types and helps ensure we don't accidently (de)serialize it.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonParameterInfo`1">
            <summary>
            Represents a strongly-typed parameter to prevent boxing where have less than 4 parameters.
            Holds relevant state like the default value of the parameter, and the position in the method's parameter list.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo">
            <summary>
            Provides JSON serialization-related metadata about a property or field defined in an object.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.EffectiveConverter">
            <summary>
            Converter after applying CustomConverter (i.e. JsonConverterAttribute)
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.CustomConverter">
             <summary>
             Gets or sets a custom converter override for the current property.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
             </exception>
             <remarks>
             It is possible to use <see cref="T:System.Text.Json.Serialization.JsonConverterFactory"/> instances with this property.
            
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/>, the value of
             <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.CustomConverter"/> will be mapped from <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> annotations.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Get">
            <summary>
            Gets or sets a getter delegate for the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
            </exception>
            <remarks>
            Setting to <see langword="null"/> will result in the property being skipped on serialization.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Set">
            <summary>
            Gets or sets a setter delegate for the property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
            </exception>
            <remarks>
            Setting to <see langword="null"/> will result in the property being skipped on deserialization.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.ShouldSerialize">
             <summary>
             Gets or sets a predicate deciding whether the current property value should be serialized.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
             </exception>
             <remarks>
             The first parameter denotes the parent object, the second parameter denotes the property value.
            
             Setting the predicate to <see langword="null"/> is equivalent to always serializing the property value.
            
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/>,
             the value of <see cref="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition"/> will map to this predicate.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.AttributeProvider">
             <summary>
             Gets or sets a custom attribute provider for the current property.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
             </exception>
             <remarks>
             When resolving metadata via <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> this
             will be populated with the underlying <see cref="T:System.Reflection.MemberInfo" /> of the serialized property or field.
            
             Setting a custom attribute provider will have no impact on the contract model,
             but serves as metadata for downstream contract modifiers.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.IsExtensionData">
             <summary>
             Specifies whether the current property is a special extension data property.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
            
             -or-
            
             The current <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.PropertyType"/> is not valid for use with extension data.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this property will be mapped from <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute"/> annotations.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.IsRequired">
             <summary>
             Specifies whether the current property is required for deserialization to be successful.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this property will be mapped from <see cref="T:System.Text.Json.Serialization.JsonRequiredAttribute"/> annotations.
            
             For contracts using <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/>, properties using the <see langword="required"/> keyword
             will also map to this setting, unless deserialization uses a SetsRequiredMembersAttribute on a constructor that populates all required properties.
             <see langword="required"/> keyword is currently not supported in <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> contracts.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.PropertyType">
            <summary>
            Gets the type of the current property.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.IsForTypeInfo">
            <summary>
            True if the corresponding cref="JsonTypeInfo.PropertyInfoForTypeInfo"/> is this instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Name">
             <summary>
             Gets or sets the JSON property name used when serializing the property.
             </summary>
             <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
             </exception>
             <remarks>
             The value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Name"/> cannot conflict with that of other <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> defined in the declaring <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.JsonTypeInfo"/>.
            
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value typically reflects the underlying .NET member name, the name derived from <see cref="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />,
             or the value specified in <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" />.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.NameAsUtf8Bytes">
            <summary>
            Utf8 version of Name.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.EscapedNameSection">
            <summary>
            The escaped name passed to the writer.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Options">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> value associated with the current contract instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Order">
            <summary>
            Gets or sets the serialization order for the current property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
            </exception>
            <remarks>
            For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            the value of this property will be mapped from <see cref="T:System.Text.Json.Serialization.JsonPropertyOrderAttribute"/> annotations.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.CanSerialize">
            <summary>
            Reflects the value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.HasGetter"/> combined with any additional global ignore policies.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.CanDeserialize">
            <summary>
            Reflects the value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.HasSetter"/> combined with any additional global ignore policies.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.SrcGen_HasJsonInclude">
            <summary>
            Relevant to source generated metadata: did the property have the <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute"/>?
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.SrcGen_IsPublic">
            <summary>
            Relevant to source generated metadata: is the property public?
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.DeclaringTypeNumberHandling">
            <summary>
            Number handling for declaring type
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.NumberHandling">
            <summary>
            Gets or sets the <see cref="T:System.Text.Json.Serialization.JsonNumberHandling"/> applied to the current property.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance has been locked for further modification.
            </exception>
            <remarks>
            For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            the value of this property will be mapped from <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute"/> annotations.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.EffectiveNumberHandling">
            <summary>
            Number handling after considering options and declaring type number handling
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.DefaultValue">
            <summary>
            Default value used for parameterized ctor invocation.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.RequiredPropertyIndex">
            <summary>
            Required property index on the list of JsonTypeInfo properties.
            It is used as a unique identifier for required properties.
            It is set just before property is configured and does not change afterward.
            It is not equivalent to index on the properties list
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo`1">
            <summary>
            Represents a strongly-typed property to prevent boxing and to create a direct delegate to the getter\setter.
            </summary>
            <typeparamref name="T"/> is the <see cref="P:System.Text.Json.Serialization.JsonConverter`1.TypeToConvert"/> for either the property's converter,
            or a type's converter, if the current instance is a <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.PropertyInfoForTypeInfo"/>.
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1">
            <summary>
            Provides serialization metadata about a property or field.
            </summary>
            <typeparam name="T">The type to convert of the <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> for the property.</typeparam>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.IsProperty">
            <summary>
            If <see langword="true"/>, indicates that the member is a property, otherwise indicates the member is a field.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.IsPublic">
            <summary>
            Whether the property or field is public.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.IsVirtual">
            <summary>
            Whether the property or field is a virtual property.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.DeclaringType">
            <summary>
            The declaring type of the property or field.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.PropertyTypeInfo">
            <summary>
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> info for the property or field's type.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.Converter">
            <summary>
            A <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for the property or field, specified by <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.Getter">
            <summary>
            Provides a mechanism to get the property or field's value.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.Setter">
            <summary>
            Provides a mechanism to set the property or field's value.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.IgnoreCondition">
            <summary>
            Specifies a condition for the member to be ignored.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.HasJsonInclude">
            <summary>
            Whether the property was annotated with <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.IsExtensionData">
            <summary>
            Whether the property was annotated with <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.NumberHandling">
            <summary>
            If the property or field is a number, specifies how it should processed when serializing and deserializing.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.PropertyName">
            <summary>
            The name of the property or field.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues`1.JsonPropertyName">
            <summary>
            The name to be used when processing the property or field, specified by <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.SourceGenJsonTypeInfo`1">
            <summary>
            Creates and initializes serialization metadata for a type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.SourceGenJsonTypeInfo`1.#ctor(System.Text.Json.Serialization.JsonConverter,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates serialization metadata for a type using a simple converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.SourceGenJsonTypeInfo`1.#ctor(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonObjectInfoValues{`0})">
            <summary>
            Creates serialization metadata for an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.SourceGenJsonTypeInfo`1.#ctor(System.Text.Json.JsonSerializerOptions,System.Text.Json.Serialization.Metadata.JsonCollectionInfoValues{`0},System.Func{System.Text.Json.Serialization.JsonConverter{`0}},System.Object,System.Object)">
            <summary>
            Creates serialization metadata for a collection.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1">
            <summary>
            Provides JSON serialization-related metadata about a type.
            </summary>
            <typeparam name="T">The generic definition of the type.</typeparam>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.EffectiveConverter">
            <summary>
            A Converter whose declared type always matches that of the current JsonTypeInfo.
            It might be the same instance as JsonTypeInfo.Converter or it could be wrapped
            in a CastingConverter in cases where a polymorphic converter is being used.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.CreateObject">
             <summary>
             Gets or sets a parameterless factory to be used on deserialization.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             A parameterless factory is not supported for the current metadata <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>.
             </exception>
             <remarks>
             If set to <see langword="null" />, any attempt to deserialize instances of the given type will fail at runtime.
            
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             types with a single default constructor or default constructors annotated with <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute"/>
             will be mapped to this delegate.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.SerializeHandler">
            <summary>
            Serializes an instance of <typeparamref name="T"/> using
            <see cref="T:System.Text.Json.Serialization.JsonSourceGenerationOptionsAttribute"/> values specified at design time.
            </summary>
            <remarks>The writer is not flushed after writing.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo">
            <summary>
            Provides JSON serialization-related metadata about a type.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.Metadata.JsonTypeInfo.ObjectType">
            <summary>
            Cached typeof(object). It is faster to cache this than to call typeof(object) multiple times.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateJsonPropertyInfo(System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a JsonPropertyInfo whose property type matches the type of this JsonTypeInfo instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.GetKey(System.ReadOnlySpan{System.Byte})">
            <summary>
            Get a key from the property name.
            The key consists of the first 7 bytes of the property name and then the length.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.NumberOfRequiredProperties">
            <summary>
            Indices of required properties.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateObject">
             <summary>
             Gets or sets a parameterless factory to be used on deserialization.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             A parameterless factory is not supported for the current metadata <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>.
             </exception>
             <remarks>
             If set to <see langword="null" />, any attempt to deserialize instances of the given type will result in an exception.
            
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             types with a single default constructor or default constructors annotated with <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute"/>
             will be mapped to this delegate.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.OnSerializing">
             <summary>
             Gets or sets a callback to be invoked before serialization occurs.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             Serialization callbacks are only supported for <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/> metadata.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this callback will be mapped from any <see cref="T:System.Text.Json.Serialization.IJsonOnSerializing"/> implementation on the type.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.OnSerialized">
             <summary>
             Gets or sets a callback to be invoked after serialization occurs.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             Serialization callbacks are only supported for <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/> metadata.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this callback will be mapped from any <see cref="T:System.Text.Json.Serialization.IJsonOnSerialized"/> implementation on the type.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.OnDeserializing">
             <summary>
             Gets or sets a callback to be invoked before deserialization occurs.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             Serialization callbacks are only supported for <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/> metadata.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this callback will be mapped from any <see cref="T:System.Text.Json.Serialization.IJsonOnDeserializing"/> implementation on the type.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.OnDeserialized">
             <summary>
             Gets or sets a callback to be invoked after deserialization occurs.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             Serialization callbacks are only supported for <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/> metadata.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the value of this callback will be mapped from any <see cref="T:System.Text.Json.Serialization.IJsonOnDeserialized"/> implementation on the type.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Properties">
             <summary>
             Gets the list of <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> metadata corresponding to the current type.
             </summary>
             <remarks>
             Property is only applicable to metadata of kind <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/>.
             For other kinds an empty, read-only list will be returned.
            
             The order of <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> entries in the list determines the serialization order,
             unless either of the entries specifies a non-zero <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Order"/> value,
             in which case the properties will be stable sorted by <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Order"/>.
            
             It is required that added <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> entries are unique up to <see cref="P:System.Text.Json.Serialization.Metadata.JsonPropertyInfo.Name"/>,
             however this will only be validated on serialization, once the metadata instance gets locked for further modification.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.PolymorphismOptions">
             <summary>
             Gets or sets a configuration object specifying polymorphism metadata.
             </summary>
             <exception cref="T:System.ArgumentException">
             <paramref name="value" /> has been associated with a different <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            
             -or-
            
             Polymorphic serialization is not supported for the current metadata <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>.
             </exception>
             <remarks>
             For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
             the configuration of this setting will be mapped from any <see cref="T:System.Text.Json.Serialization.JsonDerivedTypeAttribute"/> or <see cref="T:System.Text.Json.Serialization.JsonPolymorphicAttribute"/> annotations.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.IsReadOnly">
            <summary>
            Specifies whether the current instance has been locked for modification.
            </summary>
            <remarks>
            A <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance can be locked either if
            it has been passed to one of the <see cref="T:System.Text.Json.JsonSerializer"/> methods,
            has been associated with a <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> instance,
            or a user explicitly called the <see cref="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.MakeReadOnly"/> method on the instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.MakeReadOnly">
            <summary>
            Locks the current instance for further modification.
            </summary>
            <remarks>This method is idempotent.</remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.ElementTypeInfo">
            <summary>
            Return the JsonTypeInfo for the element type, or null if the type is not an enumerable or dictionary.
            </summary>
            <remarks>
            This should not be called during warm-up (initial creation of JsonTypeInfos) to avoid recursive behavior
            which could result in a StackOverflowException.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.KeyTypeInfo">
            <summary>
            Return the JsonTypeInfo for the key type, or null if the type is not a dictionary.
            </summary>
            <remarks>
            This should not be called during warm-up (initial creation of JsonTypeInfos) to avoid recursive behavior
            which could result in a StackOverflowException.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Options">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> value associated with the current <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo" /> instance.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Type">
            <summary>
            Gets the <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Type"/> for which the JSON serialization contract is being defined.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Converter">
            <summary>
            Gets the <see cref="T:System.Text.Json.Serialization.JsonConverter"/> associated with the current type.
            </summary>
            <remarks>
            The <see cref="T:System.Text.Json.Serialization.JsonConverter"/> associated with the type determines the value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>,
            and by extension the types of metadata that are configurable in the current JSON contract.
            As such, the value of the converter cannot be changed once a <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been created.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind">
             <summary>
             Determines the kind of contract metadata that the current instance is specifying.
             </summary>
             <remarks>
             The value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/> determines what aspects of the JSON contract are configurable.
             For example, it is only possible to configure the <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Properties"/> list for metadata
             of kind <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object"/>.
            
             The value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/> is determined exclusively by the <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             resolved for the current type, and cannot be changed once resolution has happened.
             User-defined custom converters (specified either via <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> or <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/>)
             are metadata-agnostic and thus always resolve to <see cref="F:System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.None"/>.
             </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.PropertyInfoForTypeInfo">
            <summary>
            The JsonPropertyInfo for this JsonTypeInfo. It is used to obtain the converter for the TypeInfo.
            </summary>
            <remarks>
            The returned JsonPropertyInfo does not represent a real property; instead it represents either:
            a collection element type,
            a generic type parameter,
            a property type (if pushed to a new stack frame),
            or the root type passed into the root serialization APIs.
            For example, for a property returning <see cref="T:System.Collections.Generic.List`1"/> where T is a string,
            a JsonTypeInfo will be created with .Type=typeof(string) and .PropertyInfoForTypeInfo=JsonPropertyInfo{string}.
            Without this property, a "Converter" property would need to be added to JsonTypeInfo and there would be several more
            `if` statements to obtain the converter from either the actual JsonPropertyInfo (for a real property) or from the
            TypeInfo (for the cases mentioned above). In addition, methods that have a JsonPropertyInfo argument would also likely
            need to add an argument for JsonTypeInfo.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.DefaultValueHolder">
            <summary>
            Returns a helper class used for computing the default value.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.NumberHandling">
            <summary>
            Gets or sets the type-level <see cref="P:System.Text.Json.JsonSerializerOptions.NumberHandling"/> override.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.
            </exception>
            <remarks>
            For contracts originating from <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver"/> or <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/>,
            the value of this callback will be mapped from any <see cref="T:System.Text.Json.Serialization.JsonNumberHandling"/> annotations.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateJsonTypeInfo``1(System.Text.Json.JsonSerializerOptions)">
             <summary>
             Creates a blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> instance.
             </summary>
             <typeparam name="T">The type for which contract metadata is specified.</typeparam>
             <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance the metadata is associated with.</param>
             <returns>A blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> instance.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="options"/> is null.</exception>
             <remarks>
             The returned <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> will be blank, with the exception of the
             <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Converter"/> property which will be resolved either from
             <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/> or the built-in converters for the type.
             Any converters specified via <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> on the type declaration
             will not be resolved by this method.
            
             What converter does get resolved influences the value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>,
             which constrains the type of metadata that can be modified in the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateJsonTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Creates a blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance.
             </summary>
             <param name="type">The type for which contract metadata is specified.</param>
             <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance the metadata is associated with.</param>
             <returns>A blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="type"/> or <paramref name="options"/> is null.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="type"/> cannot be used for serialization.</exception>
             <remarks>
             The returned <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> will be blank, with the exception of the
             <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Converter"/> property which will be resolved either from
             <see cref="P:System.Text.Json.JsonSerializerOptions.Converters"/> or the built-in converters for the type.
             Any converters specified via <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute"/> on the type declaration
             will not be resolved by this method.
            
             What converter does get resolved influences the value of <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.Kind"/>,
             which constrains the type of metadata that can be modified in the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateJsonPropertyInfo(System.Type,System.String)">
            <summary>
            Creates a blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance for the current <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/>.
            </summary>
            <param name="propertyType">The declared type for the property.</param>
            <param name="name">The property name used in JSON serialization and deserialization.</param>
            <returns>A blank <see cref="T:System.Text.Json.Serialization.Metadata.JsonPropertyInfo"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyType"/> or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyType"/> cannot be used for serialization.</exception>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> instance has been locked for further modification.</exception>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.PolymorphicTypeResolver">
            <summary>
            Validates and indexes polymorphic type configuration,
            providing derived JsonTypeInfo resolution methods
            in both serialization and deserialization scenaria.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.PolymorphicTypeResolver.DerivedJsonTypeInfo">
            <summary>
            Lazy JsonTypeInfo result holder for a derived type.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.ReflectionJsonTypeInfo`1">
            <summary>
            Provides JSON serialization-related metadata about a type.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ConfigurationList`1">
            <summary>
            A list of configuration items that can be locked for modification
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.IAsyncEnumerableConverterFactory">
            <summary>
            Converter for streaming <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> values.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonCollectionConverter`2">
            <summary>
            Base class for all collections. Collections are assumed to implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            or a variant thereof e.g. <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonCollectionConverter`2.CreateCollection(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            When overridden, create the collection. It may be a temporary collection or the final collection.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonDictionaryConverter`1">
            <summary>
            Base class for dictionary converters such as IDictionary, Hashtable, Dictionary{,} IDictionary{,} and SortedList.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonDictionaryConverter`3">
            <summary>
            Base class for dictionary converters such as IDictionary, Hashtable, Dictionary{,} IDictionary{,} and SortedList.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDictionaryConverter`3.Add(`1,`2@,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            When overridden, adds the value to the collection.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDictionaryConverter`3.ConvertCollection(System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            When overridden, converts the temporary collection held in state.Current.ReturnValue to the final collection.
            This is used with immutable collections.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonDictionaryConverter`3.CreateCollection(System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@)">
            <summary>
            When overridden, create the collection. It may be a temporary collection or the final collection.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonObjectConverter`1">
            <summary>
            Base class for non-enumerable, non-primitive objects where public properties
            are (de)serialized as a JSON object.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter">
            <summary>
            Converts an object or value to or from JSON.
            </summary>
            <summary>
            Converts an object or value to or from JSON.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the type can be converted.
            </summary>
            <param name="typeToConvert">The type is checked as to whether it can be converted.</param>
            <returns>True if the type can be converted, false otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.SupportsCreateObjectDelegate">
            <summary>
            Indicates that the converter can consume the <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.CreateObject"/> delegate.
            Needed because certain collection converters cannot support arbitrary delegates.
            TODO remove once https://github.com/dotnet/runtime/pull/73395/ and
            https://github.com/dotnet/runtime/issues/71944 have been addressed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.CanUseDirectReadOrWrite">
            <summary>
            Can direct Read or Write methods be called (for performance).
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.CanHaveMetadata">
            <summary>
            The converter supports writing and reading metadata.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.CanBePolymorphic">
            <summary>
            The converter supports polymorphic writes; only reserved for System.Object types.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.RequiresReadAhead">
            <summary>
            The serializer must read ahead all contents of the next JSON value
            before calling into the converter for deserialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ReadElementAndSetProperty(System.Object,System.String,System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            Used to support JsonObject as an extension property in a loosely-typed, trimmable manner.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.IsValueType">
            <summary>
            Cached value of TypeToConvert.IsValueType, which is an expensive call.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter.IsInternalConverter">
            <summary>
            Whether the converter is built-in.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonConverter.IsInternalConverterForNumberType">
            <summary>
            Whether the converter is built-in and handles a number type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ReadCoreAsObject(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            Loosely-typed ReadCore() that forwards to strongly-typed ReadCore().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.WriteCoreAsObject(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions,System.Text.Json.WriteStack@)">
            <summary>
            Loosely-typed WriteCore() that forwards to strongly-typed WriteCore().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.WriteAsPropertyNameCoreAsObject(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions,System.Boolean)">
            <summary>
            Loosely-typed WriteToPropertyName() that forwards to strongly-typed WriteToPropertyName().
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ConfigureJsonTypeInfo(System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Used for hooking custom configuration to a newly created associated JsonTypeInfo instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ConfigureJsonTypeInfoUsingReflection(System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Additional reflection-specific configuration required by certain collection converters.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ResolvePolymorphicConverter(System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions,System.Text.Json.ReadStack@)">
            <summary>
            Initializes the state for polymorphic cases and returns the appropriate derived converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.ResolvePolymorphicConverter(System.Object,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions,System.Text.Json.WriteStack@)">
            <summary>
            Initializes the state for polymorphic cases and returns the appropriate derived converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter.SingleValueReadWithReadAhead(System.Boolean,System.Text.Json.Utf8JsonReader@,System.Text.Json.ReadStack@)">
            <summary>
            Perform a Read() and if read-ahead is required, also read-ahead (to the end of the current JSON level).
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
            <summary>
            Supports converting several types by using a factory pattern.
            </summary>
            <remarks>
            This is useful for converters supporting generics, such as a converter for <see cref="T:System.Collections.Generic.List`1"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
            <summary>
            When overridden, constructs a new <see cref="T:System.Text.Json.Serialization.JsonConverterFactory"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create a converter for the provided <see cref="T:System.Type"/>.
            </summary>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <returns>
            An instance of a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> where T is compatible with <paramref name="typeToConvert"/>.
            If <see langword="null"/> is returned, a <see cref="T:System.NotSupportedException"/> will be thrown.
            </returns>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonConverter`1">
            <summary>
            Converts an object or value to or from JSON.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to convert.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
            <summary>
            When overridden, constructs a new <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether the type can be converted.
            </summary>
            <remarks>
            The default implementation is to return True when <paramref name="typeToConvert"/> equals typeof(T).
            </remarks>
            <param name="typeToConvert"></param>
            <returns>True if the type can be converted, False otherwise.</returns>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.SourceConverterForCastingConverter">
            <summary>
            Set if this converter is itself a casting converter.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
            <summary>
            Indicates whether <see langword="null"/> should be passed to the converter on serialization,
            and whether <see cref="F:System.Text.Json.JsonTokenType.Null"/> should be passed on deserialization.
            </summary>
            <remarks>
            The default value is <see langword="true"/> for converters based on value types, and <see langword="false"/> for converters based on reference types.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNullOnRead">
            <summary>
            Does the converter want to be called when reading null tokens.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNullOnWrite">
            <summary>
            Does the converter want to be called for null values.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read and convert the JSON to T.
            </summary>
            <remarks>
            A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON is invalid.
            </remarks>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from.</param>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <returns>The value that was converted.</returns>
            <remarks>Note that the value of <seealso cref="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull"/> determines if the converter handles null JSON tokens.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.IsNull(`0)">
            <summary>
            Performance optimization.
            The 'in' modifier in 'TryWrite(in T Value)' causes boxing for Nullable{T}, so this helper avoids that.
            TODO: Remove this work-around once https://github.com/dotnet/runtime/issues/50915 is addressed.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write the value as JSON.
            </summary>
            <remarks>
            A converter may throw any Exception, but should throw <cref>JsonException</cref> when the JSON
            cannot be created.
            </remarks>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> to write to.</param>
            <param name="value">The value to convert. Note that the value of <seealso cref="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull"/> determines if the converter handles <see langword="null" /> values.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.ReadAsPropertyName(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads a dictionary key from a JSON property name.
            </summary>
            <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader"/> to read from.</param>
            <param name="typeToConvert">The <see cref="T:System.Type"/> being converted.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <returns>The value that was converted.</returns>
            <remarks>Method should be overridden in custom converters of types used in deserialized dictionary keys.</remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonConverter`1.WriteAsPropertyName(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a dictionary key as a JSON property name.
            </summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/> to write to.</param>
            <param name="value">The value to convert. Note that the value of <seealso cref="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull"/> determines if the converter handles <see langword="null" /> values.</param>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> being used.</param>
            <remarks>Method should be overridden in custom converters of types used in serialized dictionary keys.</remarks>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonResumableConverter`1">
            <summary>
            Base class for converters that are able to resume after reading or writing to a buffer.
            This is used when the Stream-based serialization APIs are used.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
            <summary>
            Converter to convert enums to and from strings.
            </summary>
            <remarks>
            Reading is case insensitive, writing can be customized via a <see cref="T:System.Text.Json.JsonNamingPolicy" />.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
            <summary>
            Constructor. Creates the <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter"/> with the
            default naming policy and allows integer values.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="namingPolicy">
            Optional naming policy for writing enum values.
            </param>
            <param name="allowIntegerValues">
            True to allow undefined enum values. When true, if an enum value isn't
            defined it will output as a number rather than a string.
            </param>
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.Json.Serialization.JsonUnknownTypeHandling">
            <summary>
            Defines how deserializing a type declared as an <see cref="T:System.Object"/> is handled during deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonElement">
            <summary>
            A type declared as <see cref="T:System.Object"/> is deserialized as a <see cref="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonElement"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonNode">
            <summary>
            A type declared as <see cref="T:System.Object"/> is deserialized as a <see cref="F:System.Text.Json.Serialization.JsonUnknownTypeHandling.JsonNode"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.PreserveReferenceResolver">
            <summary>
            The default ReferenceResolver implementation to handle duplicate object references.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReadBufferState.ReadFromStreamAsync(System.IO.Stream,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Read from the stream until either our buffer is filled or we hit EOF.
            Calling ReadCore is relatively expensive, so we minimize the number of times
            we need to call it.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReadBufferState.ReadFromStream(System.IO.Stream)">
            <summary>
            Read from the stream until either our buffer is filled or we hit EOF.
            Calling ReadCore is relatively expensive, so we minimize the number of times
            we need to call it.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReadBufferState.AdvanceBuffer(System.Int32)">
            <summary>
            Advances the buffer in anticipation of a subsequent read operation.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            </summary>
        </member>
        <member name="F:System.Text.Json.Serialization.ReferenceHandler.HandlingStrategy">
            <summary>
            Indicates whether this ReferenceHandler implementation should use <see cref="F:System.Text.Json.Serialization.ReferenceHandlingStrategy.Preserve"/> semantics or <see cref="F:System.Text.Json.Serialization.ReferenceHandlingStrategy.IgnoreCycles"/> semantics.
            The defualt is Preserve.
            </summary>
        </member>
        <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
            <summary>
            Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.
            </summary>
            <remarks>
            * On Serialize:
            When writing complex reference types, the serializer also writes metadata properties (`$id`, `$values`, and `$ref`) within them.
            The output JSON will contain an extra `$id` property for every object, and for every enumerable type the JSON array emitted will be nested within a JSON object containing an `$id` and `$values` property.
            <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> is used to determine whether objects are identical.
            When an object is identical to a previously serialized one, a pointer (`$ref`) to the identifier (`$id`) of such object is written instead.
            No metadata properties are written for value types.
            * On Deserialize:
            The metadata properties within the JSON that are used to preserve duplicated references and cycles will be honored as long as they are well-formed**.
            For JSON objects that don't contain any metadata properties, the deserialization behavior is identical to <see langword="null"/>.
            For value types:
              * The `$id` metadata property is ignored.
              * A <see cref="T:System.Text.Json.JsonException"/> is thrown if a `$ref` metadata property is found within the JSON object.
              * For enumerable value types, the `$values` metadata property is ignored.
            ** For the metadata properties within the JSON to be considered well-formed, they must follow these rules:
              1) The `$id` metadata property must be the first property in the JSON object.
              2) A JSON object that contains a `$ref` metadata property must not contain any other properties.
              3) The value of the `$ref` metadata property must refer to an `$id` that has appeared earlier in the JSON.
              4) The value of the `$id` and `$ref` metadata properties must be a JSON string.
              5) For enumerable types, such as <see cref="T:System.Collections.Generic.List`1"/>, the JSON array must be nested within a JSON object containing an `$id` and `$values` metadata property, in that order.
              6) For enumerable types, the `$values` metadata property must be a JSON array.
              7) The `$values` metadata property is only valid when referring to enumerable types.
            If the JSON is not well-formed, a <see cref="T:System.Text.Json.JsonException"/> is thrown.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles">
            <summary>
            Ignores an object when a reference cycle is detected during serialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
            <summary>
            Returns the <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> used for each serialization call.
            </summary>
            <returns>The resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver(System.Boolean)">
            <summary>
            Optimization for the resolver used when <see cref="P:System.Text.Json.Serialization.ReferenceHandler.Preserve"/> is set in <see cref="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler"/>;
            we pass a flag signaling whether this is called from serialization or deserialization to save one dictionary instantiation.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> to create on each serialization or deserialization call.</typeparam>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
            <summary>
            Creates a new <see cref="T:System.Text.Json.Serialization.ReferenceResolver"/> of type <typeparamref name="T"/> used for each serialization call.
            </summary>
            <returns>The new resolver to use for serialization and deserialization.</returns>
        </member>
        <member name="T:System.Text.Json.Serialization.ReferenceResolver">
            <summary>
            This class defines how the <see cref="T:System.Text.Json.JsonSerializer"/> deals with references on serialization and deserialization.
            Defines the core behavior of preserving references on serialization and deserialization.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
            <summary>
            Adds an entry to the bag of references using the specified id and value.
            This method gets called when an $id metadata property from a JSON object is read.
            </summary>
            <param name="referenceId">The identifier of the respective JSON object or array.</param>
            <param name="value">The value of the respective CLR reference type object that results from parsing the JSON object.</param>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
            <summary>
            Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.
            This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.
            </summary>
            <param name="value">The value of the CLR reference type object to get an id for.</param>
            <param name="alreadyExists">When this method returns, <see langword="true"/> if a reference to value already exists; otherwise, <see langword="false"/>.</param>
            <returns>The reference id for the specified object.</returns>
        </member>
        <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
            <summary>
            Returns the CLR reference type object related to the specified reference id.
            This method gets called when $ref metadata property is read.
            </summary>
            <param name="referenceId">The reference id related to the returned object.</param>
            <returns>The reference type object related to specified reference id.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0@,``1@)">
            <summary>
            Emulates Dictionary.TryAdd on netstandard.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.StableSortByKey``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            Provides an in-place, stable sorting implementation for List.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.GetSpan(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Returns the span for the given reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsValidUnicodeScalar(System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is a valid Unicode scalar
            value, i.e., is in [ U+0000..U+D7FF ], inclusive; or [ U+E000..U+10FFFF ], inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsInRangeInclusive(System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType,System.Text.Json.JsonTokenType)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is between
            <paramref name="lowerBound"/> and <paramref name="upperBound"/>, inclusive.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.IsDigit(System.Byte)">
            <summary>
            Returns <see langword="true"/> if <paramref name="value"/> is in the range [0..9].
            Otherwise, returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.ReadWithVerify(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Perform a Read() with a Debug.Assert verifying the reader did not return false.
            This should be called when the Read() return value is not used, such as non-Stream cases where there is only one buffer.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.Utf8GetString(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calls Encoding.UTF8.GetString that supports netstandard.
            </summary>
            <param name="bytes">The utf8 bytes to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.CreateDictionaryFromCollection``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Emulates Dictionary(IEnumerable{KeyValuePair}) on netstandard.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseAsISO(System.ReadOnlySpan{System.Byte},System.DateTime@)">
            <summary>
            Parse the given UTF-8 <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">UTF-8 source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTime"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseAsISO(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@)">
            <summary>
            Parse the given UTF-8 <paramref name="source"/> as extended ISO 8601 format.
            </summary>
            <param name="source">UTF-8 source to parse.</param>
            <param name="value">The parsed <see cref="T:System.DateTimeOffset"/> if successful.</param>
            <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryParseDateTimeOffset(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonHelpers.DateTimeParseData@)">
             <summary>
             ISO 8601 date time parser (ISO 8601-1:2019).
             </summary>
             <param name="source">The date/time to parse in UTF-8 format.</param>
             <param name="parseData">The parsed <see cref="T:System.Text.Json.JsonHelpers.DateTimeParseData"/> for the given <paramref name="source"/>.</param>
             <remarks>
             Supports extended calendar date (5.2.2.1) and complete (5.4.2.1) calendar date/time of day
             representations with optional specification of seconds and fractional seconds.
            
             Times can be explicitly specified as UTC ("Z" - 5.3.3) or offsets from UTC ("+/-hh:mm" 5.3.4.2).
             If unspecified they are considered to be local per spec.
            
             Examples: (TZD is either "Z" or hh:mm offset from UTC)
            
              YYYY-MM-DD               (eg 1997-07-16)
              YYYY-MM-DDThh:mm         (eg 1997-07-16T19:20)
              YYYY-MM-DDThh:mm:ss      (eg 1997-07-16T19:20:30)
              YYYY-MM-DDThh:mm:ss.s    (eg 1997-07-16T19:20:30.45)
              YYYY-MM-DDThh:mmTZD      (eg 1997-07-16T19:20+01:00)
              YYYY-MM-DDThh:mm:ssTZD   (eg 1997-07-16T19:20:3001:00)
              YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45Z)
            
             Generally speaking we always require the "extended" option when one exists (3.1.3.5).
             The extended variants have separator characters between components ('-', ':', '.', etc.).
             Spaces are not permitted.
             </remarks>
             <returns>"true" if successfully parsed.</returns>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.DateTime,System.Text.Json.JsonHelpers.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffset(System.Text.Json.JsonHelpers.DateTimeParseData@,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTimeOffsetInterpretingDataAsLocalTime(System.Text.Json.JsonHelpers.DateTimeParseData,System.DateTimeOffset@)">
            <summary>
            Overflow-safe DateTimeOffset/Local time conversion factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonHelpers.TryCreateDateTime(System.Text.Json.JsonHelpers.DateTimeParseData,System.DateTimeKind,System.DateTime@)">
            <summary>
            Overflow-safe DateTime factory.
            </summary>
        </member>
        <member name="M:System.Text.Json.Reflection.ReflectionExtensions.IsNullableOfT(System.Type)">
            <summary>
            Returns <see langword="true" /> when the given type is of type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Reflection.ReflectionExtensions.IsAssignableFromInternal(System.Type,System.Type)">
            <summary>
            Returns <see langword="true" /> when the given type is assignable from <paramref name="from"/> including support
            when <paramref name="from"/> is <see cref="T:System.Nullable`1"/> by using the {T} generic parameter for <paramref name="from"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Reflection.ReflectionExtensions.IsInSubtypeRelationshipWith(System.Type,System.Type)">
            <summary>
            Returns <see langword="true" /> when either type is assignable to the other.
            </summary>
        </member>
        <member name="M:System.Text.Json.Reflection.ReflectionExtensions.CreateInstanceNoWrapExceptions(System.Type,System.Type[],System.Object[])">
            <summary>
            Polyfill for BindingFlags.DoNotWrapExceptions
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonDocument">
            <summary>
              Represents the structure of a JSON value in a lightweight, read-only form.
            </summary>
            <remarks>
              This class utilizes resources from pooled memory to minimize the garbage collector (GC)
              impact in high-usage scenarios. Failure to properly Dispose this object will result in
              the memory not being returned to the pool, which will cause an increase in GC impact across
              various parts of the framework.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocument.RootElement">
            <summary>
              The <see cref="T:System.Text.Json.JsonElement"/> representing the value of the document.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
             Write the document into the provided writer as a JSON value.
            </summary>
            <param name="writer"></param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This <see cref="P:System.Text.Json.JsonDocument.RootElement"/>'s <see cref="P:System.Text.Json.JsonElement.ValueKind"/> would result in an invalid JSON.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.Location">
            <summary>
            Index into the payload
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.SizeOrLength">
            <summary>
            length of text in JSON payload (or number of elements if its a JSON array)
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocument.DbRow.HasComplexChildren">
            <summary>
            String/PropertyName: Unescaping is required.
            Array: At least one element is an object/array.
            Otherwise; false
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.MetadataDb.CompleteAllocations">
            <summary>
            If using array pools, trim excess if necessary.
            If not using array pools, release the temporary array pool and alloc.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
             <summary>
               Parse memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.ReadOnlyMemory`1"/> value will be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="options">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="options"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
             <summary>
               Parse a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.
             </summary>
             <remarks>
               <para>
                 The <see cref="T:System.Buffers.ReadOnlySequence`1"/> may be used for the entire lifetime of the
                 JsonDocument object, and the caller must ensure that the data therein does not change during
                 the object lifetime.
               </para>
            
               <para>
                 Because the input is considered to be text, a UTF-8 Byte-Order-Mark (BOM) must not be present.
               </para>
             </remarks>
             <param name="utf8Json">JSON text to parse.</param>
             <param name="options">Options to control the reader behavior during parsing.</param>
             <returns>
               A JsonDocument representation of the JSON value.
             </returns>
             <exception cref="T:System.Text.Json.JsonException">
               <paramref name="utf8Json"/> does not represent a valid single JSON value.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="options"/> contains unsupported options.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              JsonDocument.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
              A Task to produce a JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parses text representing a single JSON value into a JsonDocument.
            </summary>
            <remarks>
              The <see cref="T:System.ReadOnlyMemory`1"/> value may be used for the entire lifetime of the
              JsonDocument object, and the caller must ensure that the data therein does not change during
              the object lifetime.
            </remarks>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parses text representing a single JSON value into a JsonDocument.
            </summary>
            <param name="json">JSON text to parse.</param>
            <param name="options">Options to control the reader behavior during parsing.</param>
            <returns>
              A JsonDocument representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="options"/> contains unsupported options.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
             <summary>
               Attempts to parse one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <param name="document">Receives the parsed document.</param>
             <returns>
               <see langword="true"/> if a value was read and parsed into a JsonDocument,
               <see langword="false"/> if the reader ran out of data while parsing.
               All other situations result in an exception being thrown.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown, or <see langword="false"/>
                 is returned, the reader is reset to the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
             <summary>
               Parses one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <returns>
               A JsonDocument representing the value (and nested values) read from the reader.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="T:System.Text.Json.JsonDocumentOptions">
            <summary>
            Provides the ability for the user to define custom behavior when parsing JSON to create a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
            <summary>
            Defines how the <see cref="T:System.Text.Json.Utf8JsonReader"/> should handle comments when reading through the JSON.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being read.
            </summary>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonElement">
            <summary>
              Represents a specific JSON value within a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
            <summary>
              An enumerable and enumerator for the contents of a JSON array.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator"/> value that can be used to iterate
              through the array.
            </returns>
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ValueKind">
            <summary>
              The <see cref="T:System.Text.Json.JsonValueKind"/> that the value is.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
            <summary>
              Get the value at a specified index when the current value is a
              <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
              <paramref name="index"/> is not in the range [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength"/>()).
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetArrayLength">
            <summary>
              Get the number of values contained within the current array value.
            </summary>
            <returns>The number of values contained within the current array value.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               Property name matching is performed as an ordinal, case-sensitive, comparison.
            
               If a property is defined multiple times for the same object, the last such definition is
               what is matched.
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="propertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property whose value to return.</param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
             <summary>
               Gets a <see cref="T:System.Text.Json.JsonElement"/> representing the value of a required property identified
               by <paramref name="utf8PropertyName"/>.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <returns>
               A <see cref="T:System.Text.Json.JsonElement"/> representing the value of the requested property.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.Collections.Generic.KeyNotFoundException">
               No property was found with the requested name.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="propertyName"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="propertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="propertyName">Name of the property to find.</param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
             <summary>
               Looks for a property named <paramref name="utf8PropertyName"/> in the current object, returning
               whether or not such a property existed. When the property exists <paramref name="value"/>
               is assigned to the value of that property.
             </summary>
             <remarks>
               <para>
                 Property name matching is performed as an ordinal, case-sensitive, comparison.
               </para>
            
               <para>
                 If a property is defined multiple times for the same object, the last such definition is
                 what is matched.
               </para>
             </remarks>
             <param name="utf8PropertyName">
               The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.
             </param>
             <param name="value">Receives the value of the located property.</param>
             <returns>
               <see langword="true"/> if the property was found, <see langword="false"/> otherwise.
             </returns>
             <seealso cref="M:System.Text.Json.JsonElement.EnumerateObject"/>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBoolean">
            <summary>
              Gets the value of the element as a <see cref="T:System.Boolean"/>.
            </summary>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Boolean"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is neither <see cref="F:System.Text.Json.JsonValueKind.True"/> or
              <see cref="F:System.Text.Json.JsonValueKind.False"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetString">
            <summary>
              Gets the value of the element as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
              This method does not create a string representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is neither <see cref="F:System.Text.Json.JsonValueKind.String"/> nor <see cref="F:System.Text.Json.JsonValueKind.Null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>
              Attempts to represent the current JSON string as bytes assuming it is Base64 encoded.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
             This method does not create a byte[] representation of values other than base 64 encoded JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes.
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
            <summary>
              Gets the value of the element as bytes.
            </summary>
            <remarks>
              This method does not create a byte[] representation of values other than Base64 encoded JSON strings.
            </remarks>
            <returns>The value decode to bytes.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value is not encoded as Base64 text and hence cannot be decoded to bytes.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.SByte"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSByte">
            <summary>
              Gets the current JSON number as an <see cref="T:System.SByte"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.SByte"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.SByte"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Byte"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetByte">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Byte"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Byte"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Byte"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.Int16"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt16">
            <summary>
              Gets the current JSON number as an <see cref="T:System.Int16"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.Int16"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.Int16"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt16"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt16">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt16"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt16"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt16"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
            <summary>
              Attempts to represent the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as an <see cref="T:System.Int32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt32">
            <summary>
              Gets the current JSON number as an <see cref="T:System.Int32"/>.
            </summary>
            <returns>The current JSON number as an <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as an <see cref="T:System.Int32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt32"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt32">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt32"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt32"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt32"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Int64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Int64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Int64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Int64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.UInt64"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetUInt64">
            <summary>
              Gets the current JSON number as a <see cref="T:System.UInt64"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.UInt64"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.UInt64"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Double"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDouble">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Double"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Double"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Double.PositiveInfinity"/> (or
                 <see cref="F:System.Double.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Double.MaxValue"/> (or smaller than <see cref="F:System.Double.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Double"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
             <summary>
               Attempts to represent the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <param name="value">Receives the value.</param>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method does not return <see langword="false"/> for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>),
                 instead <see langword="true"/> is returned and <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) is emitted.
               </para>
             </remarks>
             <returns>
               <see langword="true"/> if the number can be represented as a <see cref="T:System.Single"/>,
               <see langword="false"/> otherwise.
             </returns>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetSingle">
             <summary>
               Gets the current JSON number as a <see cref="T:System.Single"/>.
             </summary>
             <returns>The current JSON number as a <see cref="T:System.Single"/>.</returns>
             <remarks>
               <para>
                 This method does not parse the contents of a JSON string value.
               </para>
            
               <para>
                 On .NET Core this method returns <see cref="F:System.Single.PositiveInfinity"/> (or
                 <see cref="F:System.Single.NegativeInfinity"/>) for values larger than
                 <see cref="F:System.Single.MaxValue"/> (or smaller than <see cref="F:System.Single.MinValue"/>).
               </para>
             </remarks>
             <exception cref="T:System.InvalidOperationException">
               This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
             </exception>
             <exception cref="T:System.FormatException">
               The value cannot be represented as a <see cref="T:System.Single"/>.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
            <summary>
              Attempts to represent the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <returns>
              <see langword="true"/> if the number can be represented as a <see cref="T:System.Decimal"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDecimal">
            <summary>
              Gets the current JSON number as a <see cref="T:System.Decimal"/>.
            </summary>
            <returns>The current JSON number as a <see cref="T:System.Decimal"/>.</returns>
            <remarks>
              This method does not parse the contents of a JSON string value.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Number"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Decimal"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.GetRawText"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTime"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTime">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
              This method does not create a DateTime representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTime"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTime"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.DateTimeOffset"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
            <summary>
              Gets the value of the element as a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <remarks>
              This method does not create a DateTimeOffset representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.DateTimeOffset"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.DateTimeOffset"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
            <summary>
              Attempts to represent the current JSON string as a <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">Receives the value.</param>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>
              <see langword="true"/> if the string can be represented as a <see cref="T:System.Guid"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetGuid">
            <summary>
              Gets the value of the element as a <see cref="T:System.Guid"/>.
            </summary>
            <remarks>
              This method does not create a Guid representation of values other than JSON strings.
            </remarks>
            <returns>The value of the element as a <see cref="T:System.Guid"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <exception cref="T:System.FormatException">
              The value cannot be represented as a <see cref="T:System.Guid"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
            <seealso cref="M:System.Text.Json.JsonElement.ToString"/>
        </member>
        <member name="M:System.Text.Json.JsonElement.GetRawText">
            <summary>
              Gets the original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </summary>
            <returns>
              The original input data backing this value, returning it as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
            <summary>
              Compares <paramref name="text" /> to the string value of this element.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Compares the text represented by <paramref name="utf8Text" /> to the string value of this element.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element has the same UTF-8 encoding as
              <paramref name="utf8Text" />, <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of the string produced by UTF-8 decoding
              <paramref name="utf8Text" /> with the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the
              string instances.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
            <summary>
              Compares <paramref name="text" /> to the string value of this element.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the string value of this element matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.String"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              the result of calling <see cref="M:System.Text.Json.JsonElement.GetString" />, but avoids creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the element into the provided writer as a JSON value.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is <see cref="F:System.Text.Json.JsonValueKind.Undefined"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateArray">
            <summary>
              Get an enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the values in the JSON array represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.EnumerateObject">
            <summary>
              Get an enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </summary>
            <returns>
              An enumerator to enumerate the properties in the JSON object represented by this JsonElement.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="P:System.Text.Json.JsonElement.ValueKind"/> is not <see cref="F:System.Text.Json.JsonValueKind.Object"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.ToString">
             <summary>
               Gets a string representation for the current value appropriate to the value type.
             </summary>
             <remarks>
               <para>
                 For JsonElement built from <see cref="T:System.Text.Json.JsonDocument"/>:
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.Null"/>, <see cref="F:System.String.Empty"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.True"/>, <see cref="F:System.Boolean.TrueString"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.False"/>, <see cref="F:System.Boolean.FalseString"/> is returned.
               </para>
            
               <para>
                 For <see cref="F:System.Text.Json.JsonValueKind.String"/>, the value of <see cref="M:System.Text.Json.JsonElement.GetString"/>() is returned.
               </para>
            
               <para>
                 For other types, the value of <see cref="M:System.Text.Json.JsonElement.GetRawText"/>() is returned.
               </para>
             </remarks>
             <returns>
               A string representation for the current value appropriate to the value type.
             </returns>
             <exception cref="T:System.ObjectDisposedException">
               The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.Clone">
            <summary>
              Get a JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>
              A JsonElement which can be safely stored beyond the lifetime of the
              original <see cref="T:System.Text.Json.JsonDocument"/>.
            </returns>
            <remarks>
              <para>
                If this JsonElement is itself the output of a previous call to Clone, or
                a value contained within another JsonElement which was the output of a previous
                call to Clone, this method results in no additional memory allocation.
              </para>
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
            <summary>
              An enumerable and enumerator for the properties of a JSON object.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
            <summary>
              Returns an enumerator that iterates the properties of an object.
            </summary>
            <returns>
              An <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator"/> value that can be used to iterate
              through the object.
            </returns>
            <remarks>
              The enumerator will enumerate the properties in the order they are
              declared, and when an object has multiple definitions of a single
              property they will all individually be returned (each in the order
              they appear in the content).
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
            <inheritdoc />
        </member>
        <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:System.Text.Json.JsonElement.ParseValue(System.Text.Json.Utf8JsonReader@)">
             <summary>
               Parses one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <returns>
               A JsonElement representing the value (and nested values) read from the reader.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonElement.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.JsonElement}@)">
             <summary>
               Attempts to parse one JSON value (including objects or arrays) from the provided reader.
             </summary>
             <param name="reader">The reader to read.</param>
             <param name="element">Receives the parsed element.</param>
             <returns>
               <see langword="true"/> if a value was read and parsed into a JsonElement;
               <see langword="false"/> if the reader ran out of data while parsing.
               All other situations result in an exception being thrown.
             </returns>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value.  If an exception is thrown, or <see langword="false"/>
                 is returned, the reader is reset to the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
             </remarks>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.ArgumentException">
               The current <paramref name="reader"/> token does not start or represent a value.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
               A value could not be read from the reader.
             </exception>
        </member>
        <member name="T:System.Text.Json.JsonProperty">
            <summary>
              Represents a single property for a JSON object.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Value">
            <summary>
              The value of this property.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonProperty.Name">
            <summary>
              The name of this property.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
            <summary>
              Compares <paramref name="text" /> to the name of this property.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Compares the text represented by <paramref name="utf8Text" /> to the name of this property.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property has the same UTF-8 encoding as
              <paramref name="utf8Text" />, <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="utf8Text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
            <summary>
              Compares <paramref name="text" /> to the name of this property.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>
              <see langword="true" /> if the name of this property matches <paramref name="text"/>,
              <see langword="false" /> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              This value's <see cref="T:System.Type"/> is not <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
            </exception>
            <remarks>
              This method is functionally equal to doing an ordinal comparison of <paramref name="text" /> and
              <see cref="P:System.Text.Json.JsonProperty.Name" />, but can avoid creating the string instance.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
              Write the property into the provided writer as a named JSON object property.
            </summary>
            <param name="writer">The writer.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              This <see cref="P:System.Text.Json.JsonProperty.Name"/>'s length is too large to be a JSON object property.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              This <see cref="P:System.Text.Json.JsonProperty.Value"/>'s <see cref="P:System.Text.Json.JsonElement.ValueKind"/> would result in an invalid JSON.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The parent <see cref="T:System.Text.Json.JsonDocument"/> has been disposed.
            </exception>>
        </member>
        <member name="M:System.Text.Json.JsonProperty.ToString">
            <summary>
              Provides a <see cref="T:System.String"/> representation of the property for
              debugging purposes.
            </summary>
            <returns>
              A string containing the un-interpreted value of the property, beginning
              at the declaring open-quote and ending at the last character that is part of
              the value.
            </returns>
        </member>
        <member name="T:System.Text.Json.JsonValueKind">
            <summary>
              Specifies the data type of a JSON value.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Undefined">
            <summary>
              Indicates that there is no value (as distinct from <see cref="F:System.Text.Json.JsonValueKind.Null"/>).
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Object">
            <summary>
              Indicates that a value is a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Array">
            <summary>
              Indicates that a value is a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.String">
            <summary>
              Indicates that a value is a JSON string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Number">
            <summary>
              Indicates that a value is a JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.True">
            <summary>
              Indicates that a value is the JSON value <c>true</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.False">
            <summary>
              Indicates that a value is the JSON value <c>false</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonValueKind.Null">
            <summary>
              Indicates that a value is the JSON value <c>null</c>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonCommentHandling">
            <summary>
            This enum defines the various ways the <see cref="T:System.Text.Json.Utf8JsonReader"/> can deal with comments.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
            <summary>
            By default, do no allow comments within the JSON input.
            Comments are treated as invalid JSON if found and a
            <see cref="T:System.Text.Json.JsonException"/> is thrown.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Skip">
            <summary>
            Allow comments within the JSON input and ignore them.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> will behave as if no comments were present.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonCommentHandling.Allow">
            <summary>
            Allow comments within the JSON input and treat them as valid tokens.
            While reading, the caller will be able to access the comment values.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonEncodedText">
            <summary>
            Provides a way to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.
            </summary>
            <remarks>
            This can be used to cache and store known strings used for writing JSON ahead of time by pre-encoding them up front.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
            <summary>
            Returns the UTF-8 encoded representation of the pre-encoded JSON text.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the string text value as a JSON string.
            </summary>
            <param name="value">The value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-16 characters.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the text value as a JSON string.
            </summary>
            <param name="value">The value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-16 characters.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
            <summary>
            Encodes the UTF-8 text value as a JSON string.
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be transformed as JSON encoded text.</param>
            <param name="encoder">The encoder to use when escaping the string, or <see langword="null" /> to use the default encoder.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large or if it contains invalid UTF-8 bytes.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
            <summary>
            Determines whether this instance and another specified <see cref="T:System.Text.Json.JsonEncodedText"/> instance have the same value.
            </summary>
            <remarks>
            Default instances of <see cref="T:System.Text.Json.JsonEncodedText"/> are treated as equal.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:System.Text.Json.JsonEncodedText"/> instance, have the same value.
            </summary>
            <remarks>
            If <paramref name="obj"/> is null, the method returns false.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.ToString">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            Returns an empty string on a default instance of <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </remarks>
            <returns>
            Returns the underlying UTF-16 encoded string.
            </returns>
        </member>
        <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </summary>
            <remarks>
            Returns 0 on a default instance of <see cref="T:System.Text.Json.JsonEncodedText"/>.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonException">
            <summary>
            Defines a custom exception object that is thrown when invalid JSON text is encountered, when the defined maximum depth is passed,
            or the JSON text is not compatible with the type of a property on an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="lineNumber">The line number at which the invalid JSON was encountered (starting at 0) when deserializing.</param>
            <param name="bytePositionInLine">The byte count within the current line where the invalid JSON was encountered (starting at 0).</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="innerException">The exception that caused the current exception.</param>
            <remarks>
            Note that the <paramref name="bytePositionInLine"/> counts the number of bytes (i.e. UTF-8 code units) and not characters or scalars.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="path">The path where the invalid JSON was encountered.</param>
            <param name="lineNumber">The line number at which the invalid JSON was encountered (starting at 0) when deserializing.</param>
            <param name="bytePositionInLine">The byte count within the current line where the invalid JSON was encountered (starting at 0).</param>
            <remarks>
            Note that the <paramref name="bytePositionInLine"/> counts the number of bytes (i.e. UTF-8 code units) and not characters or scalars.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
            <param name="innerException">The exception that caused the current exception.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
            <param name="message">The context specific error message.</param>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor">
            <summary>
            Creates a new exception object to relay error information to the user.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new exception object with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="info"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonException.AppendPathInformation">
            <summary>
            Specifies that 'try' logic should append Path information to the exception message.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Text.Json.JsonException.LineNumber">
            <summary>
            The number of lines read so far before the exception (starting at 0).
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.BytePositionInLine">
            <summary>
            The number of bytes read within the current line before the exception (starting at 0).
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.Path">
            <summary>
            The path within the JSON where the exception was encountered.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonPropertyDictionary`1">
            <summary>
            Keeps both a List and Dictionary in sync to enable deterministic enumeration ordering of List
            and performance benefits of Dictionary once a threshold is hit.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonTokenType">
            <summary>
            This enum defines the various JSON tokens that make up a JSON text and is used by
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> when moving from one token to the next.
            The <see cref="T:System.Text.Json.Utf8JsonReader"/> starts at 'None' by default. The 'Comment' enum value
            is only ever reached in a specific <see cref="T:System.Text.Json.Utf8JsonReader"/> mode and is not
            reachable by default.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.None">
            <summary>
              Indicates that there is no value (as distinct from <see cref="F:System.Text.Json.JsonTokenType.Null"/>).
            </summary>
            <remarks>
              This is the default token type if no data has been read by the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </remarks>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartObject">
            <summary>
              Indicates that the token type is the start of a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndObject">
            <summary>
              Indicates that the token type is the end of a JSON object.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.StartArray">
            <summary>
              Indicates that the token type is the start of a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.EndArray">
            <summary>
              Indicates that the token type is the end of a JSON array.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.PropertyName">
            <summary>
              Indicates that the token type is a JSON property name.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Comment">
            <summary>
              Indicates that the token type is the comment string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.String">
            <summary>
              Indicates that the token type is a JSON string.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Number">
            <summary>
              Indicates that the token type is a JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.True">
            <summary>
              Indicates that the token type is the JSON literal <c>true</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.False">
            <summary>
              Indicates that the token type is the JSON literal <c>false</c>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonTokenType.Null">
            <summary>
              Indicates that the token type is the JSON literal <c>null</c>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonArray">
            <summary>
              Represents a mutable JSON array.
            </summary>
            <remarks>
            It is safe to perform multiple concurrent read operations on a <see cref="T:System.Text.Json.Nodes.JsonArray"/>,
            but issues can occur if the collection is modified while it's being read.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray"/> class that is empty.
            </summary>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNodeOptions,System.Text.Json.Nodes.JsonNode[])">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray"/> class that contains items from the specified params array.
            </summary>
            <param name="options">Options to control the behavior.</param>
            <param name="items">The items to add to the new <see cref="T:System.Text.Json.Nodes.JsonArray"/>.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.#ctor(System.Text.Json.Nodes.JsonNode[])">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray"/> class that contains items from the specified array.
            </summary>
            <param name="items">The items to add to the new <see cref="T:System.Text.Json.Nodes.JsonArray"/>.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray"/> class that contains items from the specified <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <returns>
              The new instance of the <see cref="T:System.Text.Json.Nodes.JsonArray"/> class that contains items from the specified <see cref="T:System.Text.Json.JsonElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement"/>.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.InvalidOperationException">
              The <paramref name="element"/> is not a <see cref="F:System.Text.Json.JsonValueKind.Array"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Add``1(``0)">
            <summary>
              Adds an object to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <typeparam name="T">The type of object to be added.</typeparam>
            <param name="value">
              The object to be added to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonArray.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Add(System.Text.Json.Nodes.JsonNode)">
            <summary>
              Adds a <see cref="T:System.Text.Json.Nodes.JsonNode"/> to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <param name="item">
              The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to be added to the end of the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Clear">
            <summary>
              Removes all elements from the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Contains(System.Text.Json.Nodes.JsonNode)">
            <summary>
              Determines whether an element is in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.</param>
            <returns>
              <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.IndexOf(System.Text.Json.Nodes.JsonNode)">
            <summary>
              The object to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to locate in the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.</param>
            <returns>
             The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Insert(System.Int32,System.Text.Json.Nodes.JsonNode)">
            <summary>
              Inserts an element into the <see cref="T:System.Text.Json.Nodes.JsonArray"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than 0 or <paramref name="index"/> is greater than <see cref="P:System.Text.Json.Nodes.JsonArray.Count"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.Remove(System.Text.Json.Nodes.JsonNode)">
            <summary>
              Removes the first occurrence of a specific <see cref="T:System.Text.Json.Nodes.JsonNode"/> from the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <param name="item">
              The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to remove from the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </param>
            <returns>
              <see langword="true"/> if <paramref name="item"/> is successfully removed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.RemoveAt(System.Int32)">
            <summary>
              Removes the element at the specified index of the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than 0 or <paramref name="index"/> is greater than <see cref="P:System.Text.Json.Nodes.JsonArray.Count"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.System#Collections#Generic#ICollection{System#Text#Json#Nodes#JsonNode}#CopyTo(System.Text.Json.Nodes.JsonNode[],System.Int32)">
            <summary>
              Copies the entire <see cref="T:System.Array"/> to a compatible one-dimensional array,
              starting at the specified index of the target array.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
              from <see cref="T:System.Text.Json.Nodes.JsonArray"/>. The Array must have zero-based indexing.</param>
            <param name="index">
              The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              The number of elements in the source ICollection is greater than the available space from <paramref name="index"/>
              to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:System.Text.Json.Nodes.JsonNode"/>.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
            <returns>
              A <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </returns>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonArray.System#Collections#Generic#ICollection{System#Text#Json#Nodes#JsonNode}#IsReadOnly">
            <summary>
              Returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonNode">
            <summary>
              The base class that represents a single node within a mutable JSON document.
            </summary>
            <seealso cref="P:System.Text.Json.JsonSerializerOptions.UnknownTypeHandling"/> to specify that a type
            declared as an <see cref="T:System.Object"/> should be deserialized as a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Options">
            <summary>
              Options to control the behavior.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsArray">
            <summary>
              Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonArray"/> type.
            </summary>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              The node is not a <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsObject">
            <summary>
              Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonObject"/> type.
            </summary>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              The node is not a <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.AsValue">
            <summary>
              Casts to the derived <see cref="T:System.Text.Json.Nodes.JsonValue"/> type.
            </summary>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonValue"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              The node is not a <see cref="T:System.Text.Json.Nodes.JsonValue"/>.
            </exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Parent">
            <summary>
              Gets the parent <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
              If there is no parent, <see langword="null"/> is returned.
              A parent can either be a <see cref="T:System.Text.Json.Nodes.JsonObject"/> or a <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.GetPath">
            <summary>
              Gets the JSON path.
            </summary>
            <returns>The JSON Path value.</returns>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Root">
            <summary>
              Gets the root <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <remarks>
              The current node is returned if it is a root.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.GetValue``1">
            <summary>
              Gets the value for the current <see cref="T:System.Text.Json.Nodes.JsonValue"/>.
            </summary>
            <typeparam name="T">The type of the value to obtain from the <see cref="T:System.Text.Json.Nodes.JsonValue"/>.</typeparam>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</returns>
            <remarks>
              {T} can be the type or base type of the underlying value.
              If the underlying value is a <see cref="T:System.Text.Json.JsonElement"/> then {T} can also be the type of any primitive
              value supported by current <see cref="T:System.Text.Json.JsonElement"/>.
              Specifying the <see cref="T:System.Object"/> type for {T} will always succeed and return the underlying value as <see cref="T:System.Object"/>.<br />
              The underlying value of a <see cref="T:System.Text.Json.Nodes.JsonValue"/> after deserialization is an instance of <see cref="T:System.Text.Json.JsonElement"/>,
              otherwise it's the value specified when the <see cref="T:System.Text.Json.Nodes.JsonValue"/> was created.
            </remarks>
            <seealso cref="M:System.Text.Json.Nodes.JsonValue.TryGetValue``1(``0@)"></seealso>
            <exception cref="T:System.FormatException">
              The current <see cref="T:System.Text.Json.Nodes.JsonNode"/> cannot be represented as a {T}.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The current <see cref="T:System.Text.Json.Nodes.JsonNode"/> is not a <see cref="T:System.Text.Json.Nodes.JsonValue"/> or
              is not compatible with {T}.
            </exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than 0 or <paramref name="index"/> is greater than the number of properties.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The current <see cref="T:System.Text.Json.Nodes.JsonNode"/> is not a <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNode.Item(System.String)">
            <summary>
              Gets or sets the element with the specified property name.
              If the property is not found, <see langword="null"/> is returned.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              The current <see cref="T:System.Text.Json.Nodes.JsonNode"/> is not a <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Boolean)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Boolean"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Boolean})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Boolean"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Byte)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Byte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Byte})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Byte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Char)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Char"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Char})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Char"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTime)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.DateTime"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTime})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.DateTime"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.DateTimeOffset)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTimeOffset"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTimeOffset"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Decimal)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Decimal"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Decimal})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Decimal"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Double)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Double"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Double})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Double"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Guid)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Guid"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Guid"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Guid})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Guid"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Guid"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int16)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int16"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int16})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int16"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int32)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int32"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int32})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int32"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Int64)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int64"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Int64})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int64"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.SByte)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.SByte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.SByte})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.SByte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Single)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Single"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.Single})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.Single"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.String)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.String"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt16)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt16"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt16})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt16"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt32)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt32"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt32})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt32"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.UInt64)~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt64"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Implicit(System.Nullable{System.UInt64})~System.Text.Json.Nodes.JsonNode">
            <summary>
              Defines an implicit conversion of a given <see cref="T:System.UInt64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt64"/> to implicitly convert.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance converted from the <paramref name="value"/> parameter.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Boolean">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Boolean"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Boolean}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Boolean"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Boolean"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Byte">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Byte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Byte}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Byte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Byte"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Char">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Char"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Char}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Char"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Char"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.DateTime">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.DateTime"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.DateTime}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.DateTime"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTime"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.DateTimeOffset">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTimeOffset"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.DateTimeOffset}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.DateTimeOffset"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.DateTimeOffset"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Decimal">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Decimal"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Decimal}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Decimal"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Double">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Double"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Double}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Double"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Guid">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Guid"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Guid"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Guid}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Guid"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Guid"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int16">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int16"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int16}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int16"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int32">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int32"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int32}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int32"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Int64">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int64"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Int64}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Int64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Int64"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.SByte">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.SByte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.SByte}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.SByte"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.SByte"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Single">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Single"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.Single}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.Single"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.Single"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.String">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.String"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.String"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt16">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt16"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt16}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt16"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt16"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt32">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt32"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt32}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt32"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt32"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.UInt64">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt64"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.op_Explicit(System.Text.Json.Nodes.JsonNode)~System.Nullable{System.UInt64}">
            <summary>
              Defines an explicit conversion of a given <see cref="T:System.UInt64"/> to a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <param name="value">A <see cref="T:System.UInt64"/> to explicitly convert.</param>
            <returns>A value converted from the <see cref="T:System.Text.Json.Nodes.JsonNode"/> instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Parses one JSON value (including objects or arrays) from the provided reader.
            </summary>
            <param name="reader">The reader to read.</param>
            <param name="nodeOptions">Options to control the behavior.</param>
            <returns>
              The <see cref="T:System.Text.Json.Nodes.JsonNode"/> from the reader.
            </returns>
            <remarks>
              <para>
                If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                the start of the value.
              </para>
              <para>
                Upon completion of this method, <paramref name="reader"/> will be positioned at the
                final token in the JSON value.  If an exception is thrown, the reader is reset to the state it was in when the method was called.
              </para>
              <para>
                This method makes a copy of the data the reader acted on, so there is no caller
                requirement to maintain data integrity beyond the return of this method.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="reader"/> is using unsupported options.
            </exception>
            <exception cref="T:System.ArgumentException">
              The current <paramref name="reader"/> token does not start or represent a value.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
              A value could not be read from the reader.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parses text representing a single JSON value.
            </summary>
            <param name="json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the JSON value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="json"/> does not represent a valid single JSON value.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.ReadOnlySpan{System.Byte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parses text representing a single JSON value.
            </summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.Parse(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
              Parse a <see cref="T:System.IO.Stream"/> as UTF-8-encoded data representing a single JSON value into a
              <see cref="T:System.Text.Json.Nodes.JsonNode"/>.  The Stream will be read to completion.
            </summary>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="nodeOptions">Options to control the node behavior after parsing.</param>
            <param name="documentOptions">Options to control the document behavior during parsing.</param>
            <returns>
              A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the JSON value.
            </returns>
            <exception cref="T:System.Text.Json.JsonException">
              <paramref name="utf8Json"/> does not represent a valid single JSON value.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.ToJsonString(System.Text.Json.JsonSerializerOptions)">
            <summary>
              Converts the current instance to string in JSON format.
            </summary>
            <param name="options">Options to control the serialization behavior.</param>
            <returns>JSON representation of current instance.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.ToString">
            <summary>
              Gets a string representation for the current value appropriate to the node type.
            </summary>
            <returns>A string representation for the current value appropriate to the node type.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonNode.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <summary>
              Write the <see cref="T:System.Text.Json.Nodes.JsonNode"/> into the provided <see cref="T:System.Text.Json.Utf8JsonWriter"/> as JSON.
            </summary>
            <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter"/>.</param>
            <exception cref="T:System.ArgumentNullException">
              The <paramref name="writer"/> parameter is <see langword="null"/>.
            </exception>
            <param name="options">Options to control the serialization behavior.</param>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonNodeOptions">
            <summary>
              Options to control <see cref="T:System.Text.Json.Nodes.JsonNode"/> behavior.
            </summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonNodeOptions.PropertyNameCaseInsensitive">
            <summary>
              Specifies whether property names on <see cref="T:System.Text.Json.Nodes.JsonObject"/> are case insensitive.
            </summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonObject">
            <summary>
              Represents a mutable JSON object.
            </summary>
            <remarks>
            It's safe to perform multiple concurrent read operations on a <see cref="T:System.Text.Json.Nodes.JsonObject"/>,
            but issues can occur if the collection is modified while it's being read.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject"/> class that is empty.
            </summary>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject"/> class that contains the specified <paramref name="properties"/>.
            </summary>
            <param name="properties">The properties to be added.</param>
            <param name="options">Options to control the behavior.</param>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject"/> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <returns>
              The new instance of the <see cref="T:System.Text.Json.Nodes.JsonObject"/> class that contains properties from the specified <see cref="T:System.Text.Json.JsonElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement"/>.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonObject"/>.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.TryGetPropertyValue(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>
              Returns the value of a property with the specified name.
            </summary>
            <param name="propertyName">The name of the property to return.</param>
            <param name="jsonNode">The JSON value of the property with the specified name.</param>
            <returns>
              <see langword="true"/> if a property with the specified name was found; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Add(System.String,System.Text.Json.Nodes.JsonNode)">
            <summary>
              Adds an element with the provided property name and value to the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <param name="propertyName">The property name of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="propertyName"/>is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>
              Adds the specified property to the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <param name="property">
              The KeyValuePair structure representing the property name and value to add to the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </param>
            <exception cref="T:System.ArgumentException">
              An element with the same property name already exists in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              The property name of <paramref name="property"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Clear">
            <summary>
              Removes all elements from the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.ContainsKey(System.String)">
            <summary>
              Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject"/> contains an element with the specified property name.
            </summary>
            <param name="propertyName">The property name to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.</param>
            <returns>
              <see langword="true"/> if the <see cref="T:System.Text.Json.Nodes.JsonObject"/> contains an element with the specified property name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.Count">
            <summary>
              Gets the number of elements contained in <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.Remove(System.String)">
            <summary>
              Removes the element with the specified property name from the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <param name="propertyName">The property name of the element to remove.</param>
            <returns>
              <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Text#Json#Nodes#JsonNode}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>
              Determines whether the <see cref="T:System.Text.Json.Nodes.JsonObject"/> contains a specific property name and <see cref="T:System.Text.Json.Nodes.JsonNode"/> reference.
            </summary>
            <param name="item">The element to locate in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.</param>
            <returns>
              <see langword="true"/> if the <see cref="T:System.Text.Json.Nodes.JsonObject"/> contains an element with the property name; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Text#Json#Nodes#JsonNode}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode}[],System.Int32)">
            <summary>
              Copies the elements of the <see cref="T:System.Text.Json.Nodes.JsonObject"/> to an array of type KeyValuePair starting at the specified array index.
            </summary>
            <param name="array">
              The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
              The number of elements in the source ICollection is greater than the available space from <paramref name="index"/>
              to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <returns>
              An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Text#Json#Nodes#JsonNode}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Text.Json.Nodes.JsonNode})">
            <summary>
              Removes a key and value from the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <param name="item">
              The KeyValuePair structure representing the property name and value to remove from the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </param>
            <returns>
              <see langword="true"/> if the element is successfully removed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String,System#Text#Json#Nodes#JsonNode}#Keys">
            <summary>
              Gets a collection containing the property names in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String,System#Text#Json#Nodes#JsonNode}#Values">
            <summary>
              Gets a collection containing the property values in the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#IDictionary{System#String,System#Text#Json#Nodes#JsonNode}#TryGetValue(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>
              Gets the value associated with the specified property name.
            </summary>
            <param name="propertyName">The property name of the value to get.</param>
            <param name="jsonNode">
              When this method returns, contains the value associated with the specified property name, if the property name is found;
              otherwise, <see langword="null"/>.
            </param>
            <returns>
              <see langword="true"/> if the <see cref="T:System.Text.Json.Nodes.JsonObject"/> contains an element with the specified property name; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="propertyName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:System.Text.Json.Nodes.JsonObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Text#Json#Nodes#JsonNode}}#IsReadOnly">
            <summary>
              Returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
            <returns>
              An enumerator that iterates through the <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </returns>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonValue">
            <summary>
            Represents a mutable JSON value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Boolean,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Boolean},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Byte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Byte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Char,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Char},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.DateTime,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTime},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.DateTimeOffset,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.DateTimeOffset},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Decimal,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Decimal},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Double,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Double},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Guid,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Guid},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Int64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Int64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.SByte,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.SByte},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Single,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Single},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt16,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt16},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt32,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt32},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.UInt64,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.UInt64},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Text.Json.JsonElement,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create(System.Nullable{System.Text.Json.JsonElement},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <param name="value">The underlying value of the new <see cref="T:System.Text.Json.Nodes.JsonValue"/> instance.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <returns>
              The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </returns>
            <typeparam name="T">The type of value to create.</typeparam>
            <param name="value">The value to create.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.Create``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
              Initializes a new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </summary>
            <returns>
              The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.
            </returns>
            <typeparam name="T">The type of value to create.</typeparam>
            <param name="value">The value to create.</param>
            <param name="jsonTypeInfo">The <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> that will be used to serialize the value.</param>
            <param name="options">Options to control the behavior.</param>
            <returns>The new instance of the <see cref="T:System.Text.Json.Nodes.JsonValue"/> class that contains the specified value.</returns>
        </member>
        <member name="M:System.Text.Json.Nodes.JsonValue.TryGetValue``1(``0@)">
            <summary>
              Tries to obtain the current JSON value and returns a value that indicates whether the operation succeeded.
            </summary>
            <remarks>
              {T} can be the type or base type of the underlying value.
              If the underlying value is a <see cref="T:System.Text.Json.JsonElement"/> then {T} can also be the type of any primitive
              value supported by current <see cref="T:System.Text.Json.JsonElement"/>.
              Specifying the <see cref="T:System.Object"/> type for {T} will always succeed and return the underlying value as <see cref="T:System.Object"/>.<br />
              The underlying value of a <see cref="T:System.Text.Json.Nodes.JsonValue"/> after deserialization is an instance of <see cref="T:System.Text.Json.JsonElement"/>,
              otherwise it's the value specified when the <see cref="T:System.Text.Json.Nodes.JsonValue"/> was created.
            </remarks>
            <seealso cref="M:System.Text.Json.Nodes.JsonNode.GetValue``1"></seealso>
            <typeparam name="T">The type of value to obtain.</typeparam>
            <param name="value">When this method returns, contains the parsed value.</param>
            <returns><see langword="true"/> if the value can be successfully obtained; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonValueNotTrimmable`1">
            <summary>
            Not trim-safe since it calls JsonSerializer.Serialize(JsonSerializerOptions).
            </summary>
        </member>
        <member name="T:System.Text.Json.Nodes.JsonValueTrimmable`1">
            <summary>
            Trim-safe since it either calls the converter directly or calls the JsonSerializer.Serialize(JsonTypeInfo{TValue}).
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeNumberResult">
            <summary>
            This enum captures the tri-state return value when trying to read a
            JSON number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.Success">
            <summary>
            Reached a valid end of number and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.OperationIncomplete">
            <summary>
            Successfully processed a portion of the number and need to
            read to the next region of the number.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeNumberResult.NeedMoreData">
            <summary>
            Observed incomplete data.
            Return false if we have more data to follow. Otherwise throw.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConsumeTokenResult">
            <summary>
            This enum captures the tri-state return value when trying to read the
            next JSON token.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.Success">
            <summary>
            Reached a valid end of token and hence no action is required.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.NotEnoughDataRollBackState">
            <summary>
            Observed incomplete data but progressed state partially in looking ahead.
            Return false and roll-back to a previously saved state.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConsumeTokenResult.IncompleteNoRollBackNecessary">
            <summary>
            Observed incomplete data but no change was made to the state.
            Return false, but do not roll-back anything since nothing changed.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderHelper.TryUnescape(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
            <summary>
            Used when writing to buffers not guaranteed to fit the unescaped result.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderHelper.TryUnescape(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Used when writing to buffers not guaranteed to fit the unescaped result.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderHelper.TryEncodeToUtf8Bytes(System.UInt32,System.Span{System.Byte},System.Int32@)">
            <summary>
            Copies the UTF-8 code unit representation of this scalar to an output buffer.
            The buffer must be large enough to hold the required number of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonReaderOptions">
            <summary>
            Provides the ability for the user to define custom behavior when reading JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
            <summary>
            Defines how the <see cref="T:System.Text.Json.Utf8JsonReader"/> should handle comments when reading through the JSON.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (i.e. not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being read.
            </summary>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonReaderState">
            <summary>
            Defines an opaque type that holds and saves all the relevant state information which must be provided
            to the <see cref="T:System.Text.Json.Utf8JsonReader"/> to continue reading after processing incomplete data.
            This type is required to support reentrancy when reading incomplete data, and to continue
            reading once more data is available. Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct,
            this type can survive across async/await boundaries and hence this type is required to provide
            support for reading in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonReaderState"/> instance.
            </summary>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
            An instance of this state must be passed to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with the JSON data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonReaderState.Options">
            <summary>
            Gets the custom behavior when reading JSON using
            the <see cref="T:System.Text.Json.Utf8JsonReader"/> that may deviate from strict adherence
            to the JSON specification, which is the default behavior.
            </summary>
        </member>
        <member name="T:System.Text.Json.Utf8JsonReader">
            <summary>
            Provides a high-performance API for forward-only, read-only access to the UTF-8 encoded JSON text.
            It processes the text sequentially with no caching and adheres strictly to the JSON RFC
            by default (https://tools.ietf.org/html/rfc8259). When it encounters invalid JSON, it throws
            a JsonException with basic error information like line number and byte position on the line.
            Since this type is a ref struct, it does not directly support async. However, it does provide
            support for reentrancy to read incomplete data, and continue reading once more data is presented.
            To be able to set max depth while reading OR allow skipping comments, create an instance of
            <see cref="T:System.Text.Json.JsonReaderState"/> and pass that in to the reader.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> contains useless data, likely for
            a previous single-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
            <summary>
            Returns the total amount of bytes consumed by the <see cref="T:System.Text.Json.Utf8JsonReader"/> so far
            for the current instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> with the given UTF-8 encoded input text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
            <summary>
            Returns the index that the last processed JSON token starts at
            within the given UTF-8 encoded input text, skipping any white space.
            </summary>
            <remarks>
            For JSON strings (including property names), this points to before the start quote.
            For comments, this points to before the first comment delimiter (i.e. '/').
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            processed so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
            <summary>
            Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
            <summary>
            Lets the caller know which of the two 'Value' properties to read to get the
            token value. For input data within a ReadOnlySpan&lt;byte&gt; this will
            always return false. For input data within a ReadOnlySequence&lt;byte&gt;, this
            will only return true if the token value straddles more than a single segment and
            hence couldn't be represented as a span.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueIsEscaped">
            <summary>
            Lets the caller know whether the current <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> or <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> properties
            contain escape sequences per RFC 8259 section 7, and therefore require unescaping before being consumed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
            <summary>
            Returns the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            True when the reader was constructed with the input span containing the entire data to process.
            False when the reader was constructed knowing that the input span may contain partial data with more data to follow.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
            <summary>
            Gets the value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice
            of the input payload. If the JSON is provided within a ReadOnlySequence&lt;byte&gt;
            and the slice that represents the token value fits in a single segment, then
            <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> will contain the sliced value since it can be represented as a span.
            Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> will contain the token value.
            </summary>
            <remarks>
            If <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is false, <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> contains useless data, likely for
            a previous multi-segment token. Therefore, only access <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/> if <see cref="P:System.Text.Json.Utf8JsonReader.HasValueSequence"/> is true.
            Otherwise, the token value must be accessed from <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.Position">
            <summary>
            Returns the current <see cref="T:System.SequencePosition"/> within the provided UTF-8 encoded
            input ReadOnlySequence&lt;byte&gt;. If the <see cref="T:System.Text.Json.Utf8JsonReader"/> was constructed
            with a ReadOnlySpan&lt;byte&gt; instead, this will always return a default <see cref="T:System.SequencePosition"/>.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
            <summary>
            Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonReader"/> state which must
            be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonReader"/> ctor with more data.
            Unlike the <see cref="T:System.Text.Json.Utf8JsonReader"/>, which is a ref struct, the state can survive
            across async/await boundaries and hence this type is required to provide support for reading
            in more data asynchronously before continuing with a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySpan&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySpan&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
              <para>
                Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
              </para>
              <para>
                This assumes that the entire JSON payload is passed in (equivalent to <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> = true)
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Read">
            <summary>
            Read the next JSON token from input source.
            </summary>
            <returns>True if the token was read successfully, else false.</returns>
            <exception cref="T:System.Text.Json.JsonException">
            Thrown when an invalid JSON token is encountered according to the JSON RFC
            or if the current depth exceeds the recursive limit set by the max depth.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.Skip">
             <summary>
             Skips the children of the current JSON token.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown when the reader was given partial data with more data to follow (i.e. <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> is false).
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when an invalid JSON token is encountered while skipping, according to the JSON RFC,
             or if the current depth exceeds the recursive limit set by the max depth.
             </exception>
             <remarks>
             When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, the reader first moves to the property value.
             When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> (originally, or after advancing) is <see cref="F:System.Text.Json.JsonTokenType.StartObject" /> or
             <see cref="F:System.Text.Json.JsonTokenType.StartArray" />, the reader advances to the matching
             <see cref="F:System.Text.Json.JsonTokenType.EndObject" /> or <see cref="F:System.Text.Json.JsonTokenType.EndArray" />.
            
             For all other token types, the reader does not move. After the next call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/>, the reader will be at
             the next value (when in an array), the next property name (when in an object), or the end array/object token.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
             <summary>
             Tries to skip the children of the current JSON token.
             </summary>
             <returns>True if there was enough data for the children to be skipped successfully, else false.</returns>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown when an invalid JSON token is encountered while skipping, according to the JSON RFC,
             or if the current depth exceeds the recursive limit set by the max depth.
             </exception>
             <remarks>
               <para>
                 If the reader did not have enough data to completely skip the children of the current token,
                 it will be reset to the state it was in before the method was called.
               </para>
               <para>
                 When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, the reader first moves to the property value.
                 When <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> (originally, or after advancing) is <see cref="F:System.Text.Json.JsonTokenType.StartObject" /> or
                 <see cref="F:System.Text.Json.JsonTokenType.StartArray" />, the reader advances to the matching
                 <see cref="F:System.Text.Json.JsonTokenType.EndObject" /> or <see cref="F:System.Text.Json.JsonTokenType.EndArray" />.
            
                 For all other token types, the reader does not move. After the next call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/>, the reader will be at
                 the next value (when in an array), the next property name (when in an object), or the end array/object token.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
            Compares the UTF-8 encoded text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="utf8Text">The UTF-8 encoded text to compare against.</param>
            <returns>True if the JSON token value in the source matches the UTF-8 encoded look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid UTF-8 text, the method will return false since you cannot have
                invalid UTF-8 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
            <summary>
            Compares the string text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>True if the JSON token value in the source matches the look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid UTF-8 text, the method will return false since you cannot have
                invalid UTF-8 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
            <summary>
            Compares the text to the unescaped JSON token value in the source and returns true if they match.
            </summary>
            <param name="text">The text to compare against.</param>
            <returns>True if the JSON token value in the source matches the look up text.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to find a text match on a JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <remarks>
              <para>
                If the look up text is invalid or incomplete UTF-16 text (i.e. unpaired surrogates), the method will return false
                since you cannot have invalid UTF-16 within the JSON payload.
              </para>
              <para>
                The comparison of the JSON token value in the source and the look up text is done by first unescaping the JSON value in source,
                if required. The look up text is matched as is, without any modifications to it.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValue(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextToken(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySequence&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="isFinalBlock">True when the input span contains the entire data to process.
            Set to false only if it is known that the input span contains partial data with more data to follow.</param>
            <param name="state">If this is the first call to the ctor, pass in a default state. Otherwise,
            capture the state from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> and pass that back.</param>
            <remarks>
            Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
            This is the reason why the ctor accepts a <see cref="T:System.Text.Json.JsonReaderState"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonReader"/> instance.
            </summary>
            <param name="jsonData">The ReadOnlySequence&lt;byte&gt; containing the UTF-8 encoded JSON text to process.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader"/>
            that is different from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).
            By default, the <see cref="T:System.Text.Json.Utf8JsonReader"/> follows the JSON RFC strictly (i.e. comments within the JSON are invalid) and reads up to a maximum depth of 64.</param>
            <remarks>
              <para>
                Since this type is a ref struct, it is a stack-only type and all the limitations of ref structs apply to it.
              </para>
              <para>
                This assumes that the entire JSON payload is passed in (equivalent to <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock"/> = true)
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeValueMultiSegment(System.Byte)">
            <summary>
            This method contains the logic for processing the next value token and determining
            what type of data it is.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.ConsumeNextTokenMultiSegment(System.Byte)">
            <summary>
            This method consumes the next token regardless of whether we are inside an object or an array.
            For an object, it reads the next property name token. For an array, it just reads the next value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetString">
            <summary>
            Parses the current JSON token value from the source, unescaped, and transcoded as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            Returns <see langword="null" /> when <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> is <see cref="F:System.Text.Json.JsonTokenType.Null"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of the JSON token that is not a string
            (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/>, <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or
            <see cref="F:System.Text.Json.JsonTokenType.Null"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            It will also throw when the JSON string contains invalid UTF-8 bytes, or invalid UTF-16 surrogates.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.CopyString(System.Span{System.Byte})">
             <summary>
             Copies the current JSON token value from the source, unescaped as a UTF-8 string to the destination buffer.
             </summary>
             <param name="utf8Destination">A buffer to write the unescaped UTF-8 bytes into.</param>
             <returns>The number of bytes written to <paramref name="utf8Destination"/>.</returns>
             <remarks>
             Unlike <see cref="M:System.Text.Json.Utf8JsonReader.GetString"/>, this method does not support <see cref="F:System.Text.Json.JsonTokenType.Null"/>.
            
             This method will throw <see cref="T:System.ArgumentException"/> if the destination buffer is too small to hold the unescaped value.
             An appropriately sized buffer can be determined by consulting the length of either <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> or <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/>,
             since the unescaped result is always less than or equal to the length of the encoded strings.
             </remarks>
             <exception cref="T:System.InvalidOperationException">
             Thrown if trying to get the value of the JSON token that is not a string
             (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
             <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
             It will also throw when the JSON string contains invalid UTF-8 bytes, or invalid UTF-16 surrogates.
             </exception>
             <exception cref="T:System.ArgumentException">The destination buffer is too small to hold the unescaped value.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.CopyString(System.Span{System.Char})">
             <summary>
             Copies the current JSON token value from the source, unescaped, and transcoded as a UTF-16 char buffer.
             </summary>
             <param name="destination">A buffer to write the transcoded UTF-16 characters into.</param>
             <returns>The number of characters written to <paramref name="destination"/>.</returns>
             <remarks>
             Unlike <see cref="M:System.Text.Json.Utf8JsonReader.GetString"/>, this method does not support <see cref="F:System.Text.Json.JsonTokenType.Null"/>.
            
             This method will throw <see cref="T:System.ArgumentException"/> if the destination buffer is too small to hold the unescaped value.
             An appropriately sized buffer can be determined by consulting the length of either <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan"/> or <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence"/>,
             since the unescaped result is always less than or equal to the length of the encoded strings.
             </remarks>
             <exception cref="T:System.InvalidOperationException">
             Thrown if trying to get the value of the JSON token that is not a string
             (i.e. other than <see cref="F:System.Text.Json.JsonTokenType.String"/> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/>.
             <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
             It will also throw when the JSON string contains invalid UTF-8 bytes, or invalid UTF-16 surrogates.
             </exception>
             <exception cref="T:System.ArgumentException">The destination buffer is too small to hold the unescaped value.</exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
            <summary>
            Parses the current JSON token value from the source as a comment, transcoded as a <see cref="T:System.String"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of the JSON token that is not a comment.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Boolean"/>.
            Returns <see langword="true"/> if the TokenType is JsonTokenType.True and <see langword="false"/> if the TokenType is JsonTokenType.False.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a boolean (i.e. <see cref="F:System.Text.Json.JsonTokenType.True"/> or <see cref="F:System.Text.Json.JsonTokenType.False"/>).
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
            <summary>
            Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            The JSON string contains data outside of the expected Base64 range, or if it contains invalid/more than two padding characters,
            or is incomplete (i.e. the JSON string length is not a multiple of 4).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Byte"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Byte"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Byte.MinValue"/> or greater
            than <see cref="F:System.Byte.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.SByte"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.SByte"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.SByte.MinValue"/> or greater
            than <see cref="F:System.SByte.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int16"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int16"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int16.MinValue"/> or greater
            than <see cref="F:System.Int16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.Int32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int32.MinValue"/> or greater
            than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.Int64.MinValue"/> or greater
            than <see cref="F:System.Int64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt16"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt16"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt16.MinValue"/> or greater
            than <see cref="F:System.UInt16.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt32"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt32.MinValue"/> or greater
            than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt64"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is either of incorrect numeric format (for example if it contains a decimal or
            is written in scientific notation) or, it represents a number less than <see cref="F:System.UInt64.MinValue"/> or greater
            than <see cref="F:System.UInt64.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Single"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Single"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            On any framework that is not .NET Core 3.0 or higher, thrown if the JSON token value represents a number less than <see cref="F:System.Single.MinValue"/> or greater
            than <see cref="F:System.Single.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Double"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            On any framework that is not .NET Core 3.0 or higher, thrown if the JSON token value represents a number less than <see cref="F:System.Double.MinValue"/> or greater
            than <see cref="F:System.Double.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Decimal"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value represents a number less than <see cref="F:System.Decimal.MinValue"/> or greater
            than <see cref="F:System.Decimal.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTime"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTimeOffset"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format. Only a subset of ISO 8601 formats are supported.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Guid"/>.
            Returns the value if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid"/>
            value.
            Throws exceptions otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
            <exception cref="T:System.FormatException">
            Thrown if the JSON token value is of an unsupported format for a Guid.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>
            Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as bytes.
            Returns <see langword="true"/> if the entire token value is encoded as valid Base64 text and can be successfully
            decoded to bytes.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Byte"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Byte"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.SByte"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to an <see cref="T:System.SByte"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int16"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Int16"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
            <summary>
            Parses the current JSON token value from the source as an <see cref="T:System.Int32"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to an <see cref="T:System.Int32"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Int64"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Int64"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt16"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt16"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt32"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt32"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.UInt64"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.UInt64"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Single"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Single"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Double"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Double"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Decimal"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Decimal"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.Number"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTime"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTime"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.DateTimeOffset"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.DateTimeOffset"/> value.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
            <summary>
            Parses the current JSON token value from the source as a <see cref="T:System.Guid"/>.
            Returns <see langword="true"/> if the entire UTF-8 encoded token value can be successfully
            parsed to a <see cref="T:System.Guid"/> value. Only supports <see cref="T:System.Guid"/> values with hyphens
            and without any surrounding decorations.
            Returns <see langword="false"/> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if trying to get the value of a JSON token that is not a <see cref="F:System.Text.Json.JsonTokenType.String"/>.
            <seealso cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
            </exception>
        </member>
        <member name="T:System.Text.Json.Arguments`4">
            <summary>
            Constructor arguments for objects with parameterized ctors with less than 5 parameters.
            This is to avoid boxing for small, immutable objects.
            </summary>
        </member>
        <member name="T:System.Text.Json.ArgumentState">
            <summary>
            Holds relevant state when deserializing objects with parameterized constructors.
            Lives on the current ReadStackFrame.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializer">
            <summary>
            Provides functionality to serialize objects or value types to JSON and
            deserialize JSON into objects or value types.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonDocument,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.JsonDocument"/> representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument"/> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            <typeparamref name="TValue" /> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.JsonDocument"/> representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="document">The <see cref="T:System.Text.Json.JsonDocument"/> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/> or <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            <paramref name="returnType"/> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonDocument,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
             <summary>
             Converts the <see cref="T:System.Text.Json.JsonDocument"/> representing a single JSON value into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="document">The <see cref="T:System.Text.Json.JsonDocument"/> to convert.</param>
             <param name="jsonTypeInfo">Metadata about the type to convert.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="document"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             <typeparamref name="TValue" /> is not compatible with the JSON.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonDocument,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Converts the <see cref="T:System.Text.Json.JsonDocument"/> representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="document">The <see cref="T:System.Text.Json.JsonDocument"/> to convert.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="document"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="returnType"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
             <paramref name="context"/> returns <see langword="null"/> for the type to convert.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.JsonElement"/> representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement"/> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
            <typeparamref name="TValue" /> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.JsonElement"/> representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement"/> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            <paramref name="returnType"/> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.JsonElement,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the <see cref="T:System.Text.Json.JsonElement"/> representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="element">The <see cref="T:System.Text.Json.JsonElement"/> to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            <typeparamref name="TValue" /> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.JsonElement,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Converts the <see cref="T:System.Text.Json.JsonElement"/> representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="element">The <see cref="T:System.Text.Json.JsonElement"/> to convert.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
             <paramref name="context"/> returns <see langword="null"/> for the type to convert.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.Nodes.JsonNode"/> representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to convert.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
            <typeparamref name="TValue" /> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the <see cref="T:System.Text.Json.Nodes.JsonNode"/> representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to convert.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
            <paramref name="returnType"/> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the <see cref="T:System.Text.Json.Nodes.JsonNode"/> representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            <typeparamref name="TValue" /> is not compatible with the JSON.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Converts the <see cref="T:System.Text.Json.Nodes.JsonNode"/> representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="node">The <see cref="T:System.Text.Json.Nodes.JsonNode"/> to convert.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
             <paramref name="context"/> returns <see langword="null"/> for the type to convert.
             </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representation of the JSON value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToDocument(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.JsonDocument"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representation of the JSON value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToElement(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.JsonElement"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the JSON value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToNode(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value into a <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
            <returns>A <see cref="T:System.Text.Json.Nodes.JsonNode"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.LookupProperty(System.Object,System.ReadOnlySpan{System.Byte},System.Text.Json.ReadStack@,System.Text.Json.JsonSerializerOptions,System.Boolean@,System.Boolean)">
            <summary>
            Lookup the property given its name (obtained from the reader) and return it.
            Also sets state.Current.JsonPropertyInfo to a non-null value.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parses the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parses the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during parsing.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Parses the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Parses the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON text to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method on the provided <paramref name="context"/>
            did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> for <paramref name="returnType"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <typeparamref name="TValue"/>.
            The Stream will be read to completion.
            </summary>
            <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
            <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            <typeparamref name="TValue"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/>, <paramref name="returnType"/>, or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method on the provided <paramref name="context"/>
            did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> for <paramref name="returnType"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.IO.Stream,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Reads the UTF-8 encoded text representing a single JSON value into a <paramref name="returnType"/>.
            The Stream will be read to completion.
            </summary>
            <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="returnType">The type of the object to convert to and return.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/>, <paramref name="returnType"/>, or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.Json.JsonException">
            The JSON is invalid,
            the <paramref name="returnType"/> is not compatible with the JSON,
            or when there is remaining data in the Stream.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="returnType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method on the provided <paramref name="context"/>
            did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> for <paramref name="returnType"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsyncEnumerable``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Wraps the UTF-8 encoded text into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            that can be used to deserialize root-level JSON arrays in a streaming manner.
            </summary>
            <typeparam name="TValue">The element type to deserialize asynchronously.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> representation of the provided JSON array.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="options">Options to control the behavior during reading.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.</param>
            <returns>An <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.DeserializeAsyncEnumerable``1(System.IO.Stream,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>
            Wraps the UTF-8 encoded text into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" />
            that can be used to deserialize root-level JSON arrays in a streaming manner.
            </summary>
            <typeparam name="TValue">The element type to deserialize asynchronously.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> representation of the provided JSON array.</returns>
            <param name="utf8Json">JSON data to parse.</param>
            <param name="jsonTypeInfo">Metadata about the element type to convert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the read operation.</param>
            <returns>An <typeparamref name="TValue"/> representation of the JSON value.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Parses the text representing a single JSON value into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="options">Options to control the behavior during parsing.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <typeparamref name="TValue" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Char},System.Text.Json.JsonSerializerOptions)">
             <summary>
             Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="json">The JSON text to parse.</param>
             <param name="options">Options to control the behavior during parsing.</param>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <typeparamref name="TValue" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the span beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>Using a UTF-16 span is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Parses the text representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="options">Options to control the behavior during parsing.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> or <paramref name="returnType"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType"/> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Char},System.Type,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Parses the text representing a single JSON value into an instance of a specified type.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="json">The JSON text to parse.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="options">Options to control the behavior during parsing.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType"/> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the span beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <remarks>Using a UTF-16 span is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
             <summary>
             Parses the text representing a single JSON value into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="jsonTypeInfo">Metadata about the type to convert.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <typeparamref name="TValue" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Char},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
             <summary>
             Parses the text representing a single JSON value into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="jsonTypeInfo">Metadata about the type to convert.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <typeparamref name="TValue" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Parses the text representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
             <paramref name="context"/> returns <see langword="null"/> for the type to convert.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Char},System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Parses the text representing a single JSON value into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="json">JSON text to parse.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="json"/> or <paramref name="returnType"/> is <see langword="null"/>.
            
             -or-
            
             <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid.
            
             -or-
            
             <paramref name="returnType" /> is not compatible with the JSON.
            
             -or-
            
             There is remaining data in the string beyond a single JSON value.</exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
             <paramref name="context"/> returns <see langword="null"/> for the type to convert.
             </exception>
             <remarks>Using a <see cref="T:System.String"/> is not as efficient as using the
             UTF-8 methods since the implementation natively uses UTF-8.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="options">Options to control the serializer behavior during reading.</param>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid,
             <typeparamref name="TValue"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
            
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, and <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="options">Options to control the serializer behavior during reading.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid,
             <paramref name="returnType"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, and <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <typeparamref name="TValue"/>.
             </summary>
             <typeparam name="TValue">The type to deserialize the JSON value into.</typeparam>
             <returns>A <typeparamref name="TValue"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="jsonTypeInfo">Metadata about the type to convert.</param>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid,
             <typeparamref name="TValue"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <typeparamref name="TValue"/> or its serializable members.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
            
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, and <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
             <summary>
             Reads one JSON value (including objects or arrays) from the provided reader into a <paramref name="returnType"/>.
             </summary>
             <returns>A <paramref name="returnType"/> representation of the JSON value.</returns>
             <param name="reader">The reader to read.</param>
             <param name="returnType">The type of the object to convert to and return.</param>
             <param name="context">A metadata provider for serializable types.</param>
             <exception cref="T:System.ArgumentNullException">
             <paramref name="returnType"/> or <paramref name="context"/> is <see langword="null"/>.
             </exception>
             <exception cref="T:System.Text.Json.JsonException">
             The JSON is invalid,
             <paramref name="returnType"/> is not compatible with the JSON,
             or a value could not be read from the reader.
             </exception>
             <exception cref="T:System.ArgumentException">
               <paramref name="reader"/> is using unsupported options.
             </exception>
             <exception cref="T:System.NotSupportedException">
             There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
             for <paramref name="returnType"/> or its serializable members.
             </exception>
             <exception cref="T:System.InvalidOperationException">
             The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method on the provided <paramref name="context"/>
             did not return a compatible <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> for <paramref name="returnType"/>.
             </exception>
             <remarks>
               <para>
                 If the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType"/> property of <paramref name="reader"/>
                 is <see cref="F:System.Text.Json.JsonTokenType.PropertyName"/> or <see cref="F:System.Text.Json.JsonTokenType.None"/>, the
                 reader will be advanced by one call to <see cref="M:System.Text.Json.Utf8JsonReader.Read"/> to determine
                 the start of the value.
               </para>
            
               <para>
                 Upon completion of this method, <paramref name="reader"/> will be positioned at the
                 final token in the JSON value. If an exception is thrown, the reader is reset to
                 the state it was in when the method was called.
               </para>
            
               <para>
                 This method makes a copy of the data the reader acted on, so there is no caller
                 requirement to maintain data integrity beyond the return of this method.
               </para>
               <para>
                 The <see cref="T:System.Text.Json.JsonReaderOptions"/> used to create the instance of the <see cref="T:System.Text.Json.Utf8JsonReader"/> take precedence over the <see cref="T:System.Text.Json.JsonSerializerOptions"/> when they conflict.
                 Hence, <see cref="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas"/>, <see cref="P:System.Text.Json.JsonReaderOptions.MaxDepth"/>, and <see cref="P:System.Text.Json.JsonReaderOptions.CommentHandling"/> are used while reading.
               </para>
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value into a <see cref="T:System.Byte"/> array.
            </summary>
            <returns>A UTF-8 representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.TryGetReferenceForValue(System.Object,System.Text.Json.WriteStack@,System.Text.Json.Utf8JsonWriter)">
            <summary>
            Compute reference id for the next value to be serialized.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.WriteCore``1(System.Text.Json.Utf8JsonWriter,``0@,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Sync, strongly typed root value serialization helper.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.WriteCoreAsObject(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.Serialization.Metadata.JsonTypeInfo)">
            <summary>
            Sync, untyped root value serialization helper.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.WriteCore``1(System.Text.Json.Utf8JsonWriter,``0@,System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.WriteStack@)">
            <summary>
            Streaming root-level serialization helper.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>A task that represents the asynchronous write operation.</returns>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the write operation.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/>, <paramref name="inputType"/>, or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value to UTF-8 encoded JSON text and write it to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="utf8Json">The UTF-8 <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="utf8Json"/>, <paramref name="inputType"/>, or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.String"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the conversion behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/>  or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Converts the provided value into a <see cref="T:System.String"/>.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Converts the provided value into a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> representation of the value.</returns>
            <param name="value">The value to convert.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="inputType"/> or <paramref name="context"/> is <see langword="null"/>.
            </exception>
            <remarks>Using a <see cref="T:System.String"/> is not as efficient as using UTF-8
            encoding since the implementation internally uses UTF-8. See also <see cref="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)"/>
            and <see cref="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <param name="writer">The writer to write.</param>
            <param name="value">The value to convert and write.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <param name="writer"></param>
            <param name="value">The value to convert and write.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="options">Options to control the behavior.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="writer"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0})">
            <summary>
            Writes one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <typeparam name="TValue">The type of the value to serialize.</typeparam>
            <param name="writer">The writer to write.</param>
            <param name="value">The value to convert and write.</param>
            <param name="jsonTypeInfo">Metadata about the type to convert.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="writer"/> or <paramref name="jsonTypeInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <typeparamref name="TValue"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.Serialization.JsonSerializerContext)">
            <summary>
            Writes one JSON value (including objects or arrays) to the provided writer.
            </summary>
            <param name="writer"></param>
            <param name="value">The value to convert and write.</param>
            <param name="inputType">The type of the <paramref name="value"/> to convert.</param>
            <param name="context">A metadata provider for serializable types.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="inputType"/> is not compatible with <paramref name="value"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="writer"/> or <paramref name="inputType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="inputType"/> or its serializable members.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="M:System.Text.Json.Serialization.JsonSerializerContext.GetTypeInfo(System.Type)"/> method of the provided
            <paramref name="context"/> returns <see langword="null"/> for the type to convert.
            </exception>
        </member>
        <member name="F:System.Text.Json.PolymorphicSerializationState.PolymorphicReEntryStarted">
            <summary>
            Dispatch to a derived converter has been initiated.
            </summary>
        </member>
        <member name="F:System.Text.Json.PolymorphicSerializationState.PolymorphicReEntrySuspended">
            <summary>
            Current frame is a continuation using a suspended derived converter.
            </summary>
        </member>
        <member name="F:System.Text.Json.PolymorphicSerializationState.PolymorphicReEntryNotFound">
            <summary>
            Current frame is a polymorphic converter that couldn't resolve a derived converter.
            (E.g. because the runtime type matches the declared type).
            </summary>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriterCache">
            <summary>
            Defines a thread-local cache for JsonSerializer to store reusable Utf8JsonWriter/IBufferWriter instances.
            </summary>
        </member>
        <member name="T:System.Text.Json.ConverterStrategy">
            <summary>
            Determines how a given class is treated when it is (de)serialized.
            </summary>
            <remarks>
            Although bit flags are used, a given ConverterStrategy can only be one value.
            Bit flags are used to efficiently compare against more than one value.
            </remarks>
        </member>
        <member name="F:System.Text.Json.ConverterStrategy.None">
            <summary>
            Default value; not used by any converter.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConverterStrategy.Object">
            <summary>
            Objects with properties.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConverterStrategy.Value">
            <summary>
            Simple values or user-provided custom converters.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConverterStrategy.Enumerable">
            <summary>
            Enumerable collections except dictionaries.
            </summary>
        </member>
        <member name="F:System.Text.Json.ConverterStrategy.Dictionary">
            <summary>
            Dictionary types.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerDefaults">
            <summary>
            Signifies what default options are used by <see cref="T:System.Text.Json.JsonSerializerOptions"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.General">
            <summary>
            Specifies that general-purpose values should be used. These are the same settings applied if a <see cref="T:System.Text.Json.JsonSerializerDefaults"/> isn't specified.
            </summary>
            <remarks>
            This option implies that property names are treated as case-sensitive and that "PascalCase" name formatting should be employed.
            </remarks>
        </member>
        <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
            <summary>
            Specifies that values should be used more appropriate to web-based scenarios.
            </summary>
            <remarks>
            This option implies that property names are treated as case-insensitive and that "camelCase" name formatting should be employed.
            </remarks>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions">
            <summary>
            Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.
            </summary>
            <summary>
            Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:System.Text.Json.JsonSerializerOptions._cachingContext">
            <summary>
            Encapsulates all cached metadata referenced by the current <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance.
            Context can be shared across multiple equivalent options instances.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetTypeInfo(System.Type)">
             <summary>
             Gets the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> contract metadata resolved by the current <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
             </summary>
             <param name="type">The type to resolve contract metadata for.</param>
             <returns>The contract metadata resolved for <paramref name="type"/>.</returns>
             <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException"><paramref name="type"/> is not valid for serialization.</exception>
             <remarks>
             Returned metadata can be downcast to <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo`1"/> and used with the relevant <see cref="T:System.Text.Json.JsonSerializer"/> overloads.
            
             If the <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance is locked for modification, the method will return a cached instance for the metadata.
             </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetTypeInfoInternal(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Same as GetTypeInfo but without validation and additional knobs.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetTypeInfoForRootType(System.Type)">
            <summary>
            Return the TypeInfo for root API calls.
            This has an LRU cache that is intended only for public API calls that specify the root type.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions.CachingContext">
            <summary>
            Stores and manages all reflection caches for one or more <see cref="T:System.Text.Json.JsonSerializerOptions"/> instances.
            NB the type encapsulates the original options instance and only consults that one when building new types;
            this is to prevent multiple options instances from leaking into the object graphs of converters which
            could break user invariants.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions.TrackedCachingContexts">
            <summary>
            Defines a cache of CachingContexts; instead of using a ConditionalWeakTable which can be slow to traverse
            this approach uses a fixed-size array of weak references of <see cref="T:System.Text.Json.JsonSerializerOptions.CachingContext"/> that can be looked up lock-free.
            Relevant caching contexts are looked up by linear traversal using the equality comparison defined by <see cref="T:System.Text.Json.JsonSerializerOptions.EqualityComparer"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions.EqualityComparer">
            <summary>
            Provides a conservative equality comparison for JsonSerializerOptions instances.
            If two instances are equivalent, they should generate identical metadata caches;
            the converse however does not necessarily hold.
            </summary>
        </member>
        <member name="T:System.Text.Json.JsonSerializerOptions.EqualityComparer.HashCode">
            <summary>
            Polyfill for System.HashCode.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
            <summary>
            The list of custom converters.
            </summary>
            <remarks>
            Once serialization or deserialization occurs, the list cannot be modified.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
            <summary>
            Returns the converter for the specified type.
            </summary>
            <param name="typeToConvert">The type to return a converter for.</param>
            <returns>
            The converter for the given type.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The configured <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <paramref name="typeToConvert"/> returned an invalid converter.
            </exception>
            <exception cref="T:System.NotSupportedException">
            There is no compatible <see cref="T:System.Text.Json.Serialization.JsonConverter"/>
            for <paramref name="typeToConvert"/> or its serializable members.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.GetConverterInternal(System.Type)">
            <summary>
            Same as GetConverter but without defaulting to reflection converters.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Default">
            <summary>
            Gets a read-only, singleton instance of <see cref="T:System.Text.Json.JsonSerializerOptions" /> that uses the default configuration.
            </summary>
            <remarks>
            Each <see cref="T:System.Text.Json.JsonSerializerOptions" /> instance encapsulates its own serialization metadata caches,
            so using fresh default instances every time one is needed can result in redundant recomputation of converters.
            This property provides a shared instance that can be consumed by any number of components without necessitating any converter recomputation.
            </remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Copies the options from a <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance to a new instance.
            </summary>
            <param name="options">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance to copy options from.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="options"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.TrackOptionsInstance(System.Text.Json.JsonSerializerOptions)">
            <summary>Tracks the options instance to enable all instances to be enumerated.</summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.TrackedOptionsInstances.All">
            <summary>Tracks all live JsonSerializerOptions instances.</summary>
            <remarks>Instances are added to the table in their constructor.</remarks>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance with a predefined set of options determined by the specified <see cref="T:System.Text.Json.JsonSerializerDefaults"/>.
            </summary>
            <param name="defaults"> The <see cref="T:System.Text.Json.JsonSerializerDefaults"/> to reason about.</param>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.AddContext``1">
            <summary>
            Binds current <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance with a new instance of the specified <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> type.
            </summary>
            <typeparam name="TContext">The generic definition of the specified context type.</typeparam>
            <remarks>
            When serializing and deserializing types using the options
            instance, metadata for the types will be fetched from the context instance.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.TypeInfoResolver">
            <summary>
            Gets or sets the <see cref="T:System.Text.Json.Serialization.Metadata.JsonTypeInfo"/> contract resolver used by this instance.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <remarks>
            A <see langword="null"/> setting is equivalent to using the reflection-based <see cref="T:System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver" />.
            The property will be populated automatically once used with one of the <see cref="T:System.Text.Json.JsonSerializer"/> methods.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
            <summary>
            Defines whether an extra comma at the end of a list of JSON values in an object or array
            is allowed (and ignored) within the JSON payload being deserialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <remarks>
            By default, it's set to false, and <exception cref="T:System.Text.Json.JsonException"/> is thrown if a trailing comma is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
            <summary>
            The default buffer size in bytes used when creating temporary buffers.
            </summary>
            <remarks>The default size is 16K.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when the buffer size is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
            <summary>
            The encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
            <summary>
            Specifies the policy used to convert a <see cref="T:System.Collections.IDictionary"/> key's name to another format, such as camel-casing.
            </summary>
            <remarks>
            This property can be set to <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            It is not used when deserializing.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
            <summary>
            Determines whether null values are ignored during serialization and deserialization.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            or <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition"/> has been set to a non-default value. These properties cannot be used together.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
            <summary>
            Specifies a condition to determine when properties with default values are ignored during serialization or deserialization.
            The default value is <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if this property is set to <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred,
            or <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues"/> has been set to <see langword="true"/>. These properties cannot be used together.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
            <summary>
            Specifies how number types should be handled when serializing or deserializing.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
            <summary>
            Determines whether read-only properties are ignored during serialization.
            A property is read-only if it contains a public getter but not a public setter.
            The default value is false.
            </summary>
            <remarks>
            Read-only properties are not deserialized regardless of this setting.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
            <summary>
            Determines whether read-only fields are ignored during serialization.
            A field is read-only if it is marked with the <c>readonly</c> keyword.
            The default value is false.
            </summary>
            <remarks>
            Read-only fields are not deserialized regardless of this setting.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
            <summary>
            Determines whether fields are handled on serialization and deserialization.
            The default value is false.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default (i.e. 0) indicating a max depth of 64.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Going past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
            <summary>
            Specifies the policy used to convert a property's name on an object to another format, such as camel-casing.
            The resulting property name is expected to match the JSON payload during deserialization, and
            will be used when writing the property name during serialization.
            </summary>
            <remarks>
            The policy is not used for properties that have a <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute"/> applied.
            This property can be set to <see cref="P:System.Text.Json.JsonNamingPolicy.CamelCase"/> to specify a camel-casing policy.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
            <summary>
            Determines whether a property's name uses a case-insensitive comparison during deserialization.
            The default value is false.
            </summary>
            <remarks>There is a performance cost associated when the value is true.</remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
            <summary>
            Defines how the comments are handled during deserialization.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling"/> enum range).
            </exception>
            <remarks>
            By default <exception cref="T:System.Text.Json.JsonException"/> is thrown if a comment is encountered.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.UnknownTypeHandling">
            <summary>
            Defines how deserializing a type declared as an <see cref="T:System.Object"/> is handled during deserialization.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
            <summary>
            Defines whether JSON should pretty print which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is serialized without any extra white space.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this property is set after serialization or deserialization has occurred.
            </exception>
        </member>
        <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
            <summary>
            Configures how object references are handled when reading and writing JSON.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonSerializerOptions.InitializeForReflectionSerializer">
            <summary>
            Initializes the converters for the reflection-based serializer.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.Current">
            <summary>
            Exposes the stackframe that is currently active.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack._stack">
            <summary>
            Buffer containing all frames in the stack. For performance it is only populated for serialization depths > 1.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack._count">
            <summary>
            Tracks the current depth of the stack.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack._continuationCount">
            <summary>
            If not zero, indicates that the stack is part of a re-entrant continuation of given depth.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.BytesConsumed">
            <summary>
            Bytes consumed in the current loop.
            </summary>
        </member>
        <member name="P:System.Text.Json.ReadStack.IsContinuation">
            <summary>
            Indicates that the state still contains suspended frames waiting re-entry.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.ReadAhead">
            <summary>
            Internal flag to let us know that we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.SupportContinuation">
            <summary>
            Whether we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.ReferenceId">
            <summary>
            Holds the value of $id or $ref of the currently read object
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.PolymorphicTypeDiscriminator">
            <summary>
            Holds the value of $type of the currently read object
            </summary>
        </member>
        <member name="F:System.Text.Json.ReadStack.PreserveReferences">
            <summary>
            Global flag indicating whether we can read preserved references.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStack.EnsurePushCapacity">
            <summary>
            Ensures that the stack buffer has sufficient capacity to hold an additional frame.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStack.InitializePolymorphicReEntry(System.Text.Json.Serialization.Metadata.JsonTypeInfo)">
            <summary>
            Configures the current stack frame for a polymorphic converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStack.ResumePolymorphicReEntry">
            <summary>
            Configures the current frame for a continuation of a polymorphic converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStack.ExitPolymorphicConverter(System.Boolean)">
            <summary>
            Updates frame state after a polymorphic converter has returned.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStackFrame.IsProcessingDictionary">
            <summary>
            Is the current object a Dictionary.
            </summary>
        </member>
        <member name="M:System.Text.Json.ReadStackFrame.IsProcessingEnumerable">
            <summary>
            Is the current object an Enumerable.
            </summary>
        </member>
        <member name="T:System.Text.Json.StackFrameObjectState">
            <summary>
            The current state of an object or collection that supports continuation.
            The values are typically compared with the less-than operator so the ordering is important.
            </summary>
        </member>
        <member name="T:System.Text.Json.StackFramePropertyState">
            <summary>
            The current state of a property that supports continuation.
            The values are typically compared with the less-than operator so the ordering is important.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.Current">
            <summary>
            Exposes the stackframe that is currently active.
            </summary>
        </member>
        <member name="P:System.Text.Json.WriteStack.Parent">
            <summary>
            Gets the parent stackframe, if it exists.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._stack">
            <summary>
            Buffer containing all frames in the stack. For performance it is only populated for serialization depths > 1.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._count">
            <summary>
            Tracks the current depth of the stack.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._continuationCount">
            <summary>
            If not zero, indicates that the stack is part of a re-entrant continuation of given depth.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack._indexOffset">
            <summary>
            Offset used to derive the index of the current frame in the stack buffer from the current value of <see cref="F:System.Text.Json.WriteStack._count"/>,
            following the formula currentIndex := _count - _indexOffset.
            Value can vary between 0 or 1 depending on whether we need to allocate a new frame on the first Push() operation,
            which can happen if the root converter is polymorphic.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.CancellationToken">
            <summary>
            Cancellation token used by converters performing async serialization (e.g. IAsyncEnumerable)
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.SuppressFlush">
            <summary>
            In the case of async serialization, used by resumable converters to signal that
            the current buffer contents should not be flushed to the underlying stream.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.PendingTask">
            <summary>
            Stores a pending task that a resumable converter depends on to continue work.
            It must be awaited by the root context before serialization is resumed.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.CompletedAsyncDisposables">
            <summary>
            List of completed IAsyncDisposables that have been scheduled for disposal by converters.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.FlushThreshold">
            <summary>
            The amount of bytes to write before the underlying Stream should be flushed and the
            current buffer adjusted to remove the processed bytes.
            </summary>
        </member>
        <member name="P:System.Text.Json.WriteStack.IsContinuation">
            <summary>
            Indicates that the state still contains suspended frames waiting re-entry.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.IsPolymorphicRootValue">
            <summary>
            Indicates that the root-level JsonTypeInfo is the result of
            polymorphic dispatch from the internal System.Object converter.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.SupportContinuation">
            <summary>
            Internal flag to let us know that we need to read ahead in the inner read loop.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.SupportAsync">
            <summary>
            Internal flag indicating that async serialization is supported. Implies `SupportContinuation`.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.NewReferenceId">
            <summary>
            Stores a reference id that has been calculated for a newly serialized object.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStack.PolymorphicTypeDiscriminator">
            <summary>
            Indicates that the next converter is polymorphic and must serialize a type discriminator.
            </summary>
        </member>
        <member name="P:System.Text.Json.WriteStack.CurrentContainsMetadata">
            <summary>
            Whether the current frame needs to write out any metadata.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStack.PeekNestedJsonTypeInfo">
            <summary>
            Gets the nested JsonTypeInfo before resolving any polymorphic converters
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStack.DisposePendingDisposablesOnException">
            <summary>
            Walks the stack cleaning up any leftover IDisposables
            in the event of an exception on serialization
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStack.DisposePendingDisposablesOnExceptionAsync">
            <summary>
            Walks the stack cleaning up any leftover I(Async)Disposables
            in the event of an exception on async serialization
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.CollectionEnumerator">
            <summary>
            The enumerator for resumable collections.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.AsyncDisposable">
            <summary>
            The enumerator for resumable async disposables.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.AsyncEnumeratorIsPendingCompletion">
            <summary>
            The current stackframe has suspended serialization due to a pending task,
            stored in the <see cref="F:System.Text.Json.WriteStack.PendingTask"/> property.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.JsonPropertyInfo">
            <summary>
            The original JsonPropertyInfo that is not changed. It contains all properties.
            </summary>
            <remarks>
            For objects, it is either the actual (real) JsonPropertyInfo or the <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.PropertyInfoForTypeInfo"/> for the class.
            For collections, it is the <see cref="P:System.Text.Json.Serialization.Metadata.JsonTypeInfo.PropertyInfoForTypeInfo"/> for the class and current element.
            </remarks>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.IsWritingExtensionDataProperty">
            <summary>
            Used when processing extension data dictionaries.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.JsonTypeInfo">
            <summary>
            The class (POCO or IEnumerable) that is being populated.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.OriginalDepth">
            <summary>
            Validation state for a class.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.PropertyState">
            <summary>
            Property or Element state.
            </summary>
        </member>
        <member name="F:System.Text.Json.WriteStackFrame.EnumeratorIndex">
            <summary>
            The enumerator index for resumable collections.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.GetNestedJsonTypeInfo">
            <summary>
            Returns the JsonTypeInfo instance for the nested value we are trying to access.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.InitializePolymorphicReEntry(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Configures the next stack frame for a polymorphic converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.InitializePolymorphicReEntry(System.Text.Json.Serialization.Metadata.JsonTypeInfo)">
            <summary>
            Configures the next stack frame for a polymorphic converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.ResumePolymorphicReEntry">
            <summary>
            Configures the next frame for a continuation of a polymorphic converter.
            </summary>
        </member>
        <member name="M:System.Text.Json.WriteStackFrame.ExitPolymorphicConverter(System.Boolean)">
            <summary>
            Updates frame state after a polymorphic converter has returned.
            </summary>
        </member>
        <member name="M:System.Text.Json.JsonWriterHelper.ToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
             <summary>
             Converts a span containing a sequence of UTF-16 bytes into UTF-8 bytes.
            
             This method will consume as many of the input bytes as possible.
            
             On successful exit, the entire input was consumed and encoded successfully. In this case, <paramref name="bytesConsumed"/> will be
             equal to the length of the <paramref name="utf16Source"/> and <paramref name="bytesWritten"/> will equal the total number of bytes written to
             the <paramref name="utf8Destination"/>.
             </summary>
             <param name="utf16Source">A span containing a sequence of UTF-16 bytes.</param>
             <param name="utf8Destination">A span to write the UTF-8 bytes into.</param>
             <param name="bytesConsumed">On exit, contains the number of bytes that were consumed from the <paramref name="utf16Source"/>.</param>
             <param name="bytesWritten">On exit, contains the number of bytes written to <paramref name="utf8Destination"/></param>
             <returns>A <see cref="T:System.Buffers.OperationStatus"/> value representing the state of the conversion.</returns>
        </member>
        <member name="T:System.Text.Json.JsonWriterOptions">
            <summary>
            Provides the ability for the user to define custom behavior when writing JSON
            using the <see cref="T:System.Text.Json.Utf8JsonWriter"/>. By default, the JSON is written without
            any indentation or extra white space. Also, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> will
            throw an exception if the user attempts to write structurally invalid JSON.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
            <summary>
            The encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.Indented">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should pretty print the JSON which includes:
            indenting nested JSON tokens, adding new lines, and adding white space between property names and values.
            By default, the JSON is written without any extra white space.
            </summary>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when writing JSON, with the default (i.e. 0) indicating a max depth of 1000.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the max depth is set to a negative value.
            </exception>
            <remarks>
            Reading past this depth will throw a <exception cref="T:System.Text.Json.JsonException"/>.
            </remarks>
        </member>
        <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
            <summary>
            Defines whether the <see cref="T:System.Text.Json.Utf8JsonWriter"/> should skip structural validation and allow
            the user to write invalid JSON, when set to true. If set to false, any attempts to write invalid JSON will result in
            a <exception cref="T:System.InvalidOperationException"/> to be thrown.
            </summary>
            <remarks>
            If the JSON being written is known to be correct,
            then skipping validation (by setting it to true) could improve performance.
            An example of invalid JSON where the writer will throw (when SkipValidation
            is set to false) is when you write a value within a JSON object
            without a property name.
            </remarks>
        </member>
        <member name="T:System.Text.Json.Utf8JsonWriter">
            <summary>
            Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.
            </summary>
            <remarks>
              <para>
                It writes the text sequentially with no caching and adheres to the JSON RFC
                by default (https://tools.ietf.org/html/rfc8259), with the exception of writing comments.
              </para>
              <para>
                When the user attempts to write invalid JSON and validation is enabled, it throws
                an <see cref="T:System.InvalidOperationException"/> with a context specific error message.
              </para>
              <para>
                To be able to format the output with indentation and whitespace OR to skip validation, create an instance of
                <see cref="T:System.Text.Json.JsonWriterOptions"/> and pass that in to the writer.
              </para>
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
            <summary>
            Returns the amount of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far
            that have not yet been flushed to the output and committed.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
            <summary>
            Returns the amount of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter"/> so far.
            </summary>
            <remarks>
            In the case of IBufferwriter, this is how much the IBufferWriter has advanced.
            In the case of Stream, this is how much data has been written to the stream.
            </remarks>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.Options">
            <summary>
            Gets the custom behavior when writing JSON using
            the <see cref="T:System.Text.Json.Utf8JsonWriter"/> which indicates whether to format the output
            while writing and whether to skip structural JSON validation or not.
            </summary>
        </member>
        <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
            <summary>
            Tracks the recursive depth of the nested objects / arrays within the JSON text
            written so far. This provides the depth of the current token.
            </summary>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="bufferWriter"/>.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (that is, with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
            <summary>
            Constructs a new <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance with a specified <paramref name="utf8Json"/>.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <param name="options">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter"/>
            By default, the <see cref="T:System.Text.Json.Utf8JsonWriter"/> writes JSON minimized (that is, with no extra whitespace)
            and validates that the JSON being written is structurally valid according to JSON RFC.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used.
            </summary>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            and the original output as the destination (either <see cref="T:System.Buffers.IBufferWriter`1" /> or <see cref="T:System.IO.Stream" />).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.IO.Stream" />.
            </summary>
            <param name="utf8Json">An instance of <see cref="T:System.IO.Stream" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.IO.Stream" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.IO.Stream" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Resets the <see cref="T:System.Text.Json.Utf8JsonWriter"/> internal state so that it can be re-used with the new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.
            </summary>
            <param name="bufferWriter">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text into.</param>
            <remarks>
            The <see cref="T:System.Text.Json.Utf8JsonWriter"/> will continue to use the original writer options
            but now write to the passed in <see cref="T:System.Buffers.IBufferWriter`1" /> as the new destination.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the instance of <see cref="T:System.Buffers.IBufferWriter`1" /> that is passed in is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
            <summary>
            Commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
            <summary>
            Commits any left over JSON text that has not yet been flushed and releases all resources used by the current instance.
            </summary>
            <remarks>
              <para>
                In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
                In the case of Stream, this writes the data to the stream and flushes it.
              </para>
              <para>
                The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance cannot be re-used after disposing.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
            <summary>
            Asynchronously commits any left over JSON text that has not yet been flushed and releases all resources used by the current instance.
            </summary>
            <remarks>
              <para>
                In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
                In the case of Stream, this writes the data to the stream and flushes it.
              </para>
              <para>
                The <see cref="T:System.Text.Json.Utf8JsonWriter"/> instance cannot be re-used after disposing.
              </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously commits the JSON text written so far which makes it visible to the output destination.
            </summary>
            <remarks>
            In the case of IBufferWriter, this advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.
            In the case of Stream, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
              The instance of <see cref="T:System.Text.Json.Utf8JsonWriter"/> has been disposed.
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the beginning of a JSON array with a pre-encoded property name as the key.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the beginning of a JSON object with a pre-encoded property name as the key.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON array to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON array with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the beginning of a JSON object with a property name as the key.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <remarks>
            The property name is escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the depth of the JSON has exceeded the maximum depth of 1000
            OR if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
            <summary>
            Writes the end of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name should already be escaped when the instance of <see cref="T:System.Text.Json.JsonEncodedText"/> was created.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
            <summary>
            Writes the property name and <see cref="T:System.DateTime"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
            <summary>
            Writes the property name and <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded property name of the JSON object to be written.</param>
            <param name="value">The value to to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
            <summary>
            Writes the property name and <see cref="T:System.Decimal"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
            <summary>
            Writes the property name and <see cref="T:System.Double"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write..</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
            <summary>
            Writes the property name and <see cref="T:System.Single"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write..</param>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
            <summary>
            Writes the property name and <see cref="T:System.Guid"/> value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Writes the property name and <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
            <summary>
            Writes the property name and <see cref="T:System.Int64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Writes the property name and <see cref="T:System.Int32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
            <summary>
            Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value is escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})"/> were called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
            <summary>
            Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The value is escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the UTF-8 property name and text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="utf8Value">The UTF-8 encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name and value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
            <summary>
            Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value are escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
            <summary>
            Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name or value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The property name and value are escaped before writing.
            </para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Writes the property name and <see cref="T:System.UInt64"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
            <summary>
            Writes the pre-encoded property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The JSON-encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="propertyName"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
            <summary>
            Writes the property name and <see cref="T:System.UInt32"/> value (as a JSON number) as part of a name/value pair of a JSON object.
            </summary>
            <param name="utf8PropertyName">The UTF-8 encoded name of the property to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified property name is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            The property name is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.
            </summary>
            <param name="bytes">The binary data to write as Base64 encoded text.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The bytes are encoded before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
            <summary>
            Writes the string text value (as a JSON comment).
            </summary>
            <param name="value">The value to write as a JSON comment within /*..*/.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given string text value contains a comment delimiter (that is, */).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="value"/> parameter is <see langword="null"/>.
            </exception>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the text value (as a JSON comment).
            </summary>
            <param name="value">The value to write as a JSON comment within /*..*/.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given text value contains a comment delimiter (that is, */).
            </exception>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON comment).
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON comment within /*..*/.</param>
            <remarks>
            The comment value is not escaped before writing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large OR if the given UTF-8 text value contains a comment delimiter (that is, */).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
            <summary>
            Writes the <see cref="T:System.DateTime"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTime"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
            <summary>
            Writes the <see cref="T:System.DateTimeOffset"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.DateTimeOffset"/> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat"/> , for example: 2017-06-12T05:30:45.7680000-07:00.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
            <summary>
            Writes the <see cref="T:System.Decimal"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Decimal"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G').
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
            <summary>
            Writes the <see cref="T:System.Double"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Double"/> using the default <see cref="T:System.Buffers.StandardFormat"/> on .NET Core 3 or higher
            and 'G17' on any other framework.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Single"/> using the default <see cref="T:System.Buffers.StandardFormat"/> on .NET Core 3 or higher
            and 'G9' on any other framework.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="utf8FormattedNumber">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="utf8FormattedNumber"/> does not represent a valid JSON number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
            <summary>
            Writes the <see cref="T:System.Guid"/> value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Guid"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
            <summary>
            Writes the JSON literal "null" as an element of a JSON array.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Boolean"/> value (as a JSON literal "true" or "false") as an element of a JSON array.
            </summary>
            <param name="value">The value write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.String,System.Boolean)">
             <summary>
             Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
             </summary>
             <param name="json">The raw JSON content to write.</param>
             <param name="skipInputValidation">Whether to validate if the input is an RFC 8259-compliant JSON payload.</param>
             <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="json"/> is <see langword="null"/>.</exception>
             <exception cref="T:System.ArgumentException">Thrown if the length of the input is zero or greater than 715,827,882 (<see cref="F:System.Int32.MaxValue"/> / 3).</exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown if <paramref name="skipInputValidation"/> is <see langword="false"/>, and the input
             is not a valid, complete, single JSON value according to the JSON RFC (https://tools.ietf.org/html/rfc8259)
             or the input JSON exceeds a recursive depth of 64.
             </exception>
             <remarks>
             When writing untrused JSON values, do not set <paramref name="skipInputValidation"/> to <see langword="true"/> as this can result in invalid JSON
             being written, and/or the overall payload being written to the writer instance being invalid.
            
             When using this method, the input content will be written to the writer destination as-is, unless validation fails (when it is enabled).
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.SkipValidation"/> value for the writer instance is honored when using this method.
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.Indented"/> and <see cref="P:System.Text.Json.JsonWriterOptions.Encoder"/> values for the writer instance are not applied when using this method.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Char},System.Boolean)">
             <summary>
             Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
             </summary>
             <param name="json">The raw JSON content to write.</param>
             <param name="skipInputValidation">Whether to validate if the input is an RFC 8259-compliant JSON payload.</param>
             <exception cref="T:System.ArgumentException">Thrown if the length of the input is zero or greater than 715,827,882 (<see cref="F:System.Int32.MaxValue"/> / 3).</exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown if <paramref name="skipInputValidation"/> is <see langword="false"/>, and the input
             is not a valid, complete, single JSON value according to the JSON RFC (https://tools.ietf.org/html/rfc8259)
             or the input JSON exceeds a recursive depth of 64.
             </exception>
             <remarks>
             When writing untrused JSON values, do not set <paramref name="skipInputValidation"/> to <see langword="true"/> as this can result in invalid JSON
             being written, and/or the overall payload being written to the writer instance being invalid.
            
             When using this method, the input content will be written to the writer destination as-is, unless validation fails (when it is enabled).
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.SkipValidation"/> value for the writer instance is honored when using this method.
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.Indented"/> and <see cref="P:System.Text.Json.JsonWriterOptions.Encoder"/> values for the writer instance are not applied when using this method.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteRawValue(System.ReadOnlySpan{System.Byte},System.Boolean)">
             <summary>
             Writes the input as JSON content. It is expected that the input content is a single complete JSON value.
             </summary>
             <param name="utf8Json">The raw JSON content to write.</param>
             <param name="skipInputValidation">Whether to validate if the input is an RFC 8259-compliant JSON payload.</param>
             <exception cref="T:System.ArgumentException">Thrown if the length of the input is zero or equal to <see cref="F:System.Int32.MaxValue"/>.</exception>
             <exception cref="T:System.Text.Json.JsonException">
             Thrown if <paramref name="skipInputValidation"/> is <see langword="false"/>, and the input
             is not a valid, complete, single JSON value according to the JSON RFC (https://tools.ietf.org/html/rfc8259)
             or the input JSON exceeds a recursive depth of 64.
             </exception>
             <remarks>
             When writing untrused JSON values, do not set <paramref name="skipInputValidation"/> to <see langword="true"/> as this can result in invalid JSON
             being written, and/or the overall payload being written to the writer instance being invalid.
            
             When using this method, the input content will be written to the writer destination as-is, unless validation fails (when it is enabled).
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.SkipValidation"/> value for the writer instance is honored when using this method.
            
             The <see cref="P:System.Text.Json.JsonWriterOptions.Indented"/> and <see cref="P:System.Text.Json.JsonWriterOptions.Encoder"/> values for the writer instance are not applied when using this method.
             </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.Int64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
            <summary>
            Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The JSON-encoded value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
            <summary>
            Writes the string text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            <para>
            The value is escaped before writing.</para>
            <para>
            If <paramref name="value"/> is <see langword="null"/> the JSON null value is written,
            as if <see cref="M:System.Text.Json.Utf8JsonWriter.WriteNullValue"/> was called.
            </para>
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.
            </summary>
            <param name="utf8Value">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when the specified value is too large.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            The value is escaped before writing.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValueAsStringUnescaped(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a number as a JSON string. The string value is not escaped.
            </summary>
            <param name="utf8Value"></param>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt32"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> value (as a JSON number) as an element of a JSON array.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if this would result in invalid JSON being written (while validation is enabled).
            </exception>
            <remarks>
            Writes the <see cref="T:System.UInt64"/> using the default <see cref="T:System.Buffers.StandardFormat"/> (that is, 'G'), for example: 32767.
            </remarks>
        </member>
        <member name="T:System.Buffers.Text.SequenceValidity">
            <summary>
            Represents the validity of a UTF code unit sequence.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Empty">
            <summary>
            The sequence is empty.
            </summary>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.WellFormed">
            <summary>
            The sequence is well-formed and unambiguously represents a proper Unicode scalar value.
            </summary>
            <remarks>
            [ 20 ] (U+0020 SPACE) is a well-formed UTF-8 sequence.
            [ C3 A9 ] (U+00E9 LATIN SMALL LETTER E WITH ACUTE) is a well-formed UTF-8 sequence.
            [ F0 9F 98 80 ] (U+1F600 GRINNING FACE) is a well-formed UTF-8 sequence.
            [ D83D DE00 ] (U+1F600 GRINNING FACE) is a well-formed UTF-16 sequence.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Incomplete">
            <summary>
            The sequence is not well-formed on its own, but it could appear as a prefix
            of a longer well-formed sequence. More code units are needed to make a proper
            determination as to whether this sequence is well-formed. Incomplete sequences
            can only appear at the end of a string.
            </summary>
            <remarks>
            [ C2 ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ F0 9F ] is an incomplete UTF-8 sequence if it is followed by nothing.
            [ D83D ] is an incomplete UTF-16 sequence if it is followed by nothing.
            </remarks>
        </member>
        <member name="F:System.Buffers.Text.SequenceValidity.Invalid">
            <summary>
            The sequence is never well-formed anywhere, or this sequence can never appear as a prefix
            of a longer well-formed sequence, or the sequence was improperly terminated by the code
            unit which appeared immediately after this sequence.
            </summary>
            <remarks>
            [ 80 ] is an invalid UTF-8 sequence (code unit cannot appear at start of sequence).
            [ FE ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ C2 ] is an invalid UTF-8 sequence if it is followed by [ 20 ] (sequence improperly terminated).
            [ ED A0 ] is an invalid UTF-8 sequence (sequence is never well-formed anywhere in UTF-8 string).
            [ DE00 ] is an invalid UTF-16 sequence (code unit cannot appear at start of sequence).
            </remarks>
        </member>
        <member name="T:System.Buffers.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T"/> data can be written.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:System.Buffers.ArrayBufferWriter`1"/>, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:System.Buffers.ArrayBufferWriter`1"/>, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity"/> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:System.Buffers.ArrayBufferWriter`1"/> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1"/> that <paramref name="count"/> amount of data was written to the output <see cref="T:System.Span`1"/>/<see cref="T:System.Memory`1"/>
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that uses reference equality (<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>)
            instead of value equality (<see cref="M:System.Object.Equals(System.Object)"/>) when comparing two object instances.
            </summary>
            <remarks>
            The <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> type cannot be instantiated. Instead, use the <see cref="P:System.Collections.Generic.ReferenceEqualityComparer.Instance"/> property
            to access the singleton instance of this type.
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
            <summary>
            Gets the singleton <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> instance.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether two object references refer to the same object instance.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both <paramref name="x"/> and <paramref name="y"/> refer to the same object instance
            or if both are <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object. The returned hash code is based on the object
            identity, not on the contents of the object.
            </summary>
            <param name="obj">The object for which to retrieve the hash code.</param>
            <returns>A hash code for the identity of <paramref name="obj"/>.</returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.GetHashCode"/>.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.StackExtensions">
            <summary>Polyfills for <see cref="T:System.Collections.Generic.Stack`1"/>.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
            <summary>
            Indicates the user is suppling a specific marshaller in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
            <summary>
            Use the platform-provided UTF-8 marshaller.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
            <summary>
            Use the platform-provided UTF-16 marshaller.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="P:System.SR.ArrayDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON array.</summary>
        </member>
        <member name="P:System.SR.CallFlushToAvoidDataLoss">
            <summary>The JSON writer needs to be flushed before getting the current state. There are {0} bytes that have not been committed to the output.</summary>
        </member>
        <member name="P:System.SR.CannotReadIncompleteUTF16">
            <summary>Cannot read incomplete UTF-16 JSON text as string with missing low surrogate.</summary>
        </member>
        <member name="P:System.SR.CannotReadInvalidUTF16">
            <summary>Cannot read invalid UTF-16 JSON text as string. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayAfterPrimitiveOrClose">
            <summary>Cannot write the start of an object/array after a single JSON value or outside of an existing closed object/array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotStartObjectArrayWithoutProperty">
            <summary>Cannot write the start of an object or array without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotTranscodeInvalidUtf8">
            <summary>Cannot transcode invalid UTF-8 JSON text to UTF-16 string.</summary>
        </member>
        <member name="P:System.SR.CannotDecodeInvalidBase64">
            <summary>Cannot decode JSON text that is not encoded as valid Base64 to bytes.</summary>
        </member>
        <member name="P:System.SR.CannotTranscodeInvalidUtf16">
            <summary>Cannot transcode invalid UTF-16 string to UTF-8 JSON text.</summary>
        </member>
        <member name="P:System.SR.CannotEncodeInvalidUTF16">
            <summary>Cannot encode invalid UTF-16 text as JSON. Invalid surrogate value: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotEncodeInvalidUTF8">
            <summary>Cannot encode invalid UTF-8 text as JSON. Invalid input: '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWritePropertyWithinArray">
            <summary>Cannot write a JSON property within an array or as the first JSON token. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWritePropertyAfterProperty">
            <summary>Cannot write a JSON property name following another property name. A JSON value is missing.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueAfterPrimitiveOrClose">
            <summary>Cannot write a JSON value after a single JSON value or outside of an existing closed object/array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.CannotWriteValueWithinObject">
            <summary>Cannot write a JSON value within an object without a property name. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.DepthTooLarge">
            <summary>CurrentDepth ({0}) is equal to or larger than the maximum allowed depth of {1}. Cannot write the next JSON object or array.</summary>
        </member>
        <member name="P:System.SR.DestinationTooShort">
            <summary>Destination is too short.</summary>
        </member>
        <member name="P:System.SR.EmptyJsonIsInvalid">
            <summary>Writing an empty JSON payload (excluding comments) is invalid.</summary>
        </member>
        <member name="P:System.SR.EndOfCommentNotFound">
            <summary>Expected end of comment, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.EndOfStringNotFound">
            <summary>Expected end of string, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndAfterSingleJson">
            <summary>'{0}' is invalid after a single JSON value. Expected end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedEndOfDigitNotFound">
            <summary>'{0}' is an invalid end of a number. Expected a delimiter.</summary>
        </member>
        <member name="P:System.SR.ExpectedFalse">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'false'.</summary>
        </member>
        <member name="P:System.SR.ExpectedJsonTokens">
            <summary>The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true.</summary>
        </member>
        <member name="P:System.SR.ExpectedOneCompleteToken">
            <summary>The input does not contain any complete JSON tokens. Expected the input to have at least one valid, complete, JSON token.</summary>
        </member>
        <member name="P:System.SR.ExpectedNextDigitEValueNotFound">
            <summary>'{0}' is an invalid end of a number. Expected 'E' or 'e'.</summary>
        </member>
        <member name="P:System.SR.ExpectedNull">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'null'.</summary>
        </member>
        <member name="P:System.SR.ExpectedSeparatorAfterPropertyNameNotFound">
            <summary>'{0}' is invalid after a property name. Expected a ':'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyNotFound">
            <summary>'{0}' is an invalid start of a property name. Expected a '"'.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueNotFound">
            <summary>Expected start of a property name or value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfValueNotFound">
            <summary>'{0}' is an invalid start of a value.</summary>
        </member>
        <member name="P:System.SR.ExpectedTrue">
            <summary>'{0}' is an invalid JSON literal. Expected the literal 'true'.</summary>
        </member>
        <member name="P:System.SR.ExpectedValueAfterPropertyNameNotFound">
            <summary>Expected a value, but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.FailedToGetLargerSpan">
            <summary>The 'IBufferWriter' could not provide an output buffer that is large enough to continue writing.</summary>
        </member>
        <member name="P:System.SR.FoundInvalidCharacter">
            <summary>'{0}' is invalid after a value. Expected either ',', '}}', or ']'.</summary>
        </member>
        <member name="P:System.SR.InvalidCast">
            <summary>Cannot get the value of a token type '{0}' as a {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterAfterEscapeWithinString">
            <summary>'{0}' is an invalid escapable character within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterWithinString">
            <summary>'{0}' is invalid within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.InvalidEndOfJsonNonPrimitive">
            <summary>'{0}' is an invalid token type for the end of the JSON payload. Expected either 'EndArray' or 'EndObject'.</summary>
        </member>
        <member name="P:System.SR.InvalidHexCharacterWithinString">
            <summary>'{0}' is not a hex digit following '\u' within a JSON string. The string should be correctly escaped.</summary>
        </member>
        <member name="P:System.SR.JsonDocumentDoesNotSupportComments">
            <summary>Comments cannot be stored in a JsonDocument, only the Skip and Disallow comment handling modes are supported.</summary>
        </member>
        <member name="P:System.SR.JsonElementHasWrongType">
            <summary>The requested operation requires an element of type '{0}', but the target element has type '{1}'.</summary>
        </member>
        <member name="P:System.SR.TypeInfoResolverImmutable">
            <summary>Cannot add callbacks to the 'Modifiers' property after the resolver has been used for the first time.</summary>
        </member>
        <member name="P:System.SR.TypeInfoImmutable">
            <summary>This JsonTypeInfo instance is marked read-only or has already been used in serialization or deserialization.</summary>
        </member>
        <member name="P:System.SR.PropertyInfoImmutable">
            <summary>This JsonTypeInfo instance is marked read-only or has already been used in serialization or deserialization.</summary>
        </member>
        <member name="P:System.SR.MaxDepthMustBePositive">
            <summary>Max depth must be positive.</summary>
        </member>
        <member name="P:System.SR.CommentHandlingMustBeValid">
            <summary>The JsonCommentHandling enum must be set to one of the supported values.</summary>
        </member>
        <member name="P:System.SR.MismatchedObjectArray">
            <summary>'{0}' is invalid without a matching open.</summary>
        </member>
        <member name="P:System.SR.CannotWriteEndAfterProperty">
            <summary>'{0}' is invalid following a property name.</summary>
        </member>
        <member name="P:System.SR.ObjectDepthTooLarge">
            <summary>The maximum configured depth of {0} has been exceeded. Cannot read next JSON object.</summary>
        </member>
        <member name="P:System.SR.PropertyNameTooLarge">
            <summary>The JSON property name of length {0} is too large and not supported.</summary>
        </member>
        <member name="P:System.SR.FormatDecimal">
            <summary>The JSON value is either too large or too small for a Decimal.</summary>
        </member>
        <member name="P:System.SR.FormatDouble">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a Double.</summary>
        </member>
        <member name="P:System.SR.FormatInt32">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int32.</summary>
        </member>
        <member name="P:System.SR.FormatInt64">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int64.</summary>
        </member>
        <member name="P:System.SR.FormatSingle">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a Single.</summary>
        </member>
        <member name="P:System.SR.FormatUInt32">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt32.</summary>
        </member>
        <member name="P:System.SR.FormatUInt64">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt64.</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterDecimal">
            <summary>'{0}' is invalid within a number, immediately after a decimal point ('.'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundAfterSign">
            <summary>'{0}' is invalid within a number, immediately after a sign character ('+' or '-'). Expected a digit ('0'-'9').</summary>
        </member>
        <member name="P:System.SR.RequiredDigitNotFoundEndOfData">
            <summary>Expected a digit ('0'-'9'), but instead reached end of data.</summary>
        </member>
        <member name="P:System.SR.SpecialNumberValuesNotSupported">
            <summary>.NET number values such as positive and negative infinity cannot be written as valid JSON. To make it work when using 'JsonSerializer', consider specifying 'JsonNumberHandling.AllowNamedFloatingPointLiterals' (see https://docs.microsoft.com/dotnet/api/syst ...</summary>
        </member>
        <member name="P:System.SR.ValueTooLarge">
            <summary>The JSON value of length {0} is too large and not supported.</summary>
        </member>
        <member name="P:System.SR.ZeroDepthAtEnd">
            <summary>Expected depth to be zero at the end of the JSON payload. There is an open JSON object or array that should be closed.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToConvertValue">
            <summary>The JSON value could not be converted to {0}.</summary>
        </member>
        <member name="P:System.SR.DeserializeWrongType">
            <summary>The specified type {0} must derive from the specific value's type {1}.</summary>
        </member>
        <member name="P:System.SR.SerializationInvalidBufferSize">
            <summary>The value must be greater than zero.</summary>
        </member>
        <member name="P:System.SR.BufferWriterAdvancedTooFar">
            <summary>Cannot advance past the end of the buffer, which has a size of {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidComparison">
            <summary>Cannot compare the value of a token type '{0}' to text.</summary>
        </member>
        <member name="P:System.SR.UnsupportedFormat">
            <summary>The JSON value is not in a supported {0} format.</summary>
        </member>
        <member name="P:System.SR.ExpectedStartOfPropertyOrValueAfterComment">
            <summary>'{0}' is an invalid start of a property name or value, after a comment.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeArrayEnd">
            <summary>The JSON array contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.TrailingCommaNotAllowedBeforeObjectEnd">
            <summary>The JSON object contains a trailing comma at the end which is not supported in this mode. Change the reader options.</summary>
        </member>
        <member name="P:System.SR.SerializerOptionsImmutable">
            <summary>This JsonSerializerOptions instance is read-only or has already been used in serialization or deserialization.</summary>
        </member>
        <member name="P:System.SR.StreamNotWritable">
            <summary>Stream is not writable.</summary>
        </member>
        <member name="P:System.SR.CannotWriteCommentWithEmbeddedDelimiter">
            <summary>Cannot write a comment value which contains the end of comment delimiter.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameConflict">
            <summary>The JSON property name for '{0}.{1}' collides with another property.</summary>
        </member>
        <member name="P:System.SR.SerializerPropertyNameNull">
            <summary>The JSON property name for '{0}.{1}' cannot be null.</summary>
        </member>
        <member name="P:System.SR.SerializationDataExtensionPropertyInvalid">
            <summary>The extension data property '{0}.{1}' is invalid. It must implement 'IDictionary&lt;string, JsonElement&gt;' or 'IDictionary&lt;string, object&gt;', or be 'JsonObject'.</summary>
        </member>
        <member name="P:System.SR.SerializationDuplicateTypeAttribute">
            <summary>The type '{0}' cannot have more than one member that has the attribute '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializationNotSupportedType">
            <summary>The type '{0}' is not supported.</summary>
        </member>
        <member name="P:System.SR.TypeRequiresAsyncSerialization">
            <summary>The type '{0}' can only be serialized using async serialization methods.</summary>
        </member>
        <member name="P:System.SR.InvalidCharacterAtStartOfComment">
            <summary>'{0}' is invalid after '/' at the beginning of the comment. Expected either '/' or '*'.</summary>
        </member>
        <member name="P:System.SR.UnexpectedEndOfDataWhileReadingComment">
            <summary>Unexpected end of data while reading a comment.</summary>
        </member>
        <member name="P:System.SR.CannotSkip">
            <summary>Cannot skip tokens on partial JSON. Either get the whole payload and create a Utf8JsonReader instance where isFinalBlock is true or call TrySkip.</summary>
        </member>
        <member name="P:System.SR.NotEnoughData">
            <summary>There is not enough data to read through the entire JSON array or object.</summary>
        </member>
        <member name="P:System.SR.UnexpectedEndOfLineSeparator">
            <summary>Found invalid line or paragraph separator character while reading a comment.</summary>
        </member>
        <member name="P:System.SR.JsonSerializerDoesNotSupportComments">
            <summary>Comments cannot be stored when deserializing objects, only the Skip and Disallow comment handling modes are supported.</summary>
        </member>
        <member name="P:System.SR.DeserializeNoConstructor">
            <summary>Deserialization of types without a parameterless constructor, a singular parameterized constructor, or a parameterized constructor annotated with '{0}' is not supported. Type '{1}'.</summary>
        </member>
        <member name="P:System.SR.DeserializePolymorphicInterface">
            <summary>Deserialization of interface types is not supported. Type '{0}'.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterOnAttributeNotCompatible">
            <summary>The converter specified on '{0}' is not compatible with the type '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterOnAttributeInvalid">
            <summary>The converter specified on '{0}' does not derive from JsonConverter or have a public parameterless constructor.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterRead">
            <summary>The converter '{0}' read too much or not enough.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterNotCompatible">
            <summary>The converter '{0}' is not compatible with the type '{1}'.</summary>
        </member>
        <member name="P:System.SR.ResolverTypeNotCompatible">
            <summary>The IJsonTypeInfoResolver returned an incompatible JsonTypeInfo instance of type '{0}', expected type '{1}'.</summary>
        </member>
        <member name="P:System.SR.ResolverTypeInfoOptionsNotCompatible">
            <summary>The IJsonTypeInfoResolver returned a JsonTypeInfo instance whose JsonSerializerOptions setting does not match the provided argument.</summary>
        </member>
        <member name="P:System.SR.SerializationConverterWrite">
            <summary>The converter '{0}' wrote too much or not enough.</summary>
        </member>
        <member name="P:System.SR.NamingPolicyReturnNull">
            <summary>The naming policy '{0}' cannot return null.</summary>
        </member>
        <member name="P:System.SR.SerializationDuplicateAttribute">
            <summary>The attribute '{0}' cannot exist more than once on '{1}'.</summary>
        </member>
        <member name="P:System.SR.SerializeUnableToSerialize">
            <summary>The object or value could not be serialized.</summary>
        </member>
        <member name="P:System.SR.FormatByte">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an unsigned byte.</summary>
        </member>
        <member name="P:System.SR.FormatInt16">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for an Int16.</summary>
        </member>
        <member name="P:System.SR.FormatSByte">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a signed byte.</summary>
        </member>
        <member name="P:System.SR.FormatUInt16">
            <summary>Either the JSON value is not in a supported format, or is out of bounds for a UInt16.</summary>
        </member>
        <member name="P:System.SR.SerializerCycleDetected">
            <summary>A possible object cycle was detected. This can either be due to a cycle or if the object depth is larger than the maximum allowed depth of {0}. Consider using ReferenceHandler.Preserve on JsonSerializerOptions to support cycles.</summary>
        </member>
        <member name="P:System.SR.InvalidLeadingZeroInNumber">
            <summary>Invalid leading zero before '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataCannotParsePreservedObjectToImmutable">
            <summary>Cannot parse a JSON object containing metadata properties like '$id' or '$type' into an array or immutable collection type. Type '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataDuplicateIdFound">
            <summary>The value of the '$id' metadata property '{0}' conflicts with an existing identifier.</summary>
        </member>
        <member name="P:System.SR.MetadataIdIsNotFirstProperty">
            <summary>The metadata property '$id' must be the first reference preservation property in the JSON object.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidReferenceToValueType">
            <summary>Invalid reference to value type '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidTokenAfterValues">
            <summary>The '$values' metadata property must be a JSON array. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataPreservedArrayFailed">
            <summary>Deserialization failed for one of these reasons:
            1. {0}
            2. {1}</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidPropertyInArrayMetadata">
            <summary>A JSON object containing metadata for a nested array includes a non-metadata property '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataStandaloneValuesProperty">
            <summary>A '$values' metadata property must always be preceded by other metadata properties, such as '$id' or '$type'.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceCannotContainOtherProperties">
            <summary>A JSON object that contains a '$ref' metadata property must not contain any other properties.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceNotFound">
            <summary>Reference '{0}' was not found.</summary>
        </member>
        <member name="P:System.SR.MetadataValueWasNotString">
            <summary>The '$id', '$ref' or '$type' metadata properties must be JSON strings. Current token type is '{0}'.</summary>
        </member>
        <member name="P:System.SR.MetadataInvalidPropertyWithLeadingDollarSign">
            <summary>Properties that start with '$' are not allowed in types that support metadata. Either escape the character or disable reference preservation and polymorphic deserialization.</summary>
        </member>
        <member name="P:System.SR.MetadataUnexpectedProperty">
            <summary>The metadata property is either not supported by the type or is not the first property in the deserialized JSON object.</summary>
        </member>
        <member name="P:System.SR.MetadataDuplicateTypeProperty">
            <summary>Deserialized object contains a duplicate type discriminator metadata property.</summary>
        </member>
        <member name="P:System.SR.MultipleMembersBindWithConstructorParameter">
            <summary>Members '{0}' and '{1}' on type '{2}' cannot both bind with parameter '{3}' in the deserialization constructor.</summary>
        </member>
        <member name="P:System.SR.ConstructorParamIncompleteBinding">
            <summary>Each parameter in the deserialization constructor on type '{0}' must bind to an object property or field on deserialization. Each parameter name must match with a property or field on the object. Fields are only considered when 'JsonSerializerOptions.Inclu ...</summary>
        </member>
        <member name="P:System.SR.ConstructorMaxOf64Parameters">
            <summary>The deserialization constructor on type '{0}' may not have more than 64 parameters for deserialization.</summary>
        </member>
        <member name="P:System.SR.ObjectWithParameterizedCtorRefMetadataNotSupported">
            <summary>Reference metadata is not supported when deserializing constructor parameters. See type '{0}'.</summary>
        </member>
        <member name="P:System.SR.SerializerConverterFactoryReturnsNull">
            <summary>The converter '{0}' cannot return a null value.</summary>
        </member>
        <member name="P:System.SR.SerializationNotSupportedParentType">
            <summary>The unsupported member type is located on type '{0}'.</summary>
        </member>
        <member name="P:System.SR.ExtensionDataCannotBindToCtorParam">
            <summary>The extension data property '{0}' on type '{1}' cannot bind with a parameter in the deserialization constructor.</summary>
        </member>
        <member name="P:System.SR.BufferMaximumSizeExceeded">
            <summary>Cannot allocate a buffer of size {0}.</summary>
        </member>
        <member name="P:System.SR.CannotSerializeInvalidType">
            <summary>The type '{0}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</summary>
        </member>
        <member name="P:System.SR.SerializeTypeInstanceNotSupported">
            <summary>Serialization and deserialization of '{0}' instances are not supported.</summary>
        </member>
        <member name="P:System.SR.JsonIncludeOnNonPublicInvalid">
            <summary>The non-public property '{0}' on type '{1}' is annotated with 'JsonIncludeAttribute' which is invalid.</summary>
        </member>
        <member name="P:System.SR.CannotSerializeInvalidMember">
            <summary>The type '{0}' of property '{1}' on type '{2}' is invalid for serialization or deserialization because it is a pointer type, is a ref struct, or contains generic parameters that have not been replaced by specific types.</summary>
        </member>
        <member name="P:System.SR.CannotPopulateCollection">
            <summary>The collection type '{0}' is abstract, an interface, or is read only, and could not be instantiated and populated.</summary>
        </member>
        <member name="P:System.SR.ConstructorContainsNullParameterNames">
            <summary>The deserialization constructor for type '{0}' contains parameters with null names. This might happen because the parameter names have been trimmed by the linker. Consider using the source generated serializer instead.</summary>
        </member>
        <member name="P:System.SR.DefaultIgnoreConditionAlreadySpecified">
            <summary>'IgnoreNullValues' and 'DefaultIgnoreCondition' cannot both be set to non-default values.</summary>
        </member>
        <member name="P:System.SR.DefaultIgnoreConditionInvalid">
            <summary>The value cannot be 'JsonIgnoreCondition.Always'.</summary>
        </member>
        <member name="P:System.SR.DictionaryKeyTypeNotSupported">
            <summary>The type '{0}' is not a supported dictionary key using converter of type '{1}'.</summary>
        </member>
        <member name="P:System.SR.IgnoreConditionOnValueTypeInvalid">
            <summary>The ignore condition 'JsonIgnoreCondition.WhenWritingNull' is not valid on value-type member '{0}' on type '{1}'. Consider using 'JsonIgnoreCondition.WhenWritingDefault'.</summary>
        </member>
        <member name="P:System.SR.NumberHandlingOnPropertyInvalid">
            <summary>'JsonNumberHandlingAttribute' is only valid on a number or a collection of numbers when applied to a property or field. See member '{0}' on type '{1}'.</summary>
        </member>
        <member name="P:System.SR.ConverterCanConvertMultipleTypes">
            <summary>The converter '{0}' handles type '{1}' but is being asked to convert type '{2}'. Either create a separate converter for type '{2}' or change the converter's 'CanConvert' method to only return 'true' for a single type.</summary>
        </member>
        <member name="P:System.SR.MetadataReferenceOfTypeCannotBeAssignedToType">
            <summary>The object with reference id '{0}' of type '{1}' cannot be assigned to the type '{2}'.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToAssignValue">
            <summary>Unable to cast object of type '{0}' to type '{1}'.</summary>
        </member>
        <member name="P:System.SR.DeserializeUnableToAssignNull">
            <summary>Unable to assign 'null' to the property or field of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.SerializerConverterFactoryReturnsJsonConverterFactory">
            <summary>The converter '{0}' cannot return an instance of JsonConverterFactory.</summary>
        </member>
        <member name="P:System.SR.NodeElementWrongType">
            <summary>The element must be of type '{0}'</summary>
        </member>
        <member name="P:System.SR.NodeElementCannotBeObjectOrArray">
            <summary>The element cannot be an object or array.</summary>
        </member>
        <member name="P:System.SR.NodeAlreadyHasParent">
            <summary>The node already has a parent.</summary>
        </member>
        <member name="P:System.SR.NodeCycleDetected">
            <summary>A node cycle was detected.</summary>
        </member>
        <member name="P:System.SR.NodeUnableToConvert">
            <summary>A value of type '{0}' cannot be converted to a '{1}'.</summary>
        </member>
        <member name="P:System.SR.NodeUnableToConvertElement">
            <summary>An element of type '{0}' cannot be converted to a '{1}'.</summary>
        </member>
        <member name="P:System.SR.NodeValueNotAllowed">
            <summary>A JsonNode cannot be used as a value.</summary>
        </member>
        <member name="P:System.SR.NodeWrongType">
            <summary>The node must be of type '{0}'.</summary>
        </member>
        <member name="P:System.SR.NodeDuplicateKey">
            <summary>An item with the same key has already been added. Key: {0}</summary>
        </member>
        <member name="P:System.SR.SerializerContextOptionsImmutable">
            <summary>JsonSerializerOptions instances cannot be modified once encapsulated by a JsonSerializerContext. Such encapsulation can happen either when calling 'JsonSerializerOptions.AddContext' or when passing the options instance to a JsonSerializerContext constructo ...</summary>
        </member>
        <member name="P:System.SR.ConverterForPropertyMustBeValid">
            <summary>The generic type of the converter for property '{0}.{1}' must match with the specified converter type '{2}'. The converter must not be 'null'.</summary>
        </member>
        <member name="P:System.SR.NoMetadataForType">
            <summary>Metadata for type '{0}' was not provided by TypeInfoResolver of type '{1}'. If using source generation, ensure that all root types passed to the serializer have been indicated with 'JsonSerializableAttribute', along with any types that might be serialized  ...</summary>
        </member>
        <member name="P:System.SR.CollectionIsReadOnly">
            <summary>Collection is read-only.</summary>
        </member>
        <member name="P:System.SR.ArrayIndexNegative">
            <summary>Number was less than 0.</summary>
        </member>
        <member name="P:System.SR.ArrayTooSmall">
            <summary>Destination array was not long enough.</summary>
        </member>
        <member name="P:System.SR.NodeJsonObjectCustomConverterNotAllowedOnExtensionProperty">
            <summary>A custom converter for JsonObject is not allowed on an extension property.</summary>
        </member>
        <member name="P:System.SR.NoMetadataForTypeProperties">
            <summary>TypeInfoResolver '{0}' did not provide property metadata for type '{1}'.</summary>
        </member>
        <member name="P:System.SR.FieldCannotBeVirtual">
            <summary>A 'field' member cannot be 'virtual'. See arguments for the '{0}' and '{1}' parameters.</summary>
        </member>
        <member name="P:System.SR.MissingFSharpCoreMember">
            <summary>Could not locate required member '{0}' from FSharp.Core. This might happen because your application has enabled member-level trimming.</summary>
        </member>
        <member name="P:System.SR.FSharpDiscriminatedUnionsNotSupported">
            <summary>F# discriminated union serialization is not supported. Consider authoring a custom converter for the type.</summary>
        </member>
        <member name="P:System.SR.NoMetadataForTypeCtorParams">
            <summary>TypeInfoResolver '{0}' did not provide constructor parameter metadata for type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_BaseConverterDoesNotSupportMetadata">
            <summary>The converter for polymorphic type '{0}' does not support metadata writes or reads.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_DerivedConverterDoesNotSupportMetadata">
            <summary>The converter for derived type '{0}' does not support metadata writes or reads.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_TypeDoesNotSupportPolymorphism">
            <summary>Specified type '{0}' does not support polymorphism. Polymorphic types cannot be structs, sealed types, generic types or System.Object.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_DerivedTypeIsNotSupported">
            <summary>Specified type '{0}' is not a supported derived type for the polymorphic type '{1}'. Derived types must be assignable to the base type, must not be generic and cannot be abstact classes or interfaces unless 'JsonUnknownDerivedTypeHandling.FallBackToNearest ...</summary>
        </member>
        <member name="P:System.SR.Polymorphism_DerivedTypeIsAlreadySpecified">
            <summary>The polymorphic type '{0}' has already specified derived type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_TypeDicriminatorIdIsAlreadySpecified">
            <summary>The polymorphic type '{0}' has already specified a type discriminator '{1}'.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_InvalidCustomTypeDiscriminatorPropertyName">
            <summary>The metadata property names '$id', '$ref', and '$values' are reserved and cannot be used as custom type discriminator property names.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_ConfigurationDoesNotSpecifyDerivedTypes">
            <summary>Polymorphic configuration for type '{0}' should specify at least one derived type.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_UnrecognizedTypeDiscriminator">
            <summary>Read unrecognized type discriminator id '{0}'.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_RuntimeTypeNotSupported">
            <summary>Runtime type '{0}' is not supported by polymorphic type '{1}'.</summary>
        </member>
        <member name="P:System.SR.Polymorphism_RuntimeTypeDiamondAmbiguity">
            <summary>Runtime type '{0}' has a diamond ambiguity between derived types '{1}' and '{2}' of polymorphic type '{3}'. Consider either removing one of the derived types or removing the 'JsonUnknownDerivedTypeHandling.FallBackToNearestAncestor' setting.</summary>
        </member>
        <member name="P:System.SR.InvalidJsonTypeInfoOperationForKind">
            <summary>Invalid JsonTypeInfo operation for JsonTypeInfoKind '{0}'.</summary>
        </member>
        <member name="P:System.SR.CreateObjectConverterNotCompatible">
            <summary>The converter for type '{0}' does not support setting 'CreateObject' delegates.</summary>
        </member>
        <member name="P:System.SR.CombineOneOfResolversIsNull">
            <summary>One of the provided resolvers is null.</summary>
        </member>
        <member name="P:System.SR.JsonPropertyInfoBoundToDifferentParent">
            <summary>JsonPropertyInfo with name '{0}' for type '{1}' is already bound to different JsonTypeInfo.</summary>
        </member>
        <member name="P:System.SR.JsonTypeInfoUsedButTypeInfoResolverNotSet">
            <summary>JsonTypeInfo metadata references a JsonSerializerOptions instance that doesn't specify a TypeInfoResolver.</summary>
        </member>
        <member name="P:System.SR.JsonPolymorphismOptionsAssociatedWithDifferentJsonTypeInfo">
            <summary>Parameter already associated with a different JsonTypeInfo instance.</summary>
        </member>
        <member name="P:System.SR.JsonPropertyRequiredAndNotDeserializable">
            <summary>JsonPropertyInfo '{0}' defined in type '{1}' is marked required but does not specify a setter.</summary>
        </member>
        <member name="P:System.SR.JsonPropertyRequiredAndExtensionData">
            <summary>JsonPropertyInfo '{0}' defined in type '{1}' is marked both as required and as an extension data property. This combination is not supported.</summary>
        </member>
        <member name="P:System.SR.JsonRequiredPropertiesMissing">
            <summary>JSON deserialization for type '{0}' was missing required properties, including the following: {1}</summary>
        </member>
    </members>
</doc>
