# static analysis

parameters:
  BuildConfiguration: ''
  VmImage: ''

jobs:
- job:
  displayName: Static Analysis
  pool:
    vmImage: '${{ parameters.VmImage }}'

  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: true  # if true, execute `execute git clean -ffdx && git reset --hard HEAD` before fetching

  #Analyze source code for type of content and target types to help determine which tools to run
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'AutoApplicability'
    inputs:
      VerboseWriter: true
      ExternalRelease: true
      InternalRelease: true
      IsService: true
      IsSoftware: true

  # Analyze source and build output text files for credentials
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'CredScan'
    inputs:
      toolMajorVersion: V2
      scanFolder: $(Build.SourcesDirectory)
      suppressionsFile: templates/CredScanSuppressions.json
      debugMode: false
      verboseOutput: false

  # Scan text elements including code, code comments, and content/web pages, for sensitive terms based on legal, cultural, or geopolitical reasons
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'PoliCheck'
    inputs:
      targetType: F

  # AntiMalware scan
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'AntiMalware'
    inputs:
      EnableServices: true
      SignatureFreshness: OneDay
      # Signature refreshes on Hosted Agents can sometimes have a delay of a day or two.
      TreatStaleSignatureAs: Warning

  # Run checks for recently discovered vulnerabilities which are not yet incorporated to another tool
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
    displayName: 'Vulnerability Assessment'

  - task: DotNetCoreCLI@2
    displayName: Build Cosmos.GraphQL.Service/Cosmos.GraphQL.Service.sln
    inputs:
      command: build
      projects: 'Cosmos.GraphQL.Service/Cosmos.GraphQL.Service.sln'
      configuration: '${{ parameters.BuildConfiguration }}'
      publishTestResults: true

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Governance Detection' #https://docs.opensource.microsoft.com/tools/cg.html
    inputs:
      alertWarningLevel: Medium
      failOnAlert: true

#  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
#    displayName: 'BinSkim'
#    inputs:
#      InputType: Basic

  # Publish Analysis Results (position after all tools ran)
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'

  # The Post-Analysis build task will analyze the log files produced by the tools, and introduce a build break
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: true
